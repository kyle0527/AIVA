"""
JsInteractionSimulator 使用範例

展示如何使用 JsInteractionSimulator 來模擬 JavaScript 互動
"""

from __future__ import annotations

import asyncio

from .js_interaction_simulator import InteractionType, JsEvent, JsInteractionSimulator


async def example_basic_usage() -> None:
    """基本使用範例"""
    print("=== 基本使用範例 ===\n")

    # 創建模擬器實例
    simulator = JsInteractionSimulator(
        max_retry=2, default_timeout_ms=3000, enable_logging=True
    )

    # 添加各種事件
    simulator.add_click("#login-button")
    simulator.add_input("#username", "admin")
    simulator.add_input("#password", "password123")
    simulator.add_submit("#login-form")

    # 執行事件隊列（不提供 page 對象時僅記錄）
    results = await simulator.execute_queue()

    # 查看結果
    print(f"\n執行了 {len(results)} 個事件")
    for i, result in enumerate(results, 1):
        status = "[V]" if result.success else "[X]"
        print(
            f"{status} 事件 {i}: {result.event.event_type.value} "
            f"on {result.event.selector} "
            f"({result.execution_time_ms:.2f}ms)"
        )

    # 獲取統計信息
    stats = simulator.get_stats()
    print("\n統計信息:")
    print(f"  成功率: {stats['success_rate'] * 100:.1f}%")
    print(f"  平均執行時間: {stats['avg_execution_time_ms']:.2f}ms")
    print(f"  事件類型分佈: {stats['events_by_type']}")


async def example_advanced_usage() -> None:
    """進階使用範例 - 自定義事件"""
    print("\n\n=== 進階使用範例 ===\n")

    simulator = JsInteractionSimulator(enable_logging=False)

    # 使用自定義事件
    custom_events = [
        JsEvent(
            event_type=InteractionType.HOVER,
            selector=".dropdown-menu",
            delay_ms=500,
        ),
        JsEvent(
            event_type=InteractionType.CLICK,
            selector=".dropdown-item:first-child",
            delay_ms=200,
        ),
        JsEvent(
            event_type=InteractionType.SCROLL,
            selector="#bottom-section",
            delay_ms=300,
        ),
    ]

    for event in custom_events:
        simulator.add_event(event)

    # 執行並收集結果
    results = await simulator.execute_queue()

    print(f"執行了 {len(results)} 個自定義事件")
    print(f"成功率: {simulator.get_success_rate() * 100:.1f}%")


async def example_with_playwright() -> None:
    """與 Playwright 集成的範例（需要安裝 playwright）"""
    print("\n\n=== Playwright 集成範例 ===\n")
    print("注意：此範例需要安裝 playwright: pip install playwright")
    print("並運行: playwright install\n")

    try:
        from playwright.async_api import (  # type: ignore[import-not-found]
            async_playwright,
        )

        simulator = JsInteractionSimulator(enable_logging=True)

        async with async_playwright() as p:
            # 啟動瀏覽器
            browser = await p.chromium.launch(headless=True)
            page = await browser.new_page()

            # 訪問測試頁面
            await page.goto("https://example.com")

            # 添加互動事件
            simulator.add_click("a")  # 點擊第一個連結

            # 執行事件（傳入 page 對象）
            results = await simulator.execute_queue(page=page)

            print(f"\n在實際頁面上執行了 {len(results)} 個事件")
            for result in results:
                status = "成功" if result.success else "失敗"
                print(f"  {result.event.event_type.value}: {status}")

            await browser.close()

    except ImportError:
        print("未安裝 Playwright，跳過此範例")


async def example_error_handling() -> None:
    """錯誤處理範例"""
    print("\n\n=== 錯誤處理範例 ===\n")

    simulator = JsInteractionSimulator(max_retry=3, enable_logging=True)

    # 添加一些可能失敗的事件
    simulator.add_click("#non-existent-element")
    simulator.add_input("#also-not-here", "test")

    results = await simulator.execute_queue()

    # 檢查失敗的事件
    failed_events = [r for r in results if not r.success]
    if failed_events:
        print(f"\n有 {len(failed_events)} 個事件失敗:")
        for result in failed_events:
            print(f"  - {result.event.selector}: {result.error}")


async def main() -> None:
    """運行所有範例"""
    await example_basic_usage()
    await example_advanced_usage()
    await example_error_handling()

    # 取消註釋以運行 Playwright 範例
    # await example_with_playwright()


if __name__ == "__main__":
    asyncio.run(main())
