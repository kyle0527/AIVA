╔══════════════════════════════════════════════════════════════════════════════╗
║                         AIVA 專案完整分析報告                                 ║
╚══════════════════════════════════════════════════════════════════════════════╝

生成時間: 2025-10-13 06:39:22
專案路徑: c:\D\E\AIVA\AIVA-main

═══════════════════════════════════════════════════════════════════════════════
📊 專案統計摘要
═══════════════════════════════════════════════════════════════════════════════

總文件數量: 171
總程式碼行數: 23349
程式碼檔案數: 161

───────────────────────────────────────────────────────────────────────────────
🎯 檔案類型統計 (Top 10)
───────────────────────────────────────────────────────────────────────────────

  .py                141 個檔案
  .md                  7 個檔案
  .ps1                 3 個檔案
  .toml                2 個檔案
  .ini                 2 個檔案
  .bat                 2 個檔案
  .yml                 2 個檔案
  .integration         1 個檔案
  .json                1 個檔案
  .example             1 個檔案


───────────────────────────────────────────────────────────────────────────────
💻 程式碼行數統計 (依副檔名)
───────────────────────────────────────────────────────────────────────────────

  .py           19220 行  (  141 個檔案, 平均   136.3 行/檔案)
  .md            2930 行  (    7 個檔案, 平均   418.6 行/檔案)
  .ps1            518 行  (    3 個檔案, 平均   172.7 行/檔案)
  .yml            216 行  (    2 個檔案, 平均     108 行/檔案)
  .sql            178 行  (    1 個檔案, 平均     178 行/檔案)
  .toml           130 行  (    2 個檔案, 平均      65 行/檔案)
  .sh              65 行  (    1 個檔案, 平均      65 行/檔案)
  .yaml            49 行  (    1 個檔案, 平均      49 行/檔案)
  .bat             35 行  (    2 個檔案, 平均    17.5 行/檔案)
  .json             8 行  (    1 個檔案, 平均       8 行/檔案)


───────────────────────────────────────────────────────────────────────────────
📈 專案規模分析
───────────────────────────────────────────────────────────────────────────────

Python 程式碼行數: 19220 行
Python 檔案數量: 141 個
平均每個 Python 檔案: 136.3 行

文檔 (Markdown) 行數: 2930 行
配置檔案數量: 8 個

───────────────────────────────────────────────────────────────────────────────
🚫 已排除的目錄類型
───────────────────────────────────────────────────────────────────────────────

  • .git
  • __pycache__
  • .mypy_cache
  • .ruff_cache
  • node_modules
  • .venv
  • venv
  • .pytest_cache
  • .tox
  • dist
  • build
  • .egg-info
  • .eggs
  • htmlcov
  • .coverage
  • .hypothesis
  • .idea
  • .vscode


═══════════════════════════════════════════════════════════════════════════════
🌳 專案目錄結構
═══════════════════════════════════════════════════════════════════════════════

📦 AIVA-main
├─📁 _out/
│   └─📄 PROJECT_REPORT.txt
├─📁 docker/
│   ├─📁 initdb/
│   │   └─🗄️ 001_schema.sql
│   ├─🔧 docker-compose.production.yml
│   ├─🔧 docker-compose.yml
│   ├─📄 Dockerfile.integration
│   └─⚡ entrypoint.integration.sh
├─📁 services/
│   ├─📁 aiva_common/
│   │   ├─📁 utils/
│   │   │   ├─📁 dedup/
│   │   │   │   ├─🐍 __init__.py
│   │   │   │   └─🐍 dedupe.py
│   │   │   ├─📁 network/
│   │   │   │   ├─🐍 __init__.py
│   │   │   │   ├─🐍 backoff.py
│   │   │   │   └─🐍 ratelimit.py
│   │   │   ├─🐍 __init__.py
│   │   │   ├─🐍 ids.py
│   │   │   └─🐍 logging.py
│   │   ├─🐍 __init__.py
│   │   ├─🐍 config.py
│   │   ├─🐍 enums.py
│   │   ├─🐍 mq.py
│   │   ├─📄 py.typed
│   │   └─🐍 schemas.py
│   ├─📁 core/
│   │   └─📁 aiva_core/
│   │       ├─📁 analysis/
│   │       │   ├─🐍 __init__.py
│   │       │   ├─🐍 dynamic_strategy_adjustment.py
│   │       │   ├─🐍 initial_surface.py
│   │       │   └─🐍 strategy_generator.py
│   │       ├─📁 execution/
│   │       │   ├─🐍 __init__.py
│   │       │   ├─🐍 execution_status_monitor.py
│   │       │   ├─🐍 task_generator.py
│   │       │   └─🐍 task_queue_manager.py
│   │       ├─📁 ingestion/
│   │       │   ├─🐍 __init__.py
│   │       │   └─🐍 scan_module_interface.py
│   │       ├─📁 output/
│   │       │   ├─🐍 __init__.py
│   │       │   └─🐍 to_functions.py
│   │       ├─📁 state/
│   │       │   ├─🐍 __init__.py
│   │       │   └─🐍 session_state_manager.py
│   │       ├─🐍 __init__.py
│   │       ├─🐍 app.py
│   │       └─🐍 schemas.py
│   ├─📁 function/
│   │   ├─📁 common/
│   │   │   ├─🐍 __init__.py
│   │   │   ├─🐍 detection_config.py
│   │   │   └─🐍 unified_smart_detection_manager.py
│   │   ├─📁 function_idor/
│   │   │   └─📁 aiva_func_idor/
│   │   │       ├─🐍 __init__.py
│   │   │       ├─🐍 cross_user_tester.py
│   │   │       ├─🐍 enhanced_worker.py
│   │   │       ├─🐍 resource_id_extractor.py
│   │   │       ├─🐍 smart_idor_detector.py
│   │   │       ├─🐍 vertical_escalation_tester.py
│   │   │       └─🐍 worker.py
│   │   ├─📁 function_sqli/
│   │   │   ├─📁 aiva_func_sqli/
│   │   │   │   ├─📁 engines/
│   │   │   │   │   ├─🐍 __init__.py
│   │   │   │   │   ├─🐍 boolean_detection_engine.py
│   │   │   │   │   ├─🐍 error_detection_engine.py
│   │   │   │   │   ├─🐍 oob_detection_engine.py
│   │   │   │   │   ├─🐍 time_detection_engine.py
│   │   │   │   │   └─🐍 union_detection_engine.py
│   │   │   │   ├─🐍 __init__.py
│   │   │   │   ├─🐍 backend_db_fingerprinter.py
│   │   │   │   ├─🐍 config.py
│   │   │   │   ├─🐍 detection_models.py
│   │   │   │   ├─🐍 exceptions.py
│   │   │   │   ├─🐍 payload_wrapper_encoder.py
│   │   │   │   ├─🐍 result_binder_publisher.py
│   │   │   │   ├─🐍 schemas.py
│   │   │   │   ├─🐍 smart_detection_manager.py
│   │   │   │   ├─🐍 task_queue.py
│   │   │   │   ├─🐍 telemetry.py
│   │   │   │   ├─🐍 worker_legacy.py
│   │   │   │   └─🐍 worker.py
│   │   │   └─🐍 __init__.py
│   │   ├─📁 function_ssrf/
│   │   │   ├─📁 aiva_func_ssrf/
│   │   │   │   ├─🐍 __init__.py
│   │   │   │   ├─🐍 enhanced_worker.py
│   │   │   │   ├─🐍 internal_address_detector.py
│   │   │   │   ├─🐍 oast_dispatcher.py
│   │   │   │   ├─🐍 param_semantics_analyzer.py
│   │   │   │   ├─🐍 result_publisher.py
│   │   │   │   ├─🐍 schemas.py
│   │   │   │   ├─🐍 smart_ssrf_detector.py
│   │   │   │   └─🐍 worker.py
│   │   │   └─🐍 __init__.py
│   │   └─📁 function_xss/
│   │       ├─📁 aiva_func_xss/
│   │       │   ├─🐍 __init__.py
│   │       │   ├─🐍 blind_xss_listener_validator.py
│   │       │   ├─🐍 dom_xss_detector.py
│   │       │   ├─🐍 payload_generator.py
│   │       │   ├─🐍 result_publisher.py
│   │       │   ├─🐍 schemas.py
│   │       │   ├─🐍 stored_detector.py
│   │       │   ├─🐍 task_queue.py
│   │       │   ├─🐍 traditional_detector.py
│   │       │   └─🐍 worker.py
│   │       └─🐍 __init__.py
│   ├─📁 integration/
│   │   ├─📁 aiva_integration/
│   │   │   ├─📁 analysis/
│   │   │   │   ├─🐍 __init__.py
│   │   │   │   ├─🐍 compliance_policy_checker.py
│   │   │   │   ├─🐍 risk_assessment_engine.py
│   │   │   │   └─🐍 vuln_correlation_analyzer.py
│   │   │   ├─📁 config_template/
│   │   │   │   ├─🐍 __init__.py
│   │   │   │   └─🐍 config_template_manager.py
│   │   │   ├─📁 middlewares/
│   │   │   │   ├─🐍 __init__.py
│   │   │   │   └─🐍 rate_limiter.py
│   │   │   ├─📁 observability/
│   │   │   │   ├─🐍 __init__.py
│   │   │   │   └─🐍 metrics.py
│   │   │   ├─📁 perf_feedback/
│   │   │   │   ├─🐍 __init__.py
│   │   │   │   ├─🐍 improvement_suggestion_generator.py
│   │   │   │   └─🐍 scan_metadata_analyzer.py
│   │   │   ├─📁 reception/
│   │   │   │   ├─🐍 __init__.py
│   │   │   │   ├─🐍 data_reception_layer.py
│   │   │   │   └─🐍 sql_result_database.py
│   │   │   ├─📁 reporting/
│   │   │   │   ├─🐍 __init__.py
│   │   │   │   ├─🐍 formatter_exporter.py
│   │   │   │   ├─🐍 report_content_generator.py
│   │   │   │   └─🐍 report_template_selector.py
│   │   │   ├─📁 security/
│   │   │   │   ├─🐍 __init__.py
│   │   │   │   └─🐍 auth.py
│   │   │   ├─🐍 __init__.py
│   │   │   ├─🐍 app.py
│   │   │   └─🐍 settings.py
│   │   ├─📁 alembic/
│   │   │   ├─📁 versions/
│   │   │   │   └─🐍 001_initial_schema.py
│   │   │   └─🐍 env.py
│   │   ├─📁 api_gateway/
│   │   │   └─📁 api_gateway/
│   │   │       └─🐍 app.py
│   │   └─📄 alembic.ini
│   ├─📁 scan/
│   │   └─📁 aiva_scan/
│   │       ├─📁 core_crawling_engine/
│   │       │   ├─🐍 __init__.py
│   │       │   ├─🐍 http_client_hi.py
│   │       │   ├─🐍 static_content_parser.py
│   │       │   └─🐍 url_queue_manager.py
│   │       ├─📁 dynamic_engine/
│   │       │   ├─🐍 __init__.py
│   │       │   ├─🐍 dynamic_content_extractor.py
│   │       │   ├─🐍 example_browser_pool.py
│   │       │   ├─🐍 example_extractor.py
│   │       │   ├─🐍 example_usage.py
│   │       │   ├─🐍 headless_browser_pool.py
│   │       │   └─🐍 js_interaction_simulator.py
│   │       ├─📁 info_gatherer/
│   │       │   ├─🐍 __init__.py
│   │       │   ├─🐍 javascript_source_analyzer.py
│   │       │   ├─🐍 passive_fingerprinter.py
│   │       │   └─🐍 sensitive_info_detector.py
│   │       ├─🐍 __init__.py
│   │       ├─🐍 authentication_manager.py
│   │       ├─🐍 config_control_center.py
│   │       ├─🐍 fingerprint_manager.py
│   │       ├─🐍 header_configuration.py
│   │       ├─🐍 scan_context.py
│   │       ├─🐍 scan_orchestrator_new.py
│   │       ├─🐍 scan_orchestrator_old.py
│   │       ├─🐍 scan_orchestrator.py
│   │       ├─🐍 schemas.py
│   │       ├─🐍 scope_manager.py
│   │       ├─🐍 strategy_controller.py
│   │       └─🐍 worker.py
│   └─🐍 __init__.py
├─📁 tools/
│   ├─🐍 py2mermaid.py
│   └─🐍 update_imports.py
├─🐍 __init__.py
├─📄 .editorconfig
├─📄 .env
├─📄 .env.example
├─📄 .gitignore
├─🔧 .pre-commit-config.yaml
├─📄 .pylintrc
├─📝 ARCHITECTURE_REPORT.md
├─📝 CORE_MODULE_ANALYSIS.md
├─📝 DATA_CONTRACT_ANALYSIS.md
├─📝 DATA_CONTRACT.md
├─📝 FINAL_FIX_REPORT.md
├─⚡ generate_clean_tree.ps1
├─⚡ generate_project_report.ps1
├─⚡ generate_stats.ps1
├─📄 mypy.ini
├─📄 pyproject.toml
├─⚙️ pyrightconfig.json
├─📝 QUICK_START.md
├─📄 ruff.toml
├─📝 SCAN_ENGINE_IMPROVEMENT_REPORT.md
├─⚡ setup_env.bat
└─⚡ start_dev.bat


═══════════════════════════════════════════════════════════════════════════════
📖 專案架構說明
═══════════════════════════════════════════════════════════════════════════════

【核心模組】services/core/aiva_core/
────────────────────────────────────────
  🎯 用途: 漏洞掃描的核心引擎,負責策略分析、任務調度和執行監控
  
  📁 analysis/ - 策略分析引擎
    • dynamic_strategy_adjustment.py - 動態策略調整器,根據掃描結果優化策略
    • initial_surface.py - 初始攻擊面分析,識別潛在測試點
    • strategy_generator.py - 測試策略生成器,規劃掃描路徑
  
  📁 execution/ - 任務執行引擎
    • execution_status_monitor.py - 執行狀態監控器,追蹤任務進度
    • task_generator.py - 任務生成器,將策略轉換為具體任務
    • task_queue_manager.py - 任務佇列管理器,協調任務分發
  
  📁 ingestion/ - 資料接收層
    • scan_module_interface.py - 掃描模組介面,接收掃描結果
  
  📁 output/ - 輸出分發層
    • to_functions.py - 將任務分發給各個漏洞檢測模組
  
  📁 state/ - 狀態管理
    • session_state_manager.py - 會話狀態管理器,維護掃描上下文

【掃描模組】services/scan/aiva_scan/
────────────────────────────────────────
  🎯 用途: 網站爬蟲和資訊收集引擎,發現測試目標和攻擊面
  
  📁 core_crawling_engine/ - 核心爬蟲引擎
    • http_client_hi.py - 高效能 HTTP 客戶端,支援並發請求
    • static_content_parser.py - 靜態內容解析器,提取連結和表單
    • url_queue_manager.py - URL 佇列管理器,去重和優先級排序
  
  📁 dynamic_engine/ - 動態內容爬蟲
    • headless_browser_pool.py - 無頭瀏覽器池,管理 Playwright 實例
    • js_interaction_simulator.py - JavaScript 互動模擬器,觸發動態內容
    • dynamic_content_extractor.py - 動態內容提取器,捕獲 AJAX 請求
  
  📁 info_gatherer/ - 資訊收集器
    • passive_fingerprinter.py - 被動指紋識別,分析技術棧
    • javascript_source_analyzer.py - JavaScript 原始碼分析,發現 API 端點
    • sensitive_info_detector.py - 敏感資訊檢測器,識別洩漏風險
  
  🔧 核心控制器:
    • scan_orchestrator.py - 掃描協調器,統籌整個爬蟲流程
    • config_control_center.py - 配置控制中心,動態調整掃描參數
    • strategy_controller.py - 策略控制器,決定爬蟲深度和廣度
    • scope_manager.py - 範圍管理器,限制掃描邊界
    • authentication_manager.py - 認證管理器,處理登入狀態

【漏洞檢測模組】services/function/
────────────────────────────────────────
  🎯 用途: 專業化漏洞檢測引擎,針對不同類型漏洞進行深度測試
  
  📁 function_xss/ - XSS 跨站腳本檢測
    • traditional_detector.py - 傳統 XSS 檢測,反射型和儲存型
    • dom_xss_detector.py - DOM-based XSS 檢測,客戶端漏洞
    • stored_detector.py - 儲存型 XSS 專用檢測器
    • blind_xss_listener_validator.py - Blind XSS 監聽驗證器
    • payload_generator.py - Payload 生成器,繞過 WAF
  
  📁 function_sqli/ - SQL 注入檢測
    📁 engines/ - 多種檢測引擎
      • boolean_detection_engine.py - 布林盲注檢測
      • time_detection_engine.py - 時間盲注檢測
      • error_detection_engine.py - 報錯注入檢測
      • union_detection_engine.py - UNION 查詢注入
      • oob_detection_engine.py - Out-of-Band 注入
    • backend_db_fingerprinter.py - 後端資料庫指紋識別
    • smart_detection_manager.py - 智慧檢測管理器,選擇最佳引擎
    • payload_wrapper_encoder.py - Payload 包裝和編碼器
  
  📁 function_ssrf/ - 伺服器端請求偽造檢測
    • smart_ssrf_detector.py - 智慧 SSRF 檢測器
    • internal_address_detector.py - 內網位址檢測器
    • param_semantics_analyzer.py - 參數語意分析器,識別 URL 參數
    • oast_dispatcher.py - Out-of-Band 測試調度器
  
  📁 function_idor/ - 不安全的直接物件引用檢測
    • smart_idor_detector.py - 智慧 IDOR 檢測器
    • resource_id_extractor.py - 資源 ID 提取器
    • cross_user_tester.py - 跨用戶測試器,水平越權檢測
    • vertical_escalation_tester.py - 垂直越權測試器,權限提升檢測
  
  📁 common/ - 共用檢測組件
    • unified_smart_detection_manager.py - 統一智慧檢測管理器
    • detection_config.py - 檢測配置管理

【整合模組】services/integration/aiva_integration/
────────────────────────────────────────
  🎯 用途: 結果聚合、報告生成和數據分析
  
  📁 reception/ - 資料接收層
    • data_reception_layer.py - 資料接收層,收集各模組結果
    • sql_result_database.py - SQL 結果資料庫,持久化儲存
  
  📁 analysis/ - 智慧分析引擎
    • vuln_correlation_analyzer.py - 漏洞關聯分析器,識別攻擊鏈
    • risk_assessment_engine.py - 風險評估引擎,CVSS 評分
    • compliance_policy_checker.py - 合規政策檢查器,OWASP Top 10
  
  📁 reporting/ - 報告生成器
    • report_content_generator.py - 報告內容生成器
    • formatter_exporter.py - 格式化導出器,支援 PDF/HTML/JSON
    • report_template_selector.py - 報告範本選擇器
  
  📁 perf_feedback/ - 性能反饋
    • scan_metadata_analyzer.py - 掃描元數據分析器
    • improvement_suggestion_generator.py - 改進建議生成器
  
  📁 security/ - 安全控制
    • auth.py - 認證授權模組
  
  📁 api_gateway/ - API 閘道
    • app.py - FastAPI 應用主程式

【共用模組】services/aiva_common/
────────────────────────────────────────
  🎯 用途: 跨模組共用工具和資料結構
  
  • schemas.py - Pydantic 資料模型定義
  • enums.py - 列舉類型定義(漏洞類型、掃描狀態等)
  • mq.py - RabbitMQ 訊息佇列封裝
  • config.py - 配置管理
  
  📁 utils/ - 工具函式庫
    • ids.py - ID 生成器
    • logging.py - 結構化日誌
    📁 dedup/ - 去重工具
      • dedupe.py - 去重演算法
    📁 network/ - 網路工具
      • backoff.py - 指數退避重試
      • ratelimit.py - 速率限制器

【部署配置】docker/
────────────────────────────────────────
  • docker-compose.yml - 開發環境容器編排
  • docker-compose.production.yml - 生產環境配置
  • Dockerfile.integration - 整合服務映像檔
  📁 initdb/ - 資料庫初始化
    • 001_schema.sql - PostgreSQL 資料表結構

【工具腳本】tools/
────────────────────────────────────────
  • py2mermaid.py - Python 程式碼轉 Mermaid 圖表
  • update_imports.py - 批次更新 import 路徑

【文檔】
────────────────────────────────────────
  • QUICK_START.md - 快速開始指南
  • ARCHITECTURE_REPORT.md - 架構設計報告
  • CORE_MODULE_ANALYSIS.md - 核心模組分析
  • DATA_CONTRACT.md - 資料契約規範
  • DATA_CONTRACT_ANALYSIS.md - 資料契約分析
  • FINAL_FIX_REPORT.md - 最終修復報告

💡 工作流程說明
────────────────────────────────────────
  1️⃣  掃描階段 (Scan Module)
     → 爬蟲引擎發現攻擊面
     → 收集 URL、表單、參數
  
  2️⃣  分析階段 (Core Module - Analysis)
     → 分析攻擊面特徵
     → 生成測試策略
  
  3️⃣  檢測階段 (Function Modules)
     → XSS/SQLi/SSRF/IDOR 引擎並行測試
     → 智慧 Payload 生成和繞過
  
  4️⃣  聚合階段 (Integration - Reception)
     → 收集各引擎檢測結果
     → 資料去重和關聯分析
  
  5️⃣  反饋階段 (Integration - Analysis & Reporting)
     → 風險評估和合規檢查
     → 生成詳細報告

🔧 技術棧
────────────────────────────────────────
  • Python 3.13 - 主要開發語言
  • FastAPI - 高性能非同步 Web 框架
  • httpx - 現代 HTTP 客戶端
  • Playwright - 無頭瀏覽器自動化
  • RabbitMQ - 訊息佇列,模組間通信
  • PostgreSQL - 關聯式資料庫,結果儲存
  • Pydantic - 資料驗證和序列化
  • Docker - 容器化部署


═══════════════════════════════════════════════════════════════════════════════
📌 報告說明
═══════════════════════════════════════════════════════════════════════════════

• 本報告整合了專案的檔案統計、程式碼行數分析和目錄結構
• 已自動排除虛擬環境、快取檔案、IDE 配置等非程式碼目錄
• 圖示說明:
  🐍 Python   📜 JavaScript   📘 TypeScript   📝 Markdown
  ⚙️ JSON      🔧 YAML         🗄️ SQL          ⚡ Shell/Batch
  🌐 HTML      🎨 CSS          📁 目錄         📄 其他檔案


═══════════════════════════════════════════════════════════════════════════════
✨ 報告結束
═══════════════════════════════════════════════════════════════════════════════
