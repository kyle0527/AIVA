```mermaid
flowchart TB
    %% AIVA Scan Module Complete Workflow
    %% Fixed version based on mermaid.js compatibility
    
    subgraph Entry["Entry Layer"]
        A[UnifiedScanEngine] 
        A1[create_fast_scan]
        A2[create_comprehensive_scan]
        B[ScanOrchestrator]
    end
    
    subgraph Strategy["Strategy Control"]
        C[StrategyController]
        C1[ConfigControlCenter]
        D1[CONSERVATIVE]
        D2[BALANCED]
        D3[DEEP]
        D4[FAST]
        D5[AGGRESSIVE]
        D6[STEALTH]
    end
    
    subgraph Config["Configuration"]
        E1[CrawlingConfig]
        E2[DynamicScanConfig]
        E3[FingerprintConfig]
        E4[SecurityConfig]
        E5[PerformanceConfig]
    end
    
    subgraph Context["Scan Context"]
        F[ScanContext]
        F1[add_asset]
        F2[increment_urls_found]
        F3[increment_pages_crawled]
        F5[get_statistics]
    end
    
    subgraph Auth["Authentication"]
        G[AuthenticationManager]
        G1[HeaderConfiguration]
        G11[set_user_agent]
        G12[set_authorization]
    end
    
    subgraph Static["Static Scan Engine"]
        H[HiHttpClient]
        H1[UrlQueueManager]
        H2[StaticContentParser]
        H11[add]
        H12[next]
        H21[extract]
    end
    
    subgraph Dynamic["Dynamic Scan Engine"]
        I[HeadlessBrowserPool]
        J[DynamicContentExtractor]
        K[JSInteractionSimulator]
        L[AjaxApiHandler]
        I1[initialize]
        J1[get_extracted_contents]
        K1[add_click]
        L1[get_discovered_endpoints]
    end
    
    subgraph Info["Information Gathering"]
        M[SensitiveInfoDetector]
        N[JavaScriptSourceAnalyzer]
        O[PassiveFingerprinter]
        P[FingerprintCollector]
        M1[detect_in_response]
        N1[analyze]
        O1[from_headers]
        P1[get_final_fingerprints]
    end
    
    subgraph Network["Network Scanning"]
        Q[NetworkScanner]
        R[ServiceDetector]
        S[VulnerabilityScanner]
        T[SensitiveDataScanner]
        R1[initialize]
        R2[get_detection_results]
        S1[demo_vulnerability_scanner]
        T1[scan_content]
    end
    
    subgraph Scope["Scope Management"]
        U[ScopeManager]
        U1[add_allowed_host]
        U2[is_in_scope]
        U3[filter_urls]
        U4[validate_scope]
    end
    
    subgraph Processing["Result Processing"]
        V[ScanResultProcessor]
        W[AIOperationRecorder]
        X[EnhancedScanIntegration]
        W1[record_scan_operation]
        X1[apply_analysis_results]
        X2[count_by_severity]
    end
    
    subgraph Output["Output Layer"]
        Y[ScanMetadataAnalyzer]
        Z[ReportContentGenerator]
        Y1[analyze_metadata]
        Z1[get_scan_methodology]
    end
    
    %% Main Flow Connections
    A1 --> A
    A2 --> A
    A --> B
    B --> C
    C --> C1
    
    %% Strategy to Policies
    C --> D1
    C --> D2
    C --> D3
    C --> D4
    C --> D5
    C --> D6
    
    %% Configuration Management
    C1 --> E1
    C1 --> E2
    C1 --> E3
    C1 --> E4
    C1 --> E5
    
    %% Scan Context
    B --> F
    F --> F1
    F --> F2
    F --> F3
    F --> F5
    
    %% Authentication
    B --> G
    G --> G1
    G1 --> G11
    G1 --> G12
    
    %% Static Scan Engine
    E1 --> H
    H --> H1
    H --> H2
    H1 --> H11
    H1 --> H12
    H2 --> H21
    
    %% Dynamic Scan Engine
    E2 --> I
    I --> I1
    I --> J
    I --> K
    I --> L
    J --> J1
    K --> K1
    L --> L1
    
    %% Information Gathering
    H --> M
    H --> N
    H --> O
    H --> P
    M --> M1
    N --> N1
    O --> O1
    P --> P1
    
    %% Network Scanning
    B --> Q
    B --> R
    B --> S
    B --> T
    R --> R1
    R --> R2
    S --> S1
    T --> T1
    
    %% Scope Management
    B --> U
    U --> U1
    U --> U2
    U --> U3
    U --> U4
    
    %% Result Processing
    M --> V
    N --> V
    P --> V
    Q --> V
    R --> V
    S --> V
    T --> V
    V --> W
    V --> X
    W --> W1
    X --> X1
    X --> X2
    
    %% Output Layer
    V --> Y
    V --> Z
    Y --> Y1
    Z --> Z1
    
    %% Strategy Influences Engine Selection
    D1 -.-> H
    D2 -.-> H
    D2 -.-> I
    D3 -.-> I
    D4 -.-> H
    D5 -.-> I
    D6 -.-> H
    
    %% Data Flow
    H21 -.-> F1
    J1 -.-> F1
    L1 -.-> F1
    M1 -.-> F1
    N1 -.-> F1
    O1 -.-> P1
    F5 -.-> V
    P1 -.-> V
    U4 -.-> V
    
    %% Style Definitions
    classDef entryStyle fill:#e3f2fd,stroke:#1976d2,stroke-width:2px
    classDef strategyStyle fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px
    classDef configStyle fill:#e8f5e8,stroke:#388e3c,stroke-width:2px
    classDef engineStyle fill:#fff3e0,stroke:#f57c00,stroke-width:2px
    classDef processingStyle fill:#fce4ec,stroke:#c2185b,stroke-width:2px
    classDef outputStyle fill:#e0f2f1,stroke:#00796b,stroke-width:2px
    
    class A,A1,A2,B entryStyle
    class C,C1,D1,D2,D3,D4,D5,D6 strategyStyle
    class E1,E2,E3,E4,E5,F,G,G1,U configStyle
    class H,H1,H2,I,J,K,L,M,N,O,P,Q,R,S,T engineStyle
    class V,W,X,Y processingStyle
    class Z outputStyle
```

---

## 🔧 **Mermaid語法修復說明**

### 🚨 **發現的錯誤原因**

1. **中文字符問題**: Emoji 和中文在某些 Mermaid 版本中可能導致解析錯誤
2. **特殊字符**: `<br/>` 標籤在某些環境下不被支持
3. **子圖命名**: 使用中文可能造成渲染問題
4. **節點名稱**: 過長的中文描述可能超出限制

### ✅ **修復措施**

1. **移除所有中文字符**: 使用純英文標籤
2. **簡化節點名稱**: 移除 `<br/>` 標籤和過長描述  
3. **標準化子圖名稱**: 使用簡潔的英文名稱
4. **保持語法兼容性**: 確保與各版本 Mermaid.js 兼容

### 📊 **關鍵發現保留**

修復後的圖表仍然完整展示：
- ✅ 策略驅動的引擎選擇機制
- ✅ 6種掃描策略的不同行為模式  
- ✅ 雙引擎協作（靜態+動態）
- ✅ 完整的資料流向和處理鏈路
- ✅ 實際的程式連接關係