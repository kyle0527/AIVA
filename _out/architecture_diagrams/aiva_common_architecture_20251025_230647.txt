================================================================================
AIVA Common 模組樹狀架構圖
================================================================================
生成日期: 2025年10月25日 23:06:47
模組路徑: C:\D\fold7\AIVA-git\services\aiva_common

📊 模組統計
────────────────────────────────────────────────────────────────────────────────
總檔案數: 41
總程式碼行數: 9141

💻 語言分布:
   • .py: 38 檔案, 6974 行 (76.3%)
   • .md: 2 檔案, 1608 行 (17.6%)
   • .yaml: 1 檔案, 559 行 (6.1%)

🔧 模組用途
────────────────────────────────────────────────────────────────────────────────
aiva_common 是 AIVA 系統的基礎設施模組，提供：
• schemas/ - 跨服務共享的資料結構定義
• enums/ - 系統常數和枚舉類型
• utils/ - 通用工具函數（去重、網路、日誌等）
• config/ - 統一配置管理
• tools/ - 開發和維護工具

💡 設計理念
────────────────────────────────────────────────────────────────────────────────
• 作為所有 AIVA 服務的共享基礎層
• 實現跨語言相容（Python/Go/Rust/TypeScript）
• 遵循官方標準（CVSS、SARIF、CVE/CWE等）
• 提供統一的資料合約和通訊協議

================================================================================
模組結構樹狀圖（含中文說明）
================================================================================

aiva_common # AIVA 共用基礎模組
├─config
│   ├─__init__.py # 模組初始化
│   └─unified_config.py # 統一配置
├─enums
│   ├─__init__.py # 模組初始化
│   ├─assets.py # 資產管理
│   ├─common.py # 通用定義
│   ├─modules.py # 模組定義
│   └─security.py # 安全相關
├─schemas
│   ├─generated
│   │   ├─__init__.py # 模組初始化
│   │   ├─base_types.py # Python 模組
│   │   ├─findings.py # 發現結果
│   │   ├─messaging.py # 訊息協議
│   │   └─tasks.py # 任務定義
│   ├─__init__.py # 模組初始化
│   ├─ai.py # AI 相關定義
│   ├─assets.py # 資產管理
│   ├─base.py # 基礎類別
│   ├─enhanced.py # 增強功能
│   ├─findings.py # 發現結果
│   ├─languages.py # 程式語言
│   ├─messaging.py # 訊息協議
│   ├─references.py # 參考標準
│   ├─risk.py # 風險評估
│   ├─system.py # 系統相關
│   ├─tasks.py # 任務定義
│   └─telemetry.py # 遙測資料
├─tools
│   ├─module_connectivity_tester.py # 測試程式
│   ├─schema_codegen_tool.py # 工具程式
│   └─schema_validator.py # 驗證器
├─utils
│   ├─dedup
│   │   ├─__init__.py # 模組初始化
│   │   └─dedupe.py # 去重複
│   ├─network
│   │   ├─__init__.py # 模組初始化
│   │   ├─backoff.py # 退避策略
│   │   └─ratelimit.py # 限流控制
│   ├─__init__.py # 模組初始化
│   ├─ids.py # ID 生成器
│   └─logging.py # 日誌工具
├─__init__.py # 模組初始化
├─CODE_QUALITY_REPORT.md # 程式碼品質報告
├─core_schema_sot.yaml # Schema 定義源
├─mq.py # 訊息佇列
└─README.md # 文件

================================================================================
模組架構分析
================================================================================

🏗️ 架構層次：
1. 基礎層 (base.py) - 所有資料結構的基礎類別
2. 協議層 (messaging.py) - 服務間通訊協議
3. 領域層 (ai.py, findings.py, tasks.py等) - 業務領域定義
4. 工具層 (utils/) - 輔助功能和工具
5. 配置層 (config/) - 系統配置管理

🔄 跨語言支援：
• core_schema_sot.yaml - 單一事實來源，支援多語言生成
• py.typed - Python 型別提示支援
• generated/ - 自動生成的跨語言綁定

📋 品質保證：
• 總計 41 個檔案，9141 行程式碼
• 完整的型別定義和文件
• 符合 PEP 8 和官方標準

