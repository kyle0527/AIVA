{# Pydantic Model Template for Python #}
{# Generated by AIVA Converters Plugin #}
from pydantic import BaseModel, Field{% if has_datetime %}, validator{% endif %}
{% if has_enum %}from enum import Enum{% endif %}
from typing import Optional, List, Dict, Any{% if has_union %}, Union{% endif %}
{% if has_datetime %}from datetime import datetime{% endif %}
{% for import in custom_imports %}
{{ import }}
{% endfor %}

{% if enums %}
{% for enum in enums %}
class {{ enum.name }}(str, Enum):
    """{{ enum.description }}"""
{% for value in enum.values %}
    {{ value.name }} = "{{ value.value }}"{% if value.description %}  # {{ value.description }}{% endif %}
{% endfor %}

{% endfor %}
{% endif %}

class {{ class_name }}(BaseModel):
    """
    {{ description }}
    
    Generated from: {{ source_schema }}
    Generated at: {{ generation_timestamp }}
    """
    
{% if config %}
    class Config:
{% for key, value in config.items %}
        {{ key }} = {{ value }}
{% endfor %}
{% endif %}

{% for field in fields %}
    {{ field.name }}: {{ field.type }}{% if field.has_field_info %} = Field({% if field.default_value %}{{ field.default_value }}{% if field.field_args %}, {% endif %}{% endif %}{% if field.field_args %}{{ field.field_args|join(', ') }}{% endif %}){% elif field.default_value %} = {{ field.default_value }}{% endif %}{% if field.description %}  # {{ field.description }}{% endif %}
{% endfor %}

{% if validators %}
{% for validator in validators %}
    @validator('{{ validator.field }}')
    def {{ validator.name }}(cls, v):
        """{{ validator.description }}"""
        {{ validator.code | indent(8) }}
        return v
{% endfor %}
{% endif %}

{% if methods %}
{% for method in methods %}
    def {{ method.name }}(self{% if method.params %}, {{ method.params|join(', ') }}{% endif %}){% if method.return_type %} -> {{ method.return_type }}{% endif %}:
        """{{ method.description }}"""
        {{ method.body | indent(8) }}
{% endfor %}
{% endif %}

    def to_dict(self, **kwargs) -> Dict[str, Any]:
        """Convert model to dictionary"""
        return self.model_dump(**kwargs)
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> "{{ class_name }}":
        """Create model from dictionary"""
        return cls(**data)
    
    def to_json(self, **kwargs) -> str:
        """Convert model to JSON string"""
        return self.model_dump_json(**kwargs)
    
    @classmethod  
    def from_json(cls, json_str: str) -> "{{ class_name }}":
        """Create model from JSON string"""
        return cls.model_validate_json(json_str)