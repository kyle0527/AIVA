{# Rust Struct Template with Serde Support #}
{# Generated by AIVA Converters Plugin #}
//! {{ description }}
//!
//! Generated from: {{ source_schema }}
//! Generated at: {{ generation_timestamp }}

use serde::{Deserialize, Serialize};
{% if has_datetime %}use chrono::{DateTime, Utc};{% endif %}
{% if has_collections %}use std::collections::HashMap;{% endif %}
{% if has_optional %}use std::option::Option;{% endif %}
{% for import in custom_imports %}
use {{ import }};
{% endfor %}

{% if enums %}
{% for enum in enums %}
/// {{ enum.description }}
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
pub enum {{ enum.name }} {
{% for value in enum.values %}
    /// {{ value.description }}
    {{ value.name }},
{% endfor %}
}

{% endfor %}
{% endif %}

{% if type_aliases %}
{% for alias in type_aliases %}
/// {{ alias.description }}
pub type {{ alias.name }} = {{ alias.type }};

{% endfor %}
{% endif %}

/// {{ description }}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
{% if serde_config %}
{% for config in serde_config %}
#[serde({{ config }})]
{% endfor %}
{% endif %}
pub struct {{ class_name }} {
{% for field in fields %}
    /// {{ field.description }}{% if field.constraints %}
    /// Constraints: {{ field.constraints }}{% endif %}{% if field.example %}
    /// Example: `{{ field.example }}`{% endif %}
{% if field.serde_attributes %}
{% for attr in field.serde_attributes %}
    #[serde({{ attr }})]
{% endfor %}
{% endif %}
{% if field.validation_attributes %}
{% for attr in field.validation_attributes %}
    {{ attr }}
{% endfor %}
{% endif %}
    pub {{ field.name }}: {{ field.type }},
{% endfor %}
}

impl {{ class_name }} {
    /// Create a new instance of {{ class_name }}
    pub fn new({% for field in fields %}{% if field.required %}{{ field.name }}: {{ field.base_type }}{% if not loop.last %}, {% endif %}{% endif %}{% endfor %}) -> Self {
        Self {
{% for field in fields %}
{% if field.required %}
            {{ field.name }},
{% else %}
            {{ field.name }}: {{ field.default_value }},
{% endif %}
{% endfor %}
        }
    }

{% if builder_pattern %}
    /// Create a builder for {{ class_name }}
    pub fn builder() -> {{ class_name }}Builder {
        {{ class_name }}Builder::default()
    }
{% endif %}

{% if validation_methods %}
{% for method in validation_methods %}
    /// {{ method.description }}
    pub fn {{ method.name }}(&self) -> Result<(), ValidationError> {
        {{ method.body | indent(8) }}
    }
{% endfor %}
{% endif %}

    /// Convert to JSON string
    pub fn to_json(&self) -> Result<String, serde_json::Error> {
        serde_json::to_string(self)
    }

    /// Create from JSON string
    pub fn from_json(json: &str) -> Result<Self, serde_json::Error> {
        serde_json::from_str(json)
    }

    /// Convert to pretty JSON string
    pub fn to_json_pretty(&self) -> Result<String, serde_json::Error> {
        serde_json::to_string_pretty(self)
    }

{% if custom_methods %}
{% for method in custom_methods %}
    /// {{ method.description }}
    pub fn {{ method.name }}(&{% if method.mutating %}mut {% endif %}self{% if method.params %}, {{ method.params|join(', ') }}{% endif %}){% if method.return_type %} -> {{ method.return_type }}{% endif %} {
        {{ method.body | indent(8) }}
    }
{% endfor %}
{% endif %}
}

{% if builder_pattern %}
/// Builder for {{ class_name }}
#[derive(Debug, Default)]
pub struct {{ class_name }}Builder {
{% for field in fields %}
    {{ field.name }}: Option<{{ field.base_type }}>,
{% endfor %}
}

impl {{ class_name }}Builder {
{% for field in fields %}
    /// Set {{ field.name }}
    pub fn {{ field.name }}(mut self, {{ field.name }}: {{ field.base_type }}) -> Self {
        self.{{ field.name }} = Some({{ field.name }});
        self
    }
{% endfor %}

    /// Build the {{ class_name }}
    pub fn build(self) -> Result<{{ class_name }}, String> {
{% for field in fields %}
{% if field.required %}
        let {{ field.name }} = self.{{ field.name }}.ok_or("{{ field.name }} is required")?;
{% endif %}
{% endfor %}

        Ok({{ class_name }} {
{% for field in fields %}
{% if field.required %}
            {{ field.name }},
{% else %}
            {{ field.name }}: self.{{ field.name }}.unwrap_or({{ field.default_value }}),
{% endif %}
{% endfor %}
        })
    }
}
{% endif %}

impl Default for {{ class_name }} {
    fn default() -> Self {
        Self {
{% for field in fields %}
            {{ field.name }}: {{ field.default_value }},
{% endfor %}
        }
    }
}

{% if display_impl %}
impl std::fmt::Display for {{ class_name }} {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{ display_format }}", {% for field in display_fields %}self.{{ field }}{% if not loop.last %}, {% endif %}{% endfor %})
    }
}
{% endif %}

{% if from_impls %}
{% for impl in from_impls %}
impl From<{{ impl.from_type }}> for {{ class_name }} {
    fn from(value: {{ impl.from_type }}) -> Self {
        {{ impl.body | indent(8) }}
    }
}
{% endfor %}
{% endif %}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_{{ class_name | lower }}_serialization() {
        let instance = {{ class_name }}::default();
        let json = instance.to_json().expect("Failed to serialize");
        let deserialized = {{ class_name }}::from_json(&json).expect("Failed to deserialize");
        assert_eq!(instance, deserialized);
    }

{% if builder_pattern %}
    #[test]
    fn test_{{ class_name | lower }}_builder() {
        let instance = {{ class_name }}::builder()
{% for field in fields %}
{% if field.required %}
            .{{ field.name }}({{ field.test_value }})
{% endif %}
{% endfor %}
            .build()
            .expect("Failed to build instance");
        
        assert!(!instance.{{ fields[0].name }}.is_empty());
    }
{% endif %}
}