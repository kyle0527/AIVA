{# Go Struct Template with JSON Tags #}
{# Generated by AIVA Converters Plugin #}
// Package {{ package_name }} contains generated data structures
// 
// {{ description }}
//
// Generated from: {{ source_schema }}
// Generated at: {{ generation_timestamp }}
package {{ package_name }}

import (
{% for import in imports %}
	"{{ import }}"
{% endfor %}
)

{% if constants %}
// Constants for {{ class_name }}
const (
{% for const in constants %}
	{{ const.name }} {{ const.type }} = {{ const.value }}  // {{ const.description }}
{% endfor %}
)
{% endif %}

{% if enums %}
{% for enum in enums %}
// {{ enum.name }} represents {{ enum.description }}
type {{ enum.name }} string

const (
{% for value in enum.values %}
	{{ enum.name }}{{ value.name }} {{ enum.name }} = "{{ value.value }}"  // {{ value.description }}
{% endfor %}
)

// Valid{{ enum.name }}s returns all valid {{ enum.name }} values
func Valid{{ enum.name }}s() []{{ enum.name }} {
	return []{{ enum.name }}{
{% for value in enum.values %}
		{{ enum.name }}{{ value.name }},
{% endfor %}
	}
}

// IsValid checks if the {{ enum.name }} value is valid
func (e {{ enum.name }}) IsValid() bool {
	switch e {
{% for value in enum.values %}
	case {{ enum.name }}{{ value.name }}:
{% endfor %}
		return true
	default:
		return false
	}
}

// String returns the string representation of {{ enum.name }}
func (e {{ enum.name }}) String() string {
	return string(e)
}

{% endfor %}
{% endif %}

{% if type_aliases %}
{% for alias in type_aliases %}
// {{ alias.name }} {{ alias.description }}
type {{ alias.name }} {{ alias.type }}

{% endfor %}
{% endif %}

// {{ class_name }} represents {{ description }}
type {{ class_name }} struct {
{% for field in fields %}
	// {{ field.description }}{% if field.constraints %}
	// Constraints: {{ field.constraints }}{% endif %}{% if field.example %}
	// Example: {{ field.example }}{% endif %}
{% if field.validation_tags %}
{% for tag in field.validation_tags %}
	{{ tag }}
{% endfor %}
{% endif %}
	{{ field.name }} {{ field.type }} `json:"{{ field.json_name }}"{% if field.validate_tag %} validate:"{{ field.validate_tag }}"{% endif %}{% if field.db_tag %} db:"{{ field.db_tag }}"{% endif %}{% if field.yaml_tag %} yaml:"{{ field.yaml_name }}"{% endif %}`
{% endfor %}
}

// New{{ class_name }} creates a new instance of {{ class_name }}
func New{{ class_name }}({% for field in fields %}{% if field.required %}{{ field.param_name }} {{ field.base_type }}{% if not loop.last %}, {% endif %}{% endif %}{% endfor %}) *{{ class_name }} {
	return &{{ class_name }}{
{% for field in fields %}
{% if field.required %}
		{{ field.name }}: {{ field.param_name }},
{% else %}
		{{ field.name }}: {{ field.default_value }},
{% endif %}
{% endfor %}
	}
}

{% if validation_methods %}
{% for method in validation_methods %}
// {{ method.name }} {{ method.description }}
func ({{ receiver_name }} *{{ class_name }}) {{ method.name }}() error {
	{{ method.body | indent }}
}
{% endfor %}
{% endif %}

// Validate performs validation on the {{ class_name }} struct
func ({{ receiver_name }} *{{ class_name }}) Validate() error {
{% if has_validation %}
	// Use go-playground/validator for validation
	validate := validator.New()
	return validate.Struct({{ receiver_name }})
{% else %}
	// Custom validation logic
{% for field in fields %}
{% if field.validation_rules %}
	// Validate {{ field.name }}
	{{ field.validation_rules | indent }}
{% endif %}
{% endfor %}
	return nil
{% endif %}
}

// ToJSON converts the struct to JSON
func ({{ receiver_name }} *{{ class_name }}) ToJSON() ([]byte, error) {
	return json.Marshal({{ receiver_name }})
}

// FromJSON creates a struct from JSON data
func {{ class_name }}FromJSON(data []byte) (*{{ class_name }}, error) {
	var {{ receiver_name }} {{ class_name }}
	if err := json.Unmarshal(data, &{{ receiver_name }}); err != nil {
		return nil, err
	}
	return &{{ receiver_name }}, nil
}

// ToMap converts the struct to a map[string]interface{}
func ({{ receiver_name }} *{{ class_name }}) ToMap() map[string]interface{} {
	result := make(map[string]interface{})
{% for field in fields %}
	result["{{ field.json_name }}"] = {{ receiver_name }}.{{ field.name }}
{% endfor %}
	return result
}

// FromMap creates a struct from a map[string]interface{}
func {{ class_name }}FromMap(data map[string]interface{}) (*{{ class_name }}, error) {
	jsonData, err := json.Marshal(data)
	if err != nil {
		return nil, err
	}
	return {{ class_name }}FromJSON(jsonData)
}

// Clone creates a deep copy of the {{ class_name }}
func ({{ receiver_name }} *{{ class_name }}) Clone() *{{ class_name }} {
	if {{ receiver_name }} == nil {
		return nil
	}
	
	clone := &{{ class_name }}{
{% for field in fields %}
{% if field.is_slice %}
		{{ field.name }}: make({{ field.type }}, len({{ receiver_name }}.{{ field.name }})),
{% elif field.is_map %}
		{{ field.name }}: make({{ field.type }}),
{% else %}
		{{ field.name }}: {{ receiver_name }}.{{ field.name }},
{% endif %}
{% endfor %}
	}
	
{% for field in fields %}
{% if field.is_slice %}
	copy(clone.{{ field.name }}, {{ receiver_name }}.{{ field.name }})
{% elif field.is_map %}
	for k, v := range {{ receiver_name }}.{{ field.name }} {
		clone.{{ field.name }}[k] = v
	}
{% endif %}
{% endfor %}
	
	return clone
}

{% if custom_methods %}
{% for method in custom_methods %}
// {{ method.name }} {{ method.description }}
func ({{ receiver_name }} *{{ class_name }}) {{ method.name }}({% if method.params %}{{ method.params|join(', ') }}{% endif %}){% if method.return_type %} {{ method.return_type }}{% endif %} {
	{{ method.body | indent }}
}
{% endfor %}
{% endif %}

// String returns a string representation of {{ class_name }}
func ({{ receiver_name }} *{{ class_name }}) String() string {
{% if custom_string_format %}
	return fmt.Sprintf("{{ custom_string_format }}", {% for field in string_fields %}{{ receiver_name }}.{{ field }}{% if not loop.last %}, {% endif %}{% endfor %})
{% else %}
	data, _ := json.MarshalIndent({{ receiver_name }}, "", "  ")
	return string(data)
{% endif %}
}

{% if comparable_fields %}
// Equal checks if two {{ class_name }} instances are equal
func ({{ receiver_name }} *{{ class_name }}) Equal(other *{{ class_name }}) bool {
	if {{ receiver_name }} == nil && other == nil {
		return true
	}
	if {{ receiver_name }} == nil || other == nil {
		return false
	}
	
	return {% for field in comparable_fields %}{{ receiver_name }}.{{ field }} == other.{{ field }}{% if not loop.last %} &&
		{% endif %}{% endfor %}
}
{% endif %}

{% if builder_pattern %}
// {{ class_name }}Builder provides a builder pattern for {{ class_name }}
type {{ class_name }}Builder struct {
	instance *{{ class_name }}
}

// New{{ class_name }}Builder creates a new builder
func New{{ class_name }}Builder() *{{ class_name }}Builder {
	return &{{ class_name }}Builder{
		instance: &{{ class_name }}{},
	}
}

{% for field in fields %}
// Set{{ field.name }} sets the {{ field.name }} field
func (b *{{ class_name }}Builder) Set{{ field.name }}({{ field.param_name }} {{ field.type }}) *{{ class_name }}Builder {
	b.instance.{{ field.name }} = {{ field.param_name }}
	return b
}
{% endfor %}

// Build returns the constructed {{ class_name }}
func (b *{{ class_name }}Builder) Build() *{{ class_name }} {
	return b.instance
}

// BuildAndValidate returns the constructed {{ class_name }} after validation
func (b *{{ class_name }}Builder) BuildAndValidate() (*{{ class_name }}, error) {
	if err := b.instance.Validate(); err != nil {
		return nil, err
	}
	return b.instance, nil
}
{% endif %}