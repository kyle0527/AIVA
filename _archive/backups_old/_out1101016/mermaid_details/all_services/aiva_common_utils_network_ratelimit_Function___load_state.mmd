flowchart TB
    n1([開始])
    n2([結束])
    n3[&amp;&#35;39;Load state from persistent storage.&amp;&#35...]
    n4{if not self.state_file or not ...}
    n5[return]
    n6[]
    n7[with self.stat...]
    n8[try]
    n9[with self.stat...]
    n10[data = json.load&#40;fh&#41;]
    n11[]
    n12[except &#40;OSError, js...]
    n13[logger.warning&#40;&amp;&#35;39;Failed to load rate limit...]
    n14[return]
    n15[now_wall = time.time&#40;&#41;]
    n16[now_mono = time.monotonic&#40;&#41;]
    n17[saved_at = data.get&#40;&amp;&#35;39;saved_at&amp;&#35;39...]
    n18[try]
    n19[saved_at_f = float&#40;saved_at&#41; if s...]
    n20[]
    n21[except &#40;TypeError, ...]
    n22[saved_at_f = 0.0]
    n23[base_elapsed = max&#40;0.0, now_wall - ...]
    n24[global_state = data.get&#40;&amp;&#35;39;global&amp;&#35;...]
    n25{if isinstance&#40;global_state, dict&#41;}
    n26[rate_val = global_state.get&#40;&amp;&#35;39;ra...]
    n27[try]
    n28[rate = float&#40;rate_val&#41;]
    n29[]
    n30[except &#40;TypeError, ...]
    n31[rate = self.global_rps]
    n32[self._set_global_rate&#40;rate&#41;]
    n33[tokens_val = global_state.get&#40;&amp;&#35;39;to...]
    n34[try]
    n35[tokens = float&#40;tokens_val&#41;]
    n36[]
    n37[except &#40;TypeError, ...]
    n38[tokens = self.global_bucket.t...]
    n39[updated_val = global_state.get&#40;&amp;&#35;39;up...]
    n40[try]
    n41[updated_at = float&#40;updated_val&#41; i...]
    n42[]
    n43[except &#40;TypeError, ...]
    n44[updated_at = None]
    n45[elapsed = base_elapsed if upda...]
    n46[with self.glob...]
    n47[refill = tokens + elapsed * s...]
    n48[self.global_bucket.tokens = min&#40;self.global_buck...]
    n49[self.global_bucket.updated = max&#40;now_mono - elaps...]
    n50[]
    n51[self.host_buckets.clear&#40;&#41;]
    n52[with self._hos...]
    n53[self.host_last_used.clear&#40;&#41;]
    n54[overrides = data.get&#40;&amp;&#35;39;host_overr...]
    n55{if isinstance&#40;overrides, dict&#41;}
    n56[new_overrides: dict&#91;str, float&#93; = &#123;&#125;]
    n57{for &#40;host, value&#41; in overrides.items&#40;&#41;}
    n58[try]
    n59[new_overrides&#91;str&#40;host&#41;&#93; = float&#40;valu...]
    n60[]
    n61[except &#40;TypeError, ...]
    n62[continue]
    n63[]
    n64[self.host_overrides = new_overrides]
    n65[self.host_overrides = &#123;&#125;]
    n66[]
    n67[per_host_base = data.get&#40;&amp;&#35;39;per_host_r...]
    n68{if per_host_base is not None}
    n69[with contextli...]
    n70[self._set_per_host_base&#40;float&#40;per_host_base&#41;&...]
    n71[]
    n72[hosts = data.get&#40;&amp;&#35;39;hosts&amp;&#35;39;&#41;]
    n73{if isinstance&#40;hosts, dict&#41;}
    n74{for &#40;host, bucket_data&#41; in hosts.items&#40;&#41;}
    n75{if not isinstance&#40;bucket_data,...}
    n76[continue]
    n77[]
    n78[rate_val = bucket_data.get&#40;&amp;&#35;39;rat...]
    n79[try]
    n80[rate = float&#40;rate_val&#41;]
    n81[]
    n82[except &#40;TypeError, ...]
    n83[rate = self._host_rate&#40;host...]
    n84[burst = max&#40;1, int&#40;rate&#41;&#41;]
    n85[bucket = TokenBucket&#40;rate, bu...]
    n86[tokens_val = bucket_data.get&#40;&amp;&#35;39;tok...]
    n87[try]
    n88[tokens = float&#40;tokens_val&#41;]
    n89[]
    n90[except &#40;TypeError, ...]
    n91[tokens = float&#40;burst&#41;]
    n92[updated_val = bucket_data.get&#40;&amp;&#35;39;upd...]
    n93[try]
    n94[updated_at = float&#40;updated_val&#41; i...]
    n95[]
    n96[except &#40;TypeError, ...]
    n97[updated_at = None]
    n98[elapsed = base_elapsed if upda...]
    n99[refill = tokens + elapsed * r...]
    n100[bucket.tokens = min&#40;bucket.capacity,...]
    n101[bucket.updated = max&#40;now_mono - elaps...]
    n102[self.host_buckets&#91;str&#40;host&#41;&#93; = bucket]
    n103[self._touch_host&#40;str&#40;host&#41;, now_mono&#41;]
    n104[]
    n105[]
    n1 --> n3
    n3 --> n4
    n4 -->|Yes| n5
    n4 -->|No| n6
    n5 --> n6
    n6 --> n7
    n7 --> n8
    n8 --> n9
    n8 --> n12
    n9 --> n10
    n10 --> n11
    n11 --> n15
    n12 --> n13
    n13 --> n14
    n14 --> n11
    n15 --> n16
    n16 --> n17
    n17 --> n18
    n18 --> n19
    n18 --> n21
    n19 --> n20
    n20 --> n23
    n21 --> n22
    n22 --> n20
    n23 --> n24
    n24 --> n25
    n25 -->|Yes| n26
    n25 -->|No| n50
    n26 --> n27
    n27 --> n28
    n27 --> n30
    n28 --> n29
    n29 --> n32
    n30 --> n31
    n31 --> n29
    n32 --> n33
    n33 --> n34
    n34 --> n35
    n34 --> n37
    n35 --> n36
    n36 --> n39
    n37 --> n38
    n38 --> n36
    n39 --> n40
    n40 --> n41
    n40 --> n43
    n41 --> n42
    n42 --> n45
    n43 --> n44
    n44 --> n42
    n45 --> n46
    n46 --> n47
    n47 --> n48
    n48 --> n49
    n49 --> n50
    n50 --> n51
    n51 --> n52
    n52 --> n53
    n53 --> n54
    n54 --> n55
    n55 -->|Yes| n56
    n55 -->|No| n65
    n56 --> n57
    n57 -->|Yes| n58
    n57 -->|No| n63
    n58 --> n59
    n58 --> n61
    n59 --> n60
    n60 --> n57
    n61 --> n62
    n62 --> n60
    n63 --> n64
    n64 --> n66
    n65 --> n66
    n66 --> n67
    n67 --> n68
    n68 -->|Yes| n69
    n68 -->|No| n71
    n69 --> n70
    n70 --> n71
    n71 --> n72
    n72 --> n73
    n73 -->|Yes| n74
    n73 -->|No| n105
    n74 -->|Yes| n75
    n74 -->|No| n104
    n75 -->|Yes| n76
    n75 -->|No| n77
    n76 --> n77
    n77 --> n78
    n78 --> n79
    n79 --> n80
    n79 --> n82
    n80 --> n81
    n81 --> n84
    n82 --> n83
    n83 --> n81
    n84 --> n85
    n85 --> n86
    n86 --> n87
    n87 --> n88
    n87 --> n90
    n88 --> n89
    n89 --> n92
    n90 --> n91
    n91 --> n89
    n92 --> n93
    n93 --> n94
    n93 --> n96
    n94 --> n95
    n95 --> n98
    n96 --> n97
    n97 --> n95
    n98 --> n99
    n99 --> n100
    n100 --> n101
    n101 --> n102
    n102 --> n103
    n103 --> n74
    n104 --> n105
    n105 --> n2