// AUTO-GENERATED from aiva_common.enums; do not edit.
// Generated at: 2025-10-18T16:13:22.754541

export enum AccessDecision {  ALLOW = 'allow',
  DENY = 'deny',
  CONDITIONAL = 'conditional',
  NOT_APPLICABLE = 'not_applicable'
}
export enum AssetExposure {  INTERNET_FACING = 'internet_facing',
  DMZ = 'dmz',
  INTERNAL_NETWORK = 'internal_network',
  ISOLATED = 'isolated'
}
export enum AssetStatus {  ACTIVE = 'active',
  INACTIVE = 'inactive',
  ARCHIVED = 'archived',
  DELETED = 'deleted'
}
export enum AssetType {  URL = 'url',
  REPOSITORY = 'repository',
  HOST = 'host',
  CONTAINER = 'container',
  API_ENDPOINT = 'api_endpoint',
  MOBILE_APP = 'mobile_app',
  WEB_APPLICATION = 'web_application',
  DATABASE = 'database',
  API_SERVICE = 'api_service'
}
export enum AttackPathEdgeType {  EXPLOITS = 'exploits',
  LEADS_TO = 'leads_to',
  GRANTS_ACCESS = 'grants_access',
  EXPOSES = 'exposes',
  CONTAINS = 'contains',
  CAN_ACCESS = 'can_access'
}
export enum AttackPathNodeType {  ATTACKER = 'attacker',
  ASSET = 'asset',
  VULNERABILITY = 'vulnerability',
  CREDENTIAL = 'credential',
  DATABASE = 'database',
  API_ENDPOINT = 'api_endpoint',
  INTERNAL_NETWORK = 'internal_network'
}
export enum BusinessCriticality {  CRITICAL = 'critical',
  HIGH = 'high',
  MEDIUM = 'medium',
  LOW = 'low'
}
export enum CodeQualityMetric {  CYCLOMATIC_COMPLEXITY = 'cyclomatic_complexity',
  COGNITIVE_COMPLEXITY = 'cognitive_complexity',
  HALSTEAD_COMPLEXITY = 'halstead_complexity',
  LINE_COVERAGE = 'line_coverage',
  BRANCH_COVERAGE = 'branch_coverage',
  FUNCTION_COVERAGE = 'function_coverage',
  CODE_DUPLICATION = 'code_duplication',
  CLONE_DETECTION = 'clone_detection',
  MAINTAINABILITY_INDEX = 'maintainability_index',
  TECHNICAL_DEBT = 'technical_debt',
  EXECUTION_TIME = 'execution_time',
  MEMORY_USAGE = 'memory_usage',
  CPU_USAGE = 'cpu_usage'
}
export enum ComplianceFramework {  PCI_DSS = 'pci-dss',
  HIPAA = 'hipaa',
  GDPR = 'gdpr',
  SOX = 'sox',
  ISO27001 = 'iso27001',
  NIST = 'nist',
  CIS = 'cis'
}
export enum Confidence {  CERTAIN = 'Certain',
  FIRM = 'Firm',
  POSSIBLE = 'Possible'
}
export enum DataSensitivity {  HIGHLY_SENSITIVE = 'highly_sensitive',
  SENSITIVE = 'sensitive',
  INTERNAL = 'internal',
  PUBLIC = 'public'
}
export enum Environment {  PRODUCTION = 'production',
  STAGING = 'staging',
  DEVELOPMENT = 'development',
  TESTING = 'testing'
}
export enum ErrorCategory {  NETWORK = 'network',
  TIMEOUT = 'timeout',
  RATE_LIMIT = 'rate_limit',
  VALIDATION = 'validation',
  PROTECTION = 'protection',
  PARSING = 'parsing',
  AUTHENTICATION = 'authentication',
  AUTHORIZATION = 'authorization',
  UNKNOWN = 'unknown'
}
export enum Exploitability {  PROVEN = 'proven',
  HIGH = 'high',
  MEDIUM = 'medium',
  LOW = 'low',
  THEORETICAL = 'theoretical'
}
export enum IOCType {  IP_ADDRESS = 'ip_address',
  DOMAIN = 'domain',
  URL = 'url',
  FILE_HASH = 'file_hash',
  EMAIL = 'email',
  CVE = 'cve'
}
export enum IntelSource {  VIRUSTOTAL = 'virustotal',
  ABUSEIPDB = 'abuseipdb',
  SHODAN = 'shodan',
  ALIENVAULT_OTX = 'alienvault_otx',
  MITRE_ATTACK = 'mitre_attack',
  INTERNAL = 'internal'
}
export enum LanguageFramework {  REACT = 'react',
  VUE = 'vue',
  ANGULAR = 'angular',
  NODEJS = 'nodejs',
  EXPRESS = 'express',
  NEXTJS = 'nextjs',
  NUXTJS = 'nuxtjs',
  DJANGO = 'django',
  FLASK = 'flask',
  FASTAPI = 'fastapi',
  TORNADO = 'tornado',
  GIN = 'gin',
  ECHO = 'echo',
  FIBER = 'fiber',
  BEEGO = 'beego',
  ACTIX_WEB = 'actix_web',
  WARP = 'warp',
  ROCKET = 'rocket',
  AXUM = 'axum',
  SPRING = 'spring',
  SPRING_BOOT = 'spring_boot',
  STRUTS = 'struts',
  DOTNET = 'dotnet',
  ASPNET = 'aspnet',
  UNKNOWN = 'unknown'
}
export enum Location {  HTML_BODY = 'html_body',
  HTML_COMMENT = 'html_comment',
  JAVASCRIPT = 'javascript',
  RESPONSE_HEADER = 'response_header',
  RESPONSE_BODY = 'response_body',
  URL = 'url',
  COOKIE = 'cookie',
  META_TAG = 'meta_tag',
  INLINE_SCRIPT = 'inline_script',
  EXTERNAL_SCRIPT = 'external_script'
}
export enum ModuleName {  API_GATEWAY = 'ApiGateway',
  CORE = 'CoreModule',
  SCAN = 'ScanModule',
  INTEGRATION = 'IntegrationModule',
  FUNCTION = 'FunctionModule',
  FUNC_XSS = 'FunctionXSS',
  FUNC_SQLI = 'FunctionSQLI',
  FUNC_SSRF = 'FunctionSSRF',
  FUNC_IDOR = 'FunctionIDOR',
  OAST = 'OASTService',
  THREAT_INTEL = 'ThreatIntelModule',
  AUTHZ = 'AuthZModule',
  POSTEX = 'PostExModule',
  REMEDIATION = 'RemediationModule',
  BIZLOGIC = 'BizLogicModule'
}
export enum Permission {  READ = 'read',
  WRITE = 'write',
  DELETE = 'delete',
  EXECUTE = 'execute',
  ADMIN = 'admin',
  CREATE = 'create',
  UPDATE = 'update',
  LIST = 'list',
  MANAGE = 'manage'
}
export enum PersistenceType {  REGISTRY = 'registry',
  SCHEDULED_TASK = 'scheduled_task',
  SERVICE = 'service',
  STARTUP = 'startup',
  CRON = 'cron',
  SYSTEMD = 'systemd',
  AUTOSTART = 'autostart'
}
export enum PostExTestType {  PRIVILEGE_ESCALATION = 'privilege_escalation',
  LATERAL_MOVEMENT = 'lateral_movement',
  DATA_EXFILTRATION = 'data_exfiltration',
  PERSISTENCE = 'persistence',
  CREDENTIAL_HARVESTING = 'credential_harvesting',
  COMMAND_EXECUTION = 'command_execution'
}
export enum ProgrammingLanguage {  RUST = 'rust',
  GO = 'go',
  C = 'c',
  CPP = 'cpp',
  CSHARP = 'csharp',
  PYTHON = 'python',
  JAVASCRIPT = 'javascript',
  TYPESCRIPT = 'typescript',
  RUBY = 'ruby',
  PHP = 'php',
  JAVA = 'java',
  KOTLIN = 'kotlin',
  SCALA = 'scala',
  HASKELL = 'haskell',
  ERLANG = 'erlang',
  ELIXIR = 'elixir',
  HTML = 'html',
  CSS = 'css',
  SASS = 'sass',
  LESS = 'less',
  SQL = 'sql',
  GRAPHQL = 'graphql',
  YAML = 'yaml',
  JSON = 'json',
  TOML = 'toml',
  XML = 'xml',
  BASH = 'bash',
  POWERSHELL = 'powershell',
  ZSH = 'zsh',
  UNKNOWN = 'unknown'
}
export enum RemediationStatus {  PENDING = 'pending',
  GENERATED = 'generated',
  APPLIED = 'applied',
  VERIFIED = 'verified',
  FAILED = 'failed',
  REJECTED = 'rejected'
}
export enum RemediationType {  CODE_FIX = 'code_fix',
  CONFIG_CHANGE = 'config_change',
  PATCH = 'patch',
  UPGRADE = 'upgrade',
  WORKAROUND = 'workaround',
  MITIGATION = 'mitigation'
}
export enum RiskLevel {  CRITICAL = 'critical',
  HIGH = 'high',
  MEDIUM = 'medium',
  LOW = 'low',
  INFO = 'info'
}
export enum ScanStatus {  INITIALIZING = 'initializing',
  RUNNING = 'running',
  PAUSED = 'paused',
  COMPLETED = 'completed',
  FAILED = 'failed',
  CANCELLED = 'cancelled'
}
export enum SecurityPattern {  INPUT_VALIDATION = 'input_validation',
  SANITIZATION = 'sanitization',
  ENCODING = 'encoding',
  AUTHENTICATION = 'authentication',
  AUTHORIZATION = 'authorization',
  JWT_VALIDATION = 'jwt_validation',
  ENCRYPTION = 'encryption',
  HASHING = 'hashing',
  DIGITAL_SIGNATURE = 'digital_signature',
  SECURE_RANDOM = 'secure_random',
  SAFE_DESERIALIZATION = 'safe_deserialization',
  BOUNDS_CHECKING = 'bounds_checking',
  THREAD_SAFETY = 'thread_safety',
  ATOMIC_OPERATIONS = 'atomic_operations',
  LOCK_FREE = 'lock_free',
  ERROR_HANDLING = 'error_handling',
  FAIL_SECURE = 'fail_secure',
  LOGGING = 'logging'
}
export enum SensitiveInfoType {  API_KEY = 'api_key',
  ACCESS_TOKEN = 'access_token',
  SECRET_KEY = 'secret_key',
  PASSWORD = 'password',
  PRIVATE_KEY = 'private_key',
  JWT_TOKEN = 'jwt_token',
  SESSION_ID = 'session_id',
  AUTH_COOKIE = 'auth_cookie',
  EMAIL = 'email',
  PHONE = 'phone',
  SSN = 'ssn',
  CREDIT_CARD = 'credit_card',
  ID_CARD = 'id_card',
  PASSPORT = 'passport',
  DATABASE_CONNECTION = 'database_connection',
  INTERNAL_IP = 'internal_ip',
  AWS_KEY = 'aws_key',
  GCP_KEY = 'gcp_key',
  AZURE_KEY = 'azure_key',
  GITHUB_TOKEN = 'github_token',
  SLACK_TOKEN = 'slack_token',
  FILE_PATH = 'file_path',
  BACKUP_FILE = 'backup_file',
  DEBUG_INFO = 'debug_info',
  ERROR_MESSAGE = 'error_message',
  STACK_TRACE = 'stack_trace',
  SOURCE_CODE = 'source_code',
  COMMENT = 'comment'
}
export enum Severity {  CRITICAL = 'Critical',
  HIGH = 'High',
  MEDIUM = 'Medium',
  LOW = 'Low',
  INFORMATIONAL = 'Informational'
}
export enum StoppingReason {  MAX_VULNERABILITIES = 'max_vulnerabilities_reached',
  TIME_LIMIT = 'time_limit_exceeded',
  PROTECTION_DETECTED = 'protection_detected',
  ERROR_THRESHOLD = 'error_threshold_exceeded',
  RATE_LIMITED = 'rate_limited',
  NO_RESPONSE = 'no_response_timeout',
  MANUAL_STOP = 'manual_stop',
  RESOURCE_EXHAUSTED = 'resource_exhausted'
}
export enum TaskStatus {  PENDING = 'pending',
  QUEUED = 'queued',
  RUNNING = 'running',
  COMPLETED = 'completed',
  FAILED = 'failed',
  CANCELLED = 'cancelled',
  TIMEOUT = 'timeout'
}
export enum TestStatus {  DRAFT = 'draft',
  PENDING = 'pending',
  RUNNING = 'running',
  COMPLETED = 'completed',
  FAILED = 'failed',
  CANCELLED = 'cancelled'
}
export enum ThreatLevel {  CRITICAL = 'critical',
  HIGH = 'high',
  MEDIUM = 'medium',
  LOW = 'low',
  INFO = 'info',
  UNKNOWN = 'unknown'
}
export enum Topic {  TASK_SCAN_START = 'tasks.scan.start',
  RESULTS_SCAN_COMPLETED = 'results.scan.completed',
  TASK_FUNCTION_START = 'tasks.function.start',
  TASK_FUNCTION_XSS = 'tasks.function.xss',
  TASK_FUNCTION_SQLI = 'tasks.function.sqli',
  TASK_FUNCTION_SSRF = 'tasks.function.ssrf',
  FUNCTION_IDOR_TASK = 'tasks.function.idor',
  RESULTS_FUNCTION_COMPLETED = 'results.function.completed',
  TASK_AI_TRAINING_START = 'tasks.ai.training.start',
  TASK_AI_TRAINING_EPISODE = 'tasks.ai.training.episode',
  TASK_AI_TRAINING_STOP = 'tasks.ai.training.stop',
  RESULTS_AI_TRAINING_PROGRESS = 'results.ai.training.progress',
  RESULTS_AI_TRAINING_COMPLETED = 'results.ai.training.completed',
  RESULTS_AI_TRAINING_FAILED = 'results.ai.training.failed',
  EVENT_AI_EXPERIENCE_CREATED = 'events.ai.experience.created',
  EVENT_AI_TRACE_COMPLETED = 'events.ai.trace.completed',
  EVENT_AI_MODEL_UPDATED = 'events.ai.model.updated',
  COMMAND_AI_MODEL_DEPLOY = 'commands.ai.model.deploy',
  TASK_RAG_KNOWLEDGE_UPDATE = 'tasks.rag.knowledge.update',
  TASK_RAG_QUERY = 'tasks.rag.query',
  RESULTS_RAG_RESPONSE = 'results.rag.response',
  FINDING_DETECTED = 'findings.detected',
  LOG_RESULTS_ALL = 'log.results.all',
  STATUS_TASK_UPDATE = 'status.task.update',
  FEEDBACK_CORE_STRATEGY = 'feedback.core.strategy',
  MODULE_HEARTBEAT = 'module.heartbeat',
  COMMAND_TASK_CANCEL = 'command.task.cancel',
  CONFIG_GLOBAL_UPDATE = 'config.global.update',
  TASK_THREAT_INTEL_LOOKUP = 'tasks.threat_intel.lookup',
  TASK_IOC_ENRICHMENT = 'tasks.threat_intel.ioc_enrichment',
  TASK_MITRE_MAPPING = 'tasks.threat_intel.mitre_mapping',
  RESULTS_THREAT_INTEL = 'results.threat_intel',
  RESULTS_SCAN_PROGRESS = 'results.scan.progress',
  RESULTS_SCAN_FAILED = 'results.scan.failed',
  EVENT_SCAN_ASSET_DISCOVERED = 'events.scan.asset.discovered',
  RESULTS_FUNCTION_PROGRESS = 'results.function.progress',
  RESULTS_FUNCTION_FAILED = 'results.function.failed',
  EVENT_FUNCTION_VULN_FOUND = 'events.function.vuln.found',
  TASK_INTEGRATION_ANALYSIS_START = 'tasks.integration.analysis.start',
  RESULTS_INTEGRATION_ANALYSIS_PROGRESS = 'results.integration.analysis.progress',
  RESULTS_INTEGRATION_ANALYSIS_COMPLETED = 'results.integration.analysis.completed',
  COMMAND_INTEGRATION_REPORT_GENERATE = 'commands.integration.report.generate',
  EVENT_INTEGRATION_REPORT_GENERATED = 'events.integration.report.generated',
  EVENT_AI_SCENARIO_LOADED = 'events.ai.scenario.loaded',
  TASK_AUTHZ_CHECK = 'tasks.authz.check',
  TASK_AUTHZ_ANALYZE = 'tasks.authz.analyze',
  RESULTS_AUTHZ = 'results.authz',
  TASK_POSTEX_TEST = 'tasks.postex.test',
  TASK_POSTEX_PRIVILEGE_ESCALATION = 'tasks.postex.privilege_escalation',
  TASK_POSTEX_LATERAL_MOVEMENT = 'tasks.postex.lateral_movement',
  TASK_POSTEX_DATA_EXFILTRATION = 'tasks.postex.data_exfiltration',
  TASK_POSTEX_PERSISTENCE = 'tasks.postex.persistence',
  RESULTS_POSTEX = 'results.postex',
  TASK_REMEDIATION_GENERATE = 'tasks.remediation.generate',
  RESULTS_REMEDIATION = 'results.remediation'
}
export enum VulnerabilityByLanguage {  BUFFER_OVERFLOW = 'buffer_overflow',
  USE_AFTER_FREE = 'use_after_free',
  MEMORY_LEAK = 'memory_leak',
  NULL_POINTER_DEREFERENCE = 'null_pointer_dereference',
  TYPE_CONFUSION = 'type_confusion',
  PROTOTYPE_POLLUTION = 'prototype_pollution',
  RACE_CONDITION = 'race_condition',
  DEADLOCK = 'deadlock',
  DATA_RACE = 'data_race',
  DESERIALIZATION = 'deserialization',
  PICKLE_INJECTION = 'pickle_injection',
  CODE_INJECTION = 'code_injection',
  EVAL_INJECTION = 'eval_injection',
  TEMPLATE_INJECTION = 'template_injection',
  SQL_INJECTION = 'sql_injection',
  XSS = 'xss',
  XXE = 'xxe',
  LDAP_INJECTION = 'ldap_injection',
  DEPENDENCY_CONFUSION = 'dependency_confusion',
  SUPPLY_CHAIN = 'supply_chain',
  MISCONFIGURATION = 'misconfiguration'
}
export enum VulnerabilityStatus {  NEW = 'new',
  OPEN = 'open',
  IN_PROGRESS = 'in_progress',
  FIXED = 'fixed',
  VERIFIED = 'verified',
  RISK_ACCEPTED = 'risk_accepted',
  FALSE_POSITIVE = 'false_positive',
  WONT_FIX = 'wont_fix',
  DUPLICATE = 'duplicate'
}
export enum VulnerabilityType {  XSS = 'XSS',
  SQLI = 'SQL Injection',
  SSRF = 'SSRF',
  IDOR = 'IDOR',
  BOLA = 'BOLA',
  INFO_LEAK = 'Information Leak',
  WEAK_AUTH = 'Weak Authentication',
  RCE = 'Remote Code Execution',
  AUTHENTICATION_BYPASS = 'Authentication Bypass',
  PRICE_MANIPULATION = 'Price Manipulation',
  WORKFLOW_BYPASS = 'Workflow Bypass',
  RACE_CONDITION = 'Race Condition',
  FORCED_BROWSING = 'Forced Browsing',
  STATE_MANIPULATION = 'State Manipulation'
}
