// AIVA 跨語言通訊 Protocol Buffers 定義
// 用於統一跨語言資料序列化格式

syntax = "proto3";

package aiva.crosslang;

option go_package = "github.com/kyle0527/aiva/services/crosslang";

// 基本訊息類型
message CrossLanguageRequest {
    string id = 1;
    string method = 2;
    map<string, string> params = 3;
    string source_language = 4;
    string target_language = 5;
    int64 timestamp = 6;
    int32 timeout_seconds = 7;
    map<string, string> metadata = 8;
}

message CrossLanguageResponse {
    string id = 1;
    bool success = 2;
    string result_json = 3;
    string error_message = 4;
    int64 timestamp = 5;
    double duration_seconds = 6;
    map<string, string> metadata = 7;
}

// 安全掃描相關訊息
message SecurityScanRequest {
    string scan_id = 1;
    string target_path = 2;
    string language = 3;
    repeated string scan_types = 4;
    ScanConfiguration config = 5;
    map<string, string> options = 6;
}

message SecurityScanResponse {
    string scan_id = 1;
    bool success = 2;
    repeated Vulnerability vulnerabilities = 3;
    ScanStatistics statistics = 4;
    string error_message = 5;
    int64 scan_duration_ms = 6;
}

message ScanConfiguration {
    int32 max_depth = 1;
    repeated string exclude_patterns = 2;
    repeated string include_patterns = 3;
    bool follow_symlinks = 4;
    int32 max_file_size_mb = 5;
    bool enable_cache = 6;
}

message Vulnerability {
    string id = 1;
    string type = 2;
    string severity = 3;
    string title = 4;
    string description = 5;
    string file_path = 6;
    int32 start_line = 7;
    int32 end_line = 8;
    int32 start_column = 9;
    int32 end_column = 10;
    string code_snippet = 11;
    string recommendation = 12;
    repeated string references = 13;
    double confidence_score = 14;
    map<string, string> metadata = 15;
}

message ScanStatistics {
    int32 files_scanned = 1;
    int32 lines_scanned = 2;
    int32 vulnerabilities_found = 3;
    int32 critical_count = 4;
    int32 high_count = 5;
    int32 medium_count = 6;
    int32 low_count = 7;
    int32 info_count = 8;
    double scan_duration_seconds = 9;
}

// AI 分析相關訊息
message AIAnalysisRequest {
    string analysis_id = 1;
    string input_type = 2;
    string input_data = 3;
    string analysis_type = 4;
    AIConfiguration ai_config = 5;
    map<string, string> context = 6;
}

message AIAnalysisResponse {
    string analysis_id = 1;
    bool success = 2;
    string analysis_result = 3;
    double confidence_score = 4;
    repeated string suggestions = 5;
    string error_message = 6;
    int64 processing_time_ms = 7;
    map<string, string> metadata = 8;
}

message AIConfiguration {
    string model_name = 1;
    double temperature = 2;
    int32 max_tokens = 3;
    repeated string stop_sequences = 4;
    bool use_cache = 5;
    map<string, string> model_params = 6;
}

// 服務健康檢查
message HealthCheckRequest {
    string service_name = 1;
    int64 timestamp = 2;
}

message HealthCheckResponse {
    string service_name = 1;
    bool healthy = 2;
    string status = 3;
    string version = 4;
    int64 uptime_seconds = 5;
    map<string, string> details = 6;
}

// 批次處理訊息
message BatchRequest {
    string batch_id = 1;
    repeated CrossLanguageRequest requests = 2;
    bool parallel_execution = 3;
    int32 max_concurrency = 4;
}

message BatchResponse {
    string batch_id = 1;
    repeated CrossLanguageResponse responses = 2;
    bool all_success = 3;
    int32 success_count = 4;
    int32 error_count = 5;
    double total_duration_seconds = 6;
}

// 檔案處理訊息
message FileProcessRequest {
    string request_id = 1;
    string file_path = 2;
    string operation = 3;
    bytes file_content = 4;
    map<string, string> options = 5;
}

message FileProcessResponse {
    string request_id = 1;
    bool success = 2;
    bytes result_content = 3;
    string result_path = 4;
    string error_message = 5;
    map<string, string> metadata = 6;
}

// gRPC 服務定義
service CrossLanguageService {
    // 基本調用
    rpc Call(CrossLanguageRequest) returns (CrossLanguageResponse);
    
    // 安全掃描
    rpc SecurityScan(SecurityScanRequest) returns (SecurityScanResponse);
    
    // AI 分析
    rpc AIAnalysis(AIAnalysisRequest) returns (AIAnalysisResponse);
    
    // 健康檢查
    rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
    
    // 批次處理
    rpc BatchProcess(BatchRequest) returns (BatchResponse);
    
    // 檔案處理
    rpc ProcessFile(FileProcessRequest) returns (FileProcessResponse);
    
    // 串流調用
    rpc StreamCall(stream CrossLanguageRequest) returns (stream CrossLanguageResponse);
}

// 事件通知服務
service EventNotificationService {
    // 訂閱事件
    rpc Subscribe(SubscribeRequest) returns (stream EventNotification);
    
    // 發布事件
    rpc Publish(PublishRequest) returns (PublishResponse);
}

message SubscribeRequest {
    string subscriber_id = 1;
    repeated string event_types = 2;
    map<string, string> filters = 3;
}

message EventNotification {
    string event_id = 1;
    string event_type = 2;
    string source_service = 3;
    int64 timestamp = 4;
    string payload_json = 5;
    map<string, string> metadata = 6;
}

message PublishRequest {
    string event_id = 1;
    string event_type = 2;
    string source_service = 3;
    string payload_json = 4;
    map<string, string> metadata = 5;
}

message PublishResponse {
    bool success = 1;
    string message = 2;
    int32 subscriber_count = 3;
}