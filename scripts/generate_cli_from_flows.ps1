<#
.SYNOPSIS
    Âü∫ÊñºË∑®Ê®°ÁµÑÊµÅÁ®ãÂúñÁîüÊàê CLI ÂëΩ‰ª§
    
.DESCRIPTION
    ÂàÜÊûêÊû∂ÊßãÂúñ‰∏≠ÁöÑË∑®Ê®°ÁµÑÊµÅÁ®ãÔºåËá™ÂãïÁîüÊàêÂ∞çÊáâÁöÑ CLI ÂëΩ‰ª§ÂØ¶Áèæ
    
.EXAMPLE
    .\generate_cli_from_flows.ps1 -ArchDiagramsDir "_out1101016\architecture_diagrams" -OutputDir "services\cli\generated"
#>

param(
    [Parameter(Mandatory=$false)]
    [string]$ArchDiagramsDir = "_out1101016\architecture_diagrams",
    
    [Parameter(Mandatory=$false)]
    [string]$OutputDir = "services\cli\generated"
)

# ============================================================================
# Ë∑®Ê®°ÁµÑÊµÅÁ®ãÂÆöÁæ©ÔºàÂæûÊû∂ÊßãÂúñÂàÜÊûêÂæóÂá∫Ôºâ
# ============================================================================

$CrossModuleFlows = @{
    "scan_flow" = @{
        Title = "ÊéÉÊèèÊµÅÁ®ã"
        Description = "User ‚Üí API ‚Üí Core ‚Üí Scan ‚Üí MQ"
        Modules = @("Core", "Scan", "MQ")
        Commands = @(
            @{
                Name = "scan start"
                Args = "<url>"
                Flags = @("--max-depth <int>", "--max-pages <int>", "--wait", "--format json")
                Topics = @("TASK_SCAN_START", "RESULTS_SCAN_PROGRESS", "RESULTS_SCAN_COMPLETED")
            },
            @{
                Name = "scan status"
                Args = "<scan_id>"
                Flags = @("--format json")
                Topics = @("QUERY_SCAN_STATUS", "RESULTS_SCAN_STATUS")
            },
            @{
                Name = "scan assets"
                Args = "<scan_id>"
                Flags = @("--type <web|api|file>", "--format json")
                Topics = @("QUERY_SCAN_ASSETS", "RESULTS_SCAN_ASSETS")
            }
        )
    }
    
    "sqli_detection_flow" = @{
        Title = "SQL Ê≥®ÂÖ•Ê™¢Ê∏¨ÊµÅÁ®ã"
        Description = "Core ‚Üí Function(SQLi) ‚Üí MQ ‚Üí Core"
        Modules = @("Core", "Function", "MQ")
        Commands = @(
            @{
                Name = "detect sqli"
                Args = "<url>"
                Flags = @("--param <name>", "--method <GET|POST>", "--engines <list>", "--wait", "--format json")
                Topics = @("TASK_FUNCTION_SQLI", "RESULTS_FUNCTION_PROGRESS", "EVENT_FUNCTION_VULN_FOUND", "RESULTS_FUNCTION_COMPLETED")
            }
        )
    }
    
    "xss_detection_flow" = @{
        Title = "XSS Ê™¢Ê∏¨ÊµÅÁ®ã"
        Description = "Core ‚Üí Function(XSS) ‚Üí MQ ‚Üí Core"
        Modules = @("Core", "Function", "MQ")
        Commands = @(
            @{
                Name = "detect xss"
                Args = "<url>"
                Flags = @("--param <name>", "--type <reflected|stored|dom>", "--wait", "--format json")
                Topics = @("TASK_FUNCTION_XSS", "RESULTS_FUNCTION_COMPLETED")
            }
        )
    }
    
    "ssrf_detection_flow" = @{
        Title = "SSRF Ê™¢Ê∏¨ÊµÅÁ®ã"
        Description = "Core ‚Üí Function(SSRF) ‚Üí MQ ‚Üí Core"
        Modules = @("Core", "Function", "MQ")
        Commands = @(
            @{
                Name = "detect ssrf"
                Args = "<url>"
                Flags = @("--param <name>", "--callback-url <url>", "--wait", "--format json")
                Topics = @("TASK_FUNCTION_SSRF", "RESULTS_FUNCTION_COMPLETED")
            }
        )
    }
    
    "idor_detection_flow" = @{
        Title = "IDOR Ê™¢Ê∏¨ÊµÅÁ®ã"
        Description = "Core ‚Üí Function(IDOR) ‚Üí MQ ‚Üí Core"
        Modules = @("Core", "Function", "MQ")
        Commands = @(
            @{
                Name = "detect idor"
                Args = "<url>"
                Flags = @("--param <name>", "--user-context <json>", "--wait", "--format json")
                Topics = @("FUNCTION_IDOR_TASK", "RESULTS_FUNCTION_COMPLETED")
            }
        )
    }
    
    "integration_flow" = @{
        Title = "Êï¥ÂêàÂàÜÊûêÊµÅÁ®ã"
        Description = "Core ‚Üí Integration ‚Üí MQ ‚Üí Core"
        Modules = @("Core", "Integration", "MQ")
        Commands = @(
            @{
                Name = "report generate"
                Args = "<scan_id>"
                Flags = @("--format <pdf|html|json>", "--output <file>", "--no-findings", "--include-remediation")
                Topics = @("TASK_INTEGRATION_ANALYSIS_START", "RESULTS_INTEGRATION_ANALYSIS_COMPLETED", "COMMAND_INTEGRATION_REPORT_GENERATE", "EVENT_INTEGRATION_REPORT_GENERATED")
            },
            @{
                Name = "report status"
                Args = "<analysis_id>"
                Flags = @("--format json")
                Topics = @("QUERY_INTEGRATION_STATUS", "RESULTS_INTEGRATION_STATUS")
            },
            @{
                Name = "report export"
                Args = "<scan_id>"
                Flags = @("--format <csv|excel|json>", "--output <file>")
                Topics = @("COMMAND_INTEGRATION_EXPORT")
            }
        )
    }
    
    "ai_training_flow" = @{
        Title = "AI Ë®ìÁ∑¥ÊµÅÁ®ã"
        Description = "Core(AI) ‚Üí MQ ‚Üí Knowledge Base"
        Modules = @("Core", "MQ")
        Commands = @(
            @{
                Name = "ai train"
                Args = ""
                Flags = @("--mode <realtime|replay|simulation>", "--epochs <int>", "--scenarios <int>", "--storage-path <path>", "--format json")
                Topics = @("TASK_AI_TRAINING_START", "TASK_AI_TRAINING_EPISODE", "RESULTS_AI_TRAINING_PROGRESS", "EVENT_AI_EXPERIENCE_CREATED", "EVENT_AI_MODEL_UPDATED", "RESULTS_AI_TRAINING_COMPLETED")
            },
            @{
                Name = "ai status"
                Args = ""
                Flags = @("--storage-path <path>", "--format json")
                Topics = @("QUERY_AI_STATUS", "RESULTS_AI_STATUS")
            },
            @{
                Name = "ai stop"
                Args = "<training_id>"
                Flags = @("--format json")
                Topics = @("TASK_AI_TRAINING_STOP")
            },
            @{
                Name = "ai deploy"
                Args = "<model_id>"
                Flags = @("--environment <dev|staging|prod>", "--format json")
                Topics = @("COMMAND_AI_MODEL_DEPLOY")
            }
        )
    }
    
    "threat_intel_flow" = @{
        Title = "Â®ÅËÑÖÊÉÖÂ†±ÊµÅÁ®ã"
        Description = "Core ‚Üí Threat Intel ‚Üí External APIs ‚Üí Core"
        Modules = @("Core", "ThreatIntel", "MQ")
        Commands = @(
            @{
                Name = "threat lookup"
                Args = "<ioc>"
                Flags = @("--type <ip|domain|hash|url>", "--enrich", "--mitre", "--format json")
                Topics = @("TASK_THREAT_INTEL_LOOKUP", "TASK_IOC_ENRICHMENT", "TASK_MITRE_MAPPING", "RESULTS_THREAT_INTEL")
            },
            @{
                Name = "threat batch"
                Args = "<file>"
                Flags = @("--format json")
                Topics = @("TASK_THREAT_INTEL_BATCH")
            },
            @{
                Name = "threat mitre"
                Args = "<technique_id>"
                Flags = @("--format json")
                Topics = @("TASK_MITRE_MAPPING", "RESULTS_THREAT_INTEL")
            }
        )
    }
    
    "authz_flow" = @{
        Title = "Ê¨äÈôêÊ™¢Ê∏¨ÊµÅÁ®ã"
        Description = "Core ‚Üí AuthZ ‚Üí MQ ‚Üí Core"
        Modules = @("Core", "AuthZ", "MQ")
        Commands = @(
            @{
                Name = "authz check"
                Args = "<url>"
                Flags = @("--user-context <json>", "--test-escalation", "--format json")
                Topics = @("TASK_AUTHZ_CHECK", "RESULTS_AUTHZ")
            },
            @{
                Name = "authz analyze"
                Args = "<scan_id>"
                Flags = @("--format json")
                Topics = @("TASK_AUTHZ_ANALYZE", "RESULTS_AUTHZ")
            }
        )
    }
    
    "remediation_flow" = @{
        Title = "‰øÆÂæ©Âª∫Ë≠∞ÊµÅÁ®ã"
        Description = "Core ‚Üí Remediation ‚Üí MQ ‚Üí Core"
        Modules = @("Core", "Remediation", "MQ")
        Commands = @(
            @{
                Name = "remedy generate"
                Args = "<vuln_id>"
                Flags = @("--language <python|java|go|...>", "--framework <flask|django|...>", "--format json")
                Topics = @("TASK_REMEDIATION_GENERATE", "RESULTS_REMEDIATION")
            },
            @{
                Name = "remedy batch"
                Args = "<scan_id>"
                Flags = @("--format json")
                Topics = @("TASK_REMEDIATION_BATCH", "RESULTS_REMEDIATION")
            }
        )
    }
}

# ============================================================================
# ÁîüÊàêÂáΩÊï∏
# ============================================================================

function New-CLICommandImplementation {
    param(
        [string]$FlowName,
        [hashtable]$FlowData
    )
    
    $commandsCode = ""
    
    foreach ($cmd in $FlowData.Commands) {
        $funcName = "cmd_" + ($cmd.Name -replace ' ', '_')
        $argsList = if ($cmd.Args) { ", args: list[str]" } else { "" }
        
        $commandsCode += @"

def $funcName(${argsList}):
    '''$($FlowData.Title) - $($cmd.Name)
    
    Description: $($FlowData.Description)
    Modules: $($FlowData.Modules -join ' ‚Üí ')
    
    Topics:
$($cmd.Topics | ForEach-Object { "    - $_`n" })
    
    Args:
        $($cmd.Args)
    
    Flags:
$($cmd.Flags | ForEach-Object { "        $_`n" })
    '''
    # TODO: ÂØ¶ÁèæË∑®Ê®°ÁµÑÈÄöË®äÈÇèËºØ
    # 1. Ëß£ÊûêÂèÉÊï∏
    # 2. ÁôºÈÄÅÂà∞Â∞çÊáâ Topic
    # 3. Á≠âÂæÖÁµêÊûú
    # 4. Ê†ºÂºèÂåñËº∏Âá∫
    pass

"@
    }
    
    return $commandsCode
}

function New-CLIFlowDocument {
    param(
        [hashtable]$AllFlows
    )
    
    $doc = @"
# AIVA Ë∑®Ê®°ÁµÑÊµÅÁ®ãËàá CLI ÂëΩ‰ª§Â∞çÊáâ

ÁîüÊàêÊôÇÈñì: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')

## üìä ÊµÅÁ®ãÁ∏ΩË¶Ω

| ÊµÅÁ®ãÂêçÁ®± | Ê∂âÂèäÊ®°ÁµÑ | CLI ÂëΩ‰ª§Êï∏ | Topic Êï∏ |
|---------|---------|-----------|---------|
"@

    foreach ($flowName in $AllFlows.Keys) {
        $flow = $AllFlows[$flowName]
        $cmdCount = $flow.Commands.Count
        $topicCount = ($flow.Commands | ForEach-Object { $_.Topics } | Select-Object -Unique).Count
        
        $doc += "`n| $($flow.Title) | $($flow.Modules -join ', ') | $cmdCount | $topicCount |"
    }
    
    $doc += @"

## üìã Ë©≥Á¥∞ÂëΩ‰ª§ÂàóË°®

"@

    foreach ($flowName in $AllFlows.Keys) {
        $flow = $AllFlows[$flowName]
        
        $doc += @"

### $($flow.Title)

**ÊèèËø∞**: $($flow.Description)  
**Ê∂âÂèäÊ®°ÁµÑ**: $($flow.Modules -join ' ‚Üí ')

#### ÂëΩ‰ª§

"@
        
        foreach ($cmd in $flow.Commands) {
            $doc += @"

##### ``aiva $($cmd.Name) $($cmd.Args)``

**ÈÅ∏È†Ö**:
"@
            foreach ($flag in $cmd.Flags) {
                $doc += "`n- ``$flag``"
            }
            
            $doc += @"


**Â∞çÊáâ Topics**:
"@
            foreach ($topic in $cmd.Topics) {
                $doc += "`n- ``$topic``"
            }
            
            $doc += "`n"
        }
    }
    
    return $doc
}

function New-MermaidFlowDiagram {
    param(
        [string]$FlowName,
        [hashtable]$FlowData
    )
    
    $mermaid = @"
# $($FlowData.Title)

``````mermaid
sequenceDiagram
    participant CLI as üñ•Ô∏è CLI
    participant Core as ü§ñ Core
"@

    # Ê∑ªÂä†Ê®°ÁµÑÂèÉËàáËÄÖ
    foreach ($module in $FlowData.Modules) {
        if ($module -eq "Scan") {
            $mermaid += "`n    participant Scan as üîç Scan"
        } elseif ($module -eq "Function") {
            $mermaid += "`n    participant Func as ‚ö° Function"
        } elseif ($module -eq "Integration") {
            $mermaid += "`n    participant Intg as üîó Integration"
        } elseif ($module -eq "MQ") {
            $mermaid += "`n    participant MQ as üì® MQ"
        }
    }
    
    $mermaid += "`n`n    CLI->>Core: $($FlowData.Commands[0].Name)"
    
    # Á∞°ÂåñÁöÑÊµÅÁ®ã
    foreach ($module in $FlowData.Modules) {
        if ($module -ne "Core" -and $module -ne "MQ") {
            $mermaid += "`n    Core->>MQ: Send Task"
            $mermaid += "`n    MQ->>${module}: Process"
            $mermaid += "`n    ${module}->>MQ: Result"
            $mermaid += "`n    MQ->>Core: Complete"
            break
        }
    }
    
    $mermaid += "`n    Core->>CLI: Return Result"
    $mermaid += "`n```````n`n"
    
    return $mermaid
}

# ============================================================================
# ‰∏ªÁ®ãÂºè
# ============================================================================

Write-Host "`nüöÄ AIVA Ë∑®Ê®°ÁµÑÊµÅÁ®ã CLI ÁîüÊàêÂô®" -ForegroundColor Cyan
Write-Host "=" * 60 -ForegroundColor Cyan

# Âª∫Á´ãËº∏Âá∫ÁõÆÈåÑ
if (-not (Test-Path $OutputDir)) {
    New-Item -ItemType Directory -Path $OutputDir -Force | Out-Null
    Write-Host "üìÅ Â∑≤Âª∫Á´ãËº∏Âá∫ÁõÆÈåÑ: $OutputDir" -ForegroundColor Yellow
}

# ÁîüÊàê Python CLI ÂØ¶Áèæ
Write-Host "`nüìù ÁîüÊàê CLI ÂëΩ‰ª§ÂØ¶Áèæ..." -ForegroundColor Cyan
$pythonCode = @"
'''
AIVA Ë∑®Ê®°ÁµÑÊµÅÁ®ã CLI ÂëΩ‰ª§ÂØ¶Áèæ
Ëá™ÂãïÁîüÊàêÊñº: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
'''

from typing import Optional
import asyncio
from services.aiva_common.enums.modules import Topic, ModuleName


"@

foreach ($flowName in $CrossModuleFlows.Keys) {
    $pythonCode += New-CLICommandImplementation -FlowName $flowName -FlowData $CrossModuleFlows[$flowName]
}

$pythonFilePath = Join-Path $OutputDir "cross_module_commands.py"
$pythonCode | Out-File -FilePath $pythonFilePath -Encoding UTF8
Write-Host "‚úÖ Â∑≤ÁîüÊàê: $pythonFilePath" -ForegroundColor Green

# ÁîüÊàêÊñáÊ™î
Write-Host "`nüìÑ ÁîüÊàêÊñáÊ™î..." -ForegroundColor Cyan
$docContent = New-CLIFlowDocument -AllFlows $CrossModuleFlows
$docFilePath = Join-Path $OutputDir "CLI_FLOWS.md"
$docContent | Out-File -FilePath $docFilePath -Encoding UTF8
Write-Host "‚úÖ Â∑≤ÁîüÊàê: $docFilePath" -ForegroundColor Green

# ÁîüÊàê Mermaid ÊµÅÁ®ãÂúñ
Write-Host "`nüé® ÁîüÊàêÊµÅÁ®ãÂúñ..." -ForegroundColor Cyan
$mermaidDir = Join-Path $OutputDir "flow_diagrams"
if (-not (Test-Path $mermaidDir)) {
    New-Item -ItemType Directory -Path $mermaidDir -Force | Out-Null
}

foreach ($flowName in $CrossModuleFlows.Keys) {
    $mermaidContent = New-MermaidFlowDiagram -FlowName $flowName -FlowData $CrossModuleFlows[$flowName]
    $mermaidFilePath = Join-Path $mermaidDir "$flowName.md"
    $mermaidContent | Out-File -FilePath $mermaidFilePath -Encoding UTF8
    Write-Host "  ‚úì $flowName.md" -ForegroundColor Gray
}

# Áµ±Ë®à
Write-Host "`nüìä Áµ±Ë®àË≥áÊñô:" -ForegroundColor Cyan
$totalFlows = $CrossModuleFlows.Count
$totalCommands = ($CrossModuleFlows.Values | ForEach-Object { $_.Commands.Count } | Measure-Object -Sum).Sum
$totalTopics = ($CrossModuleFlows.Values | ForEach-Object { $_.Commands | ForEach-Object { $_.Topics } } | Select-Object -Unique).Count

Write-Host "  ‚Ä¢ Ë∑®Ê®°ÁµÑÊµÅÁ®ã: $totalFlows ÂÄã" -ForegroundColor Yellow
Write-Host "  ‚Ä¢ CLI ÂëΩ‰ª§: $totalCommands ÂÄã" -ForegroundColor Yellow
Write-Host "  ‚Ä¢ Ê∂âÂèä Topics: $totalTopics ÂÄã" -ForegroundColor Yellow

# ÂÆåÊàê
Write-Host "`n" -ForegroundColor White
Write-Host "=" * 60 -ForegroundColor Green
Write-Host "‚úÖ ÂÆåÊàêÔºÅ" -ForegroundColor Green
Write-Host "=" * 60 -ForegroundColor Green
Write-Host "`nüìÅ Ëº∏Âá∫ÁõÆÈåÑ: $OutputDir" -ForegroundColor Cyan
Write-Host "`nüí° ‰∏ã‰∏ÄÊ≠•:" -ForegroundColor Yellow
Write-Host "  1. Êü•ÁúãÁîüÊàêÁöÑÊñáÊ™î: $docFilePath" -ForegroundColor White
Write-Host "  2. Êü•Áúã Python ÂØ¶Áèæ: $pythonFilePath" -ForegroundColor White
Write-Host "  3. Êü•ÁúãÊµÅÁ®ãÂúñ: $mermaidDir" -ForegroundColor White
Write-Host "  4. Êï¥ÂêàÂà∞‰∏ª CLI: services\cli\aiva_cli.py" -ForegroundColor White
Write-Host "`n" -ForegroundColor White
