#!/usr/bin/env python3
"""
AIVA 靶場實戰測試腳本
使用發現的10個掃描器對真實目標進行安全測試
"""

import asyncio
import sys
import json
import time
from pathlib import Path

# 導入必要的模組
from services.aiva_common.enums import ModuleName
from dataclasses import dataclass
from typing import List, Dict, Any

# 設置專案根目錄
PROJECT_ROOT = Path(__file__).resolve().parent
sys.path.insert(0, str(PROJECT_ROOT))

@dataclass
class TestTarget:
    name: str
    url: str
    expected_vulns: List[str]
    description: str

@dataclass
class ScanResult:
    scanner_name: str
    target_url: str
    findings: List[Dict]
    success: bool
    execution_time: float
    error_message: str = ""

class AIVAPentestRunner:
    def __init__(self):
        self.results: List[ScanResult] = []
        self.targets = [
            TestTarget(
                name="HttpBin",
                url="http://httpbin.org",
                expected_vulns=["info_gathering"],
                description="HTTP 測試服務，適合資訊收集測試"
            ),
            TestTarget(
                name="HttpBin POST",
                url="http://httpbin.org/post",
                expected_vulns=["sqli", "xss"],
                description="POST 端點，適合注入測試"
            ),
            TestTarget(
                name="JSONPlaceholder",
                url="https://jsonplaceholder.typicode.com/posts/1",
                expected_vulns=["sqli", "idor"],
                description="假 REST API，適合 IDOR 和 SQLi 測試"
            ),
            TestTarget(
                name="Local Test",
                url="http://127.0.0.1:8080",
                expected_vulns=["all"],
                description="本地測試服務 (如果可用)"
            )
        ]
    
    async def test_sqli_scanner(self, target: TestTarget) -> ScanResult:
        """測試SQL注入掃描器"""
        print(f"  🔍 測試 SQL 注入掃描器 - 目標: {target.url}")
        
        start_time = time.time()
        try:
            from services.features.function_sqli.worker import SqliWorkerService
            # 統一使用 aiva_common.schemas.tasks 作為單一事實來源
            from services.aiva_common.schemas.tasks import (
                FunctionTaskPayload, 
                FunctionTaskTarget, 
                FunctionTaskContext, 
                FunctionTaskTestConfig
            )
            from services.aiva_common.schemas import MessageHeader
            
            # 創建任務目標
            task_target = FunctionTaskTarget(
                url=target.url,
                method="GET",
                parameter_location="url"
            )
            
            task_context = FunctionTaskContext()
            test_config = FunctionTaskTestConfig(
                payloads=["<script>alert('xss')</script>", "javascript:alert('xss')"]
            )
            
            task = FunctionTaskPayload(
                task_id=f"task-{int(time.time())}",
                scan_id="pentest-scan-001",
                target=task_target,
                context=task_context,
                strategy="fast",  # 使用快速模式避免過長等待
                priority=5,
                test_config=test_config
            )
            
            # 執行掃描
            service = SqliWorkerService()
            context = await service.process_task(task)
            
            execution_time = time.time() - start_time
            
            # 提取結果
            findings = []
            if hasattr(context, 'findings') and context.findings:
                findings = [f.model_dump() if hasattr(f, 'model_dump') else f.__dict__ for f in context.findings]
            
            return ScanResult(
                scanner_name="Function SQLi Scanner",
                target_url=target.url,
                findings=findings,
                success=True,
                execution_time=execution_time
            )
            
        except Exception as e:
            execution_time = time.time() - start_time
            return ScanResult(
                scanner_name="Function SQLi Scanner",
                target_url=target.url,
                findings=[],
                success=False,
                execution_time=execution_time,
                error_message=str(e)
            )
    
    async def test_xss_scanner(self, target: TestTarget) -> ScanResult:
        """測試XSS掃描器"""
        print(f"  🔍 測試 XSS 掃描器 - 目標: {target.url}")
        
        start_time = time.time()
        try:
            # 嘗試導入XSS掃描器
            from services.features.function_xss import worker as xss_worker
            
            # 這只是示例，實際實現可能不同
            # 創建簡單的任務對象
            class SimpleTask:
                def __init__(self, url, strategy="normal"):
                    self.task_id = f"xss-test-{int(time.time())}"
                    self.target = url
                    self.strategy = strategy
                    self.scan_id = "pentest-scan-001"
            
            task = SimpleTask(target.url, "fast")
            
            # 檢查可用的處理方法並使用防呆機制
            process_fn = getattr(xss_worker, 'process_task_dict', None) or getattr(xss_worker, 'process_task', None)
            if process_fn is None:
                raise AttributeError("XSS worker 沒有可用的處理方法 (process_task_dict 或 process_task)")
            
            result = await process_fn(task)
            findings = result.get('findings', []) if isinstance(result, dict) else []
            
            execution_time = time.time() - start_time
            
            return ScanResult(
                scanner_name="Function XSS Scanner",
                target_url=target.url,
                findings=findings,
                success=True,
                execution_time=execution_time
            )
            
        except Exception as e:
            execution_time = time.time() - start_time
            return ScanResult(
                scanner_name="Function XSS Scanner",
                target_url=target.url,
                findings=[],
                success=False,
                execution_time=execution_time,
                error_message=str(e)
            )
    
    async def test_info_gatherer(self, target: TestTarget) -> ScanResult:
        """測試資訊收集器（Rust版本）"""
        print(f"  🔍 測試 Info Gatherer (Rust) - 目標: {target.url}")
        
        start_time = time.time()
        try:
            # 嘗試執行Rust資訊收集器
            import subprocess
            import json
            
            # 檢查是否有Rust執行檔
            rust_binary = PROJECT_ROOT / "services" / "features" / "info_gatherer_rust" / "target" / "release" / "info_gatherer"
            
            if rust_binary.exists():
                # 執行Rust程式
                result = subprocess.run([
                    str(rust_binary),
                    target.url
                ], capture_output=True, text=True, timeout=30)
                
                findings = []
                if result.returncode == 0 and result.stdout:
                    try:
                        output_data = json.loads(result.stdout)
                        findings = [output_data] if output_data else []
                    except json.JSONDecodeError:
                        findings = [{"raw_output": result.stdout}]
            else:
                findings = [{"status": "Rust binary not found", "note": "需要編譯Rust程式"}]
            
            execution_time = time.time() - start_time
            
            return ScanResult(
                scanner_name="Info Gatherer (Rust)",
                target_url=target.url,
                findings=findings,
                success=True,
                execution_time=execution_time
            )
            
        except Exception as e:
            execution_time = time.time() - start_time
            return ScanResult(
                scanner_name="Info Gatherer (Rust)",
                target_url=target.url,
                findings=[],
                success=False,
                execution_time=execution_time,
                error_message=str(e)
            )
    
    async def run_comprehensive_scan(self, target: TestTarget) -> List[ScanResult]:
        """對單個目標執行全面掃描"""
        print(f"\n🎯 開始掃描目標: {target.name}")
        print(f"   URL: {target.url}")
        print(f"   描述: {target.description}")
        print("-" * 50)
        
        scan_results = []
        
        # 執行各種掃描器
        scanners = [
            self.test_sqli_scanner,
            self.test_xss_scanner,
            self.test_info_gatherer,
        ]
        
        for scanner_func in scanners:
            try:
                result = await scanner_func(target)
                scan_results.append(result)
            except Exception as e:
                print(f"    ❌ 掃描器執行失敗: {e}")
        
        return scan_results
    
    def generate_report(self) -> Dict[str, Any]:
        """生成測試報告"""
        total_scans = len(self.results)
        successful_scans = len([r for r in self.results if r.success])
        total_findings = sum(len(r.findings) for r in self.results)
        total_time = sum(r.execution_time for r in self.results)
        
        # 按掃描器分組統計
        scanner_stats = {}
        for result in self.results:
            scanner = result.scanner_name
            if scanner not in scanner_stats:
                scanner_stats[scanner] = {
                    "total": 0,
                    "successful": 0,
                    "findings": 0,
                    "avg_time": 0
                }
            
            scanner_stats[scanner]["total"] += 1
            if result.success:
                scanner_stats[scanner]["successful"] += 1
            scanner_stats[scanner]["findings"] += len(result.findings)
            scanner_stats[scanner]["avg_time"] += result.execution_time
        
        # 計算平均時間
        for stats in scanner_stats.values():
            if stats["total"] > 0:
                stats["avg_time"] = stats["avg_time"] / stats["total"]
        
        return {
            "summary": {
                "total_scans": total_scans,
                "successful_scans": successful_scans,
                "success_rate": (successful_scans / total_scans * 100) if total_scans > 0 else 0,
                "total_findings": total_findings,
                "total_execution_time": total_time
            },
            "scanner_performance": scanner_stats,
            "detailed_results": [
                {
                    "scanner": r.scanner_name,
                    "target": r.target_url,
                    "success": r.success,
                    "findings_count": len(r.findings),
                    "execution_time": r.execution_time,
                    "error": r.error_message if not r.success else None
                }
                for r in self.results
            ]
        }
    
    async def run_pentest(self):
        """執行完整的滲透測試"""
        print("🎉 AIVA 靶場實戰測試開始")
        print("=" * 60)
        print(f"測試目標數量: {len(self.targets)}")
        print(f"預計掃描器: SQLi, XSS, Info Gatherer")
        print("=" * 60)
        
        # 對每個目標執行掃描
        for target in self.targets:
            try:
                target_results = await self.run_comprehensive_scan(target)
                self.results.extend(target_results)
                
                # 顯示該目標的結果摘要
                successful = len([r for r in target_results if r.success])
                total_findings = sum(len(r.findings) for r in target_results)
                print(f"   ✅ 完成: {successful}/{len(target_results)} 掃描成功")
                print(f"   🔍 發現: {total_findings} 個結果")
                
            except Exception as e:
                print(f"   ❌ 目標掃描失敗: {e}")
        
        # 生成和顯示最終報告
        print("\n" + "=" * 60)
        print("📊 AIVA 靶場測試報告")
        print("=" * 60)
        
        report = self.generate_report()
        
        # 顯示摘要
        summary = report["summary"]
        print(f"總掃描次數: {summary['total_scans']}")
        print(f"成功掃描: {summary['successful_scans']}")
        print(f"成功率: {summary['success_rate']:.1f}%")
        print(f"總發現數: {summary['total_findings']}")
        print(f"總執行時間: {summary['total_execution_time']:.2f} 秒")
        
        # 顯示掃描器性能
        print("\n🔧 掃描器性能:")
        for scanner, stats in report["scanner_performance"].items():
            success_rate = (stats["successful"] / stats["total"] * 100) if stats["total"] > 0 else 0
            print(f"  {scanner}:")
            print(f"    成功率: {success_rate:.1f}% ({stats['successful']}/{stats['total']})")
            print(f"    發現數: {stats['findings']}")
            print(f"    平均時間: {stats['avg_time']:.2f}s")
        
        # 顯示詳細結果
        print("\n📋 詳細結果:")
        for result in report["detailed_results"]:
            status = "✅" if result["success"] else "❌"
            print(f"  {status} {result['scanner']} -> {result['target']}")
            print(f"      發現: {result['findings_count']}, 時間: {result['execution_time']:.2f}s")
            if result["error"]:
                print(f"      錯誤: {result['error']}")
        
        # 保存詳細報告
        report_file = PROJECT_ROOT / "pentest_report.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        print(f"\n💾 詳細報告已保存至: {report_file}")
        
        # 最終評估
        if summary["success_rate"] >= 70:
            print("\n🎉 靶場測試成功！AIVA系統運行良好")
        elif summary["success_rate"] >= 50:
            print("\n⚠️ 靶場測試部分成功，有些功能需要改進")
        else:
            print("\n❌ 靶場測試發現問題，需要檢查系統配置")
        
        return report

async def main():
    """主函數"""
    try:
        runner = AIVAPentestRunner()
        await runner.run_pentest()
    except KeyboardInterrupt:
        print("\n⚠️ 測試被用戶中斷")
    except Exception as e:
        print(f"\n❌ 測試過程中發生錯誤: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())