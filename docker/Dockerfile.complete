# 建立完整 AIVA 平台 Docker 映像檔
FROM python:3.11-slim as builder

LABEL maintainer="AIVA Team"
LABEL version="2.0"
LABEL description="AIVA 完整 AI 安全評估平台 - 包含所有服務與資料庫"

# 設定環境變數
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    DEBIAN_FRONTEND=noninteractive \
    TZ=Asia/Taipei

# 安裝系統依賴
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    wget \
    unzip \
    libpq-dev \
    pkg-config \
    libssl-dev \
    ca-certificates \
    gnupg \
    lsb-release \
    nodejs \
    npm \
    && rm -rf /var/lib/apt/lists/*

# 安裝 Rust (for Rust 組件)
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"

# 安裝 Go (for Go 組件)
RUN wget -O go1.21.3.linux-amd64.tar.gz https://golang.org/dl/go1.21.3.linux-amd64.tar.gz && \
    tar -C /usr/local -xzf go1.21.3.linux-amd64.tar.gz && \
    rm go1.21.3.linux-amd64.tar.gz
ENV PATH="/usr/local/go/bin:${PATH}"

# 生產階段
FROM python:3.11-slim

# 複製環境變數
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PATH="/root/.cargo/bin:/usr/local/go/bin:${PATH}" \
    AIVA_HOME="/app"

# 安裝運行時依賴
RUN apt-get update && apt-get install -y \
    libpq5 \
    libssl3 \
    curl \
    postgresql-client \
    redis-tools \
    && rm -rf /var/lib/apt/lists/*

# 從建構階段複製工具
COPY --from=builder /root/.cargo /root/.cargo
COPY --from=builder /usr/local/go /usr/local/go

# 設定工作目錄
WORKDIR ${AIVA_HOME}

# 複製完整的專案結構
COPY requirements.txt .
COPY services/ services/
COPY api/ api/
COPY scripts/ scripts/
COPY config/ config/
COPY data/ data/
COPY examples/ examples/
COPY models/ models/
COPY utilities/ utilities/
COPY testing/ testing/
COPY tools/ tools/
COPY web/ web/
COPY .env.docker .env
COPY *.py ./
COPY *.md ./
COPY *.toml ./
COPY *.ini ./

# 安裝 Python 依賴
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt

# 建構 Rust 組件
RUN cd services/features/function_sast_rust && \
    cargo build --release && \
    cp target/release/function_sast_rust /usr/local/bin/

RUN cd services/scan/info_gatherer_rust && \
    cargo build --release && \
    cp target/release/info_gatherer_rust /usr/local/bin/

# 建構 Go 組件
RUN cd services/features/function_authn_go && \
    go mod tidy && \
    go build -o /usr/local/bin/function_authn_go ./cmd/worker/main.go

RUN cd services/features/function_cspm_go && \
    go mod tidy && \
    go build -o /usr/local/bin/function_cspm_go ./cmd/worker/main.go

RUN cd services/features/function_sca_go && \
    go mod tidy && \
    go build -o /usr/local/bin/function_sca_go ./cmd/worker/main.go

RUN cd services/features/function_ssrf_go && \
    go mod tidy && \
    go build -o /usr/local/bin/function_ssrf_go ./cmd/worker/main.go

# 安裝 Node.js 依賴 (for aiva_scan_node)
RUN cd services/scan/aiva_scan_node && \
    npm install && \
    npm run build || true

# 設定權限
RUN chmod +x scripts/common/launcher/aiva_launcher.py && \
    chmod +x scripts/launcher/aiva_launcher.py && \
    chmod +x scripts/utilities/aiva_launcher.py && \
    chmod +x start-aiva.sh && \
    chmod +x start-aiva.ps1

# 建立必要目錄
RUN mkdir -p /app/logs /app/data /app/backup /app/reports && \
    mkdir -p /app/models /app/config /app/tmp

# 創建啟動腳本
RUN echo '#!/bin/bash\n\
echo "[entrypoint] Starting AIVA Complete Platform..."\n\
echo "[entrypoint] Environment: ${ENVIRONMENT:-docker}"\n\
echo "[entrypoint] Python path: ${PYTHONPATH}"\n\
\n\
# 等待基礎設施服務\n\
echo "[entrypoint] Waiting for infrastructure services..."\n\
sleep 10\n\
\n\
# 設置環境變數\n\
export PYTHONPATH=/app:/app/services:/app/services/aiva_common\n\
export LOG_LEVEL=${LOG_LEVEL:-INFO}\n\
\n\
echo "[entrypoint] Starting AIVA services..."\n\
exec "$@"' > /entrypoint.sh && chmod +x /entrypoint.sh

# 設定環境變數 (使用統一後的變數名稱)
ENV DATABASE_URL=postgresql://aiva:aiva_secure_password@postgres:5432/aiva \
    RABBITMQ_URL=amqp://aiva:aiva_mq_password@rabbitmq:5672/aiva \
    REDIS_URL=redis://:aiva_redis_password@redis:6379/0 \
    NEO4J_URL=bolt://neo4j:password@neo4j:7687 \
    \
    POSTGRES_HOST=postgres \
    POSTGRES_PORT=5432 \
    POSTGRES_DB=aiva \
    POSTGRES_USER=aiva \
    POSTGRES_PASSWORD=aiva_secure_password \
    \
    RABBITMQ_HOST=rabbitmq \
    RABBITMQ_PORT=5672 \
    RABBITMQ_USER=aiva \
    RABBITMQ_PASSWORD=aiva_mq_password \
    RABBITMQ_VHOST=aiva \
    \
    REDIS_HOST=redis \
    REDIS_PORT=6379 \
    \
    NEO4J_HOST=neo4j \
    NEO4J_PORT=7687 \
    NEO4J_USER=neo4j \
    NEO4J_PASSWORD=password \
    \
    LOG_LEVEL=INFO \
    DEBUG=false \
    AUTO_MIGRATE=1 \
    ENVIRONMENT=docker \
    PYTHONPATH=/app:/app/services:/app/services/aiva_common

# 暴露端口
EXPOSE 8000 8001 8002 8080 8443

# 健康檢查
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# 創建簡化的啟動器
RUN echo '#!/usr/bin/env python3\n\
import sys\n\
import os\n\
import asyncio\n\
from pathlib import Path\n\
\n\
# 設置 Python 路徑\n\
sys.path.insert(0, "/app")\n\
sys.path.insert(0, "/app/services")\n\
sys.path.insert(0, "/app/services/aiva_common")\n\
\n\
print("🚀 AIVA Complete Platform Starting...")\n\
print(f"🐍 Python Version: {sys.version}")\n\
print(f"📍 Working Directory: {os.getcwd()}")\n\
print(f"🛣️  Python Path: {sys.path[:3]}")\n\
\n\
# 檢查關鍵模組\n\
modules_to_check = [\n\
    "services.aiva_common",\n\
    "services.core.aiva_core",\n\
    "services.integration.aiva_integration",\n\
    "services.features",\n\
    "services.scan"\n\
]\n\
\n\
print("📦 Checking AIVA modules...")\n\
for module in modules_to_check:\n\
    try:\n\
        __import__(module)\n\
        print(f"   ✅ {module}")\n\
    except ImportError as e:\n\
        print(f"   ❌ {module}: {e}")\n\
\n\
# 啟動基本 API 服務\n\
from fastapi import FastAPI\n\
import uvicorn\n\
\n\
app = FastAPI(title="AIVA Complete Platform", version="2.0")\n\
\n\
@app.get("/health")\n\
async def health():\n\
    return {\n\
        "status": "healthy",\n\
        "service": "aiva-complete",\n\
        "version": "2.0",\n\
        "modules": "services loaded"\n\
    }\n\
\n\
@app.get("/status")\n\
async def status():\n\
    return {\n\
        "platform": "AIVA Complete",\n\
        "services": {\n\
            "aiva_common": "available",\n\
            "core": "available", \n\
            "features": "available",\n\
            "integration": "available",\n\
            "scan": "available"\n\
        },\n\
        "environment": os.getenv("ENVIRONMENT", "docker")\n\
    }\n\
\n\
if __name__ == "__main__":\n\
    print("🌐 Starting AIVA API server...")\n\
    uvicorn.run(\n\
        app,\n\
        host="0.0.0.0",\n\
        port=8000,\n\
        log_level="info"\n\
    )\n\
' > /app/aiva_complete_launcher.py && chmod +x /app/aiva_complete_launcher.py

# 設定入口點
ENTRYPOINT ["/entrypoint.sh"]
CMD ["python", "/app/aiva_complete_launcher.py"]