CP950 編碼兼容性檢查報告
掃描目錄: C:\F\AIVA
檢查時間: 1760562828.7684913
============================================================

檢查統計:
  總文件數: 335
  問題行數: 1133

問題詳情:
文件路徑                                                   行號 問題內容
----------------------------------------------------------------------------------------------------
final_report.py                                        14 print("\n🎯 任務完成狀態:")
final_report.py                                        20 "狀態": "✅ 完成",
final_report.py                                        25 "狀態": "✅ 完成",
final_report.py                                        30 "狀態": "✅ 完成",
final_report.py                                        35 "狀態": "✅ 完成",
final_report.py                                        40 "狀態": "✅ 完成",
final_report.py                                        51 print(f"\n📊 模組連接測試結果:")
final_report.py                                        52 print(f"  ✅ Scan Module: 完全正常 (包括修正的 ScanStartPayload 驗證)")
final_report.py                                        53 print(f"  ✅ Function Module: 基本功能正常")
final_report.py                                        54 print(f"  ⚠️  Core Module: 部分導入路徑需要確認")
final_report.py                                        55 print(f"  ⚠️  Integration Module: 類名和路徑不匹配")
final_report.py                                        56 print(f"  ✅ Message System: 核心功能正常工作")
final_report.py                                        59 print(f"\n🔍 關鍵發現:")
final_report.py                                        72 print(f"\n📋 識別出的待處理項目:")
final_report.py                                        92 priority_emoji = "🔴" if item["優先級"] == "高" else "🟡" if item[...
final_report.py                                        97 print(f"\n✅ 驗證正常的核心功能:")
final_report.py                                       108 print(f"  ✓ {feature}")
temp_generate_stats.py                                 60 print('✅ 統計檔案生成完成')
test_internal_communication.py                          6 1. Core 模組內部組件溝通 (TaskDispatcher ↔ ResultCollector ↔ Message...
test_internal_communication.py                          7 2. Scan 模組內部組件溝通 (Worker ↔ ScanOrchestrator ↔ FingerprintCol...
test_internal_communication.py                          8 3. Function 模組內部組件溝通 (IDOR Worker ↔ SQLi Worker ↔ Enhanced C...
test_internal_communication.py                          9 4. Integration 模組內部組件溝通 (ReportGenerator ↔ ComplianceChecker...
test_internal_communication.py                         27 print(f"🧪 {test_name}")
test_internal_communication.py                         32 print(f"✅ {message}")
test_internal_communication.py                         36 print(f"❌ {message}")
test_internal_communication.py                         40 print(f"ℹ️  {message}")
test_internal_communication.py                         44 print(f"⚠️  {message}")
test_internal_communication.py                        420 print("🚀 AIVA 模組內部溝通實際測試開始")
test_internal_communication.py                        421 print(f"⏰ 測試時間: {datetime.now().strftime('%Y-%m-%d %H:%M:%S'...
test_internal_communication.py                        462 print(f"\n📊 測試統計:")
test_internal_communication.py                        467 print("✅ 🎉 模組內部溝通測試整體成功！")
test_internal_communication.py                        469 print("⚠️ 📊 模組內部溝通基本正常，有改進空間")
test_internal_communication.py                        471 print("❌ ⚠️ 模組內部溝通需要修復問題")
test_message_system.py                                 26 print(f"🧪 {test_name}")
test_message_system.py                                 31 print(f"✅ {message}")
test_message_system.py                                 35 print(f"❌ {message}")
test_message_system.py                                 39 print(f"ℹ️  {message}")
test_message_system.py                                319 print("🚀 AIVA 四大模組訊息傳遞實際測試開始")
test_message_system.py                                320 print(f"⏰ 測試時間: {datetime.now().strftime('%Y-%m-%d %H:%M:%S'...
test_message_system.py                                357 print(f"\n📊 測試統計:")
test_message_system.py                                362 print_success("🎉 所有測試通過！AIVA訊息傳遞系統運行正常！")
test_message_system.py                                365 print_error(f"⚠️  {total-passed} 個測試失敗，需要檢查相關問題")
test_message_system.py                                373 print("\n🛑 測試被用戶中斷")
examples\demo_bio_neuron_master.py                     25 print("🖥️  UI 模式演示 - 需要用戶確認")
examples\demo_bio_neuron_master.py                     48 print("🤖 AI 自主模式演示 - 完全自動")
examples\demo_bio_neuron_master.py                     71 print("💬 對話模式演示 - 自然語言交互")
examples\demo_bio_neuron_master.py                     97 print("🔀 混合模式演示 - 智能切換")
examples\demo_bio_neuron_master.py                    123 print("🧠 BioNeuron Master Controller 演示")
examples\demo_bio_neuron_master.py                    163 print("📊 系統狀態")
examples\demo_bio_neuron_master.py                    170 print("📜 對話歷史 (最近 5 條)")
examples\demo_bio_neuron_master.py                    183 print("✅ 演示完成")
examples\demo_module_import_fix.py                     32 print("\n✅ 導入方式（推薦順序）:")
examples\demo_module_import_fix.py                     43 print("\n🔄 向後兼容性:")
examples\demo_module_import_fix.py                     48 print("\n📊 統計信息:")
examples\demo_module_import_fix.py                     71 print("\n📝 修改的文件:")
examples\demo_module_import_fix.py                     87 print("\n📚 新增文件:")
examples\demo_module_import_fix.py                     93 print("✨ 修復完成！")
examples\demo_storage.py                              263 print("\n📊 數據統計:")
examples\demo_storage.py                              266 print("\n📝 數據庫統計:")
examples\demo_storage.py                              276 print("\n📋 樣本類型分布:")
examples\demo_storage.py                              281 print("\n💾 存儲大小:")
examples\demo_storage.py                              296 logger.info("🚀 AIVA 存儲系統演示\n")
examples\demo_storage.py                              313 logger.info("\n✅ 演示完成!")
examples\demo_storage.py                              314 logger.info("\n💡 提示: 數據已保存到 /workspaces/AIVA/data/")
examples\detection_effectiveness_demo.py               25 print("🔍 SQLi Detection Demo - Multi-Engine Coordination")
examples\detection_effectiveness_demo.py               61 f"  ✅ {engine:12} - Found {result['vulnerabilities_found']} ...
examples\detection_effectiveness_demo.py               78 print(f"  📊 Summary: {unique_vulns} unique vulnerabilities d...
examples\detection_effectiveness_demo.py               80 f"  🛡️  WAF bypass: {'Success' if summary['waf_bypass_succes...
examples\detection_effectiveness_demo.py               82 print(f"  🎯 Accuracy: {summary['detection_accuracy']}")
examples\detection_effectiveness_demo.py               88 print("\n🌐 SSRF Detection Demo - Cloud Service & Bypass Tech...
examples\detection_effectiveness_demo.py              134 print("  ☁️  Cloud Service Detection:")
examples\detection_effectiveness_demo.py              136 status = "🚨" if result.get("vulnerable") else "✅"
examples\detection_effectiveness_demo.py              139 print("  🔍 Internal Service Scan:")
examples\detection_effectiveness_demo.py              141 status = "⚠️" if result.get("accessible") else "🔒"
examples\detection_effectiveness_demo.py              144 print("  🕵️  Bypass Techniques:")
examples\detection_effectiveness_demo.py              146 print(f"    ✅ {technique}: {result}")
examples\detection_effectiveness_demo.py              160 f"  📊 SSRF Summary: {summary['cloud_vulns_found']} cloud + {...
examples\detection_effectiveness_demo.py              167 print("\n⚡ XSS Detection Demo - Framework-Specific & CSP Byp...
examples\detection_effectiveness_demo.py              205 print("  ⚡ Reflected XSS Results:")
examples\detection_effectiveness_demo.py              208 f"    ✅ Payloads: {reflected['successful_payloads']}/{reflec...
examples\detection_effectiveness_demo.py              210 print(f"    📍 Contexts: {', '.join(reflected['contexts'])}")
examples\detection_effectiveness_demo.py              212 print("  🖼️  Framework-Specific Detection:")
examples\detection_effectiveness_demo.py              216 f"    {'🚨' if vulns > 0 else '✅'} {framework}: {vulns} vulne...
examples\detection_effectiveness_demo.py              219 print("  🛡️  CSP Bypass Analysis:")
examples\detection_effectiveness_demo.py              221 print(f"    🔍 Policy: {csp['policy']}")
examples\detection_effectiveness_demo.py              223 f"    ⚡ Bypasses: {csp['bypasses_found']} techniques, {csp['...
examples\detection_effectiveness_demo.py              238 f"  📊 XSS Summary: {summary['total_xss_vulns']} total vulner...
examples\detection_effectiveness_demo.py              245 print("\n🔐 IDOR Detection Demo - AI-Enhanced & Multi-Tenant ...
examples\detection_effectiveness_demo.py              302 print("  🤖 AI-Enhanced Analysis:")
examples\detection_effectiveness_demo.py              305 f"    📈 ML Predictions: {intel['successful_predictions']}/{i...
examples\detection_effectiveness_demo.py              307 print(f"    🧠 Patterns Learned: {len(intel['id_patterns_lear...
examples\detection_effectiveness_demo.py              309 print("  🌐 API Comprehensive Testing:")
examples\detection_effectiveness_demo.py              317 f"    {'⚠️' if result['vulnerable'] > 0 else '✅'} {api_type}...
examples\detection_effectiveness_demo.py              320 print("  🏢 Multi-Tenant Security:")
examples\detection_effectiveness_demo.py              322 status = "🚨" if result.get("breached", 0) > 0 else "✅"
examples\detection_effectiveness_demo.py              338 f"  📊 IDOR Summary: {summary['total_idor_vulns']} vulnerabil...
examples\detection_effectiveness_demo.py              346 print("🚀 AIVA Enhanced Function Module Detection Demo")
examples\detection_effectiveness_demo.py              348 print(f"⏰ Started at: {datetime.now().strftime('%Y-%m-%d %H:...
examples\detection_effectiveness_demo.py              364 print("📈 COMPREHENSIVE DETECTION RESULTS SUMMARY")
examples\detection_effectiveness_demo.py              375 print(f"🎯 Total Vulnerabilities Detected: {total_vulns}")
examples\detection_effectiveness_demo.py              376 print("📊 Module Breakdown:")
examples\detection_effectiveness_demo.py              386 print("\n🚀 Performance Metrics:")
examples\detection_effectiveness_demo.py              387 print(f"   ⏱️  Total Scan Time: {duration:.2f} seconds")
examples\detection_effectiveness_demo.py              388 print(f"   ⚡ Detection Rate: {total_vulns / duration:.1f} vu...
examples\detection_effectiveness_demo.py              389 print("   🎯 Overall Accuracy: 91.5% (weighted average)")
examples\detection_effectiveness_demo.py              390 print("   📉 False Positive Reduction: 35%")
examples\detection_effectiveness_demo.py              392 print("\n✨ Enhancement Impact:")
examples\detection_effectiveness_demo.py              393 print("   🔧 Multi-Engine Coordination: 3x faster SQLi detect...
examples\detection_effectiveness_demo.py              394 print("   ☁️  Cloud-Native Detection: 40% more SSRF vulnerab...
examples\detection_effectiveness_demo.py              395 print("   🖼️  Framework-Specific XSS: 25% accuracy improveme...
examples\detection_effectiveness_demo.py              396 print("   🤖 AI-Enhanced IDOR: 60% prediction accuracy")
examples\detection_effectiveness_demo.py              398 print("\n🛡️  Security Value:")
examples\detection_effectiveness_demo.py              401 print(f"   🚨 Critical Severity: {critical_count} vulnerabili...
examples\detection_effectiveness_demo.py              402 print(f"   ⚠️  High Severity: {high_count} vulnerabilities")
examples\detection_effectiveness_demo.py              403 print("   💰 Risk Mitigation Value: ~$2.5M in potential breac...
examples\detection_effectiveness_demo.py              429 print("\n💾 Results saved to: _out/detection_demo_results.jso...
examples\detection_effectiveness_demo.py              430 print(f"🏁 Demo completed at: {datetime.now().strftime('%Y-%m...
examples\init_storage.py                               39 logger.info("✅ Storage initialized successfully!")
examples\init_storage.py                               42 print("\n📁 Data Directory Structure:")
examples\init_storage.py                               48 exists = "✅" if path.exists() else "❌"
examples\init_storage.py                               51 exists = "✅" if paths.exists() else "❌"
examples\init_storage.py                               56 print("\n📊 Storage Statistics:")
examples\start_ui_auto.py                              19 print("🚀 啟動 AIVA UI 面板 (自動端口選擇)")
examples\start_ui_auto.py                              30 print(f"❌ 匯入錯誤: {e}")
examples\start_ui_auto.py                              35 print("\n👋 使用者中斷，正在關閉伺服器...")
examples\start_ui_auto.py                              38 print(f"❌ 啟動失敗: {e}")
tests\test_ai_integration.py                           27 print("🧠 測試 BioNeuronRAGAgent...")
tests\test_ai_integration.py                           48 f"  ✅ BioNeuronRAGAgent - 知識庫: {result['details']['knowledge...
tests\test_ai_integration.py                           50 print(f"  ✅ 內建工具: {result['details']['tools_count']} 個")
tests\test_ai_integration.py                           54 print(f"  ❌ BioNeuronRAGAgent 測試失敗: {str(e)}")
tests\test_ai_integration.py                           60 print("🎮 測試統一 AI 控制器...")
tests\test_ai_integration.py                           79 print("  ✅ UnifiedAIController 初始化成功")
tests\test_ai_integration.py                           83 print(f"  ❌ UnifiedAIController 測試失敗: {str(e)}")
tests\test_ai_integration.py                           89 print("💬 測試自然語言生成系統...")
tests\test_ai_integration.py                          116 print(f"  ✅ NLG 系統 - 生成 {result['details']['response_length'...
tests\test_ai_integration.py                          117 print(f"  📝 報告預覽: {result['details']['preview']}")
tests\test_ai_integration.py                          121 print(f"  ❌ NLG 系統測試失敗: {str(e)}")
tests\test_ai_integration.py                          127 print("🌐 測試多語言協調器...")
tests\test_ai_integration.py                          150 print(f"  ✅ MultiLanguageAICoordinator 支援 {len(language_modu...
tests\test_ai_integration.py                          152 f"  🗣️ 支援語言: {', '.join([mod.language for mod in language_mo...
tests\test_ai_integration.py                          157 print(f"  ❌ 多語言協調器測試失敗: {str(e)}")
tests\test_ai_integration.py                          163 print("🔗 測試 AI 組件整合...")
tests\test_ai_integration.py                          204 print(f"  ✅ 所有 {len(components)} 個 AI 組件整合成功")
tests\test_ai_integration.py                          207 f"  ⚠️ {result['details']['initialized_components']}/{len(co...
tests\test_ai_integration.py                          213 print(f"  ❌ AI 組件整合測試失敗: {str(e)}")
tests\test_ai_integration.py                          219 print("🤖 測試 AIVA 自主性...")
tests\test_ai_integration.py                          242 print(f"  ✅ AIVA 自主性得分: {result['details']['autonomy_score']...
tests\test_ai_integration.py                          243 print(f"  🆚 相對 GPT-4 優勢: {result['details']['vs_gpt4_advanta...
tests\test_ai_integration.py                          244 print(f"  🎯 結論: {result['details']['conclusion']}")
tests\test_ai_integration.py                          249 print(f"  ❌ AIVA 自主性測試失敗: {str(e)}")
tests\test_ai_integration.py                          255 print("🚀 AIVA AI 整合測試系統 - 簡化版")
tests\test_ai_integration.py                          273 print(f"\n🧪 執行測試: {test_name}")
tests\test_ai_integration.py                          279 print(f"❌ {test_name} 執行失敗: {str(e)}")
tests\test_ai_integration.py                          287 print("\n📊 測試報告")
tests\test_ai_integration.py                          289 print(f"📋 總測試數: {len(results)}")
tests\test_ai_integration.py                          290 print(f"✅ 成功測試: {len(successful_tests)}")
tests\test_ai_integration.py                          291 print(f"❌ 失敗測試: {len(failed_tests)}")
tests\test_ai_integration.py                          292 print(f"📈 成功率: {len(successful_tests) / len(results) * 100:....
tests\test_ai_integration.py                          293 print(f"⏱️ 總執行時間: {total_time:.2f}秒")
tests\test_ai_integration.py                          296 print("\n📝 詳細結果:")
tests\test_ai_integration.py                          298 status = "✅" if result.get("success", False) else "❌"
tests\test_ai_integration.py                          304 print("\n💡 建議:")
tests\test_ai_integration.py                          306 print("  🎉 所有測試都通過了！AIVA AI 整合系統運作良好。")
tests\test_ai_integration.py                          307 print("  🚀 可以進行下一階段的 RAG 系統增強。")
tests\test_ai_integration.py                          309 print("  🔧 建議檢查失敗的組件並修復相關問題。")
tests\test_ai_integration.py                          310 print("  📚 檢查相關依賴項和配置檔案。")
tests\test_ai_integration.py                          332 print(f"\n📄 詳細報告已保存至: {report_file}")
tests\test_architecture_improvements.py                47 logger.info(f"✓ Core Monitor Interval: {settings.core_monito...
tests\test_architecture_improvements.py                48 logger.info(f"✓ Enable Strategy Generator: {settings.enable_...
tests\test_architecture_improvements.py                49 logger.info(f"✓ RabbitMQ URL: {settings.rabbitmq_url}")
tests\test_architecture_improvements.py                52 logger.info("✅ 配置外部化測試通過\n")
tests\test_architecture_improvements.py                86 logger.info("\n✅ SQLi 引擎配置動態化測試通過\n")
tests\test_architecture_improvements.py               113 logger.info("✓ ScanResultProcessor 初始化成功")
tests\test_architecture_improvements.py               114 logger.info(f"✓ 處理器類型: {type(processor).__name__}")
tests\test_architecture_improvements.py               115 logger.info("✓ 可用方法:")
tests\test_architecture_improvements.py               125 logger.info("\n✅ 七階段處理器結構測試通過\n")
tests\test_architecture_improvements.py               162 logger.info("✓ 創建測試掃描數據:")
tests\test_architecture_improvements.py               189 logger.info("✓ 階段 1 完成")
tests\test_architecture_improvements.py               193 logger.info(f"✓ 階段 2 完成 - 發現風險點: {attack_surface}")
tests\test_architecture_improvements.py               197 logger.info(f"✓ 階段 3 完成 - 策略類型: {base_strategy.get('strategy...
tests\test_architecture_improvements.py               199 logger.info("\n✅ 掃描處理流程測試通過 (前 3 階段)\n")
tests\test_architecture_improvements.py               202 logger.error(f"❌ 測試失敗: {e}")
tests\test_architecture_improvements.py               209 logger.info("📊 測試摘要")
tests\test_architecture_improvements.py               211 logger.info("✅ 所有測試通過!")
tests\test_architecture_improvements.py               214 logger.info("  1. ✅ 配置外部化 - 環境變數支援")
tests\test_architecture_improvements.py               215 logger.info("  2. ✅ SQLi 引擎配置動態化 - 4 種策略")
tests\test_architecture_improvements.py               216 logger.info("  3. ✅ 七階段處理器 - 模組化架構")
tests\test_architecture_improvements.py               217 logger.info("  4. ✅ 掃描處理流程 - 前 3 階段測試")
tests\test_architecture_improvements.py               219 logger.info("🎯 系統已準備就緒,可以開始實際測試!")
tests\test_architecture_improvements.py               225 logger.info("\n🚀 開始 AIVA 架構改進測試...\n")
tests\test_architecture_improvements.py               244 logger.error(f"\n❌ 測試失敗: {e}", exc_info=True)
tests\test_complete_system.py                          16 print("🚀 AIVA 完整系統測試")
tests\test_complete_system.py                          18 print(f"📅 測試時間: {datetime.now().strftime('%Y-%m-%d %H:%M:%S'...
tests\test_complete_system.py                          56 print("📦 測試 1: Docker 環境檢查")
tests\test_complete_system.py                          76 print(f"  ✅ {service.upper()} 正在運行")
tests\test_complete_system.py                          80 print("✅ Docker 環境測試通過\n")
tests\test_complete_system.py                          84 print(f"⚠️  缺少服務: {missing}\n")
tests\test_complete_system.py                          88 print(f"❌ Docker 測試失敗: {e}\n")
tests\test_complete_system.py                          94 print("🐍 測試 2: Python 環境與依賴")
tests\test_complete_system.py                         100 print(f"  ✓ Python 版本: {sys.version.split()[0]}")
tests\test_complete_system.py                         116 print(f"  ✅ {package}")
tests\test_complete_system.py                         119 print(f"  ❌ {package} 未安裝")
tests\test_complete_system.py                         123 print("✅ Python 環境測試通過\n")
tests\test_complete_system.py                         126 print(f"⚠️  缺少套件: {missing_packages}\n")
tests\test_complete_system.py                         130 print(f"❌ Python 測試失敗: {e}\n")
tests\test_complete_system.py                         136 print("⚙️  測試 3: 配置系統")
tests\test_complete_system.py                         143 print(f"  ✓ Core Monitor Interval: {settings.core_monitor_in...
tests\test_complete_system.py                         144 print(f"  ✓ Strategy Generator: {settings.enable_strategy_ge...
tests\test_complete_system.py                         145 print(f"  ✓ RabbitMQ URL: {settings.rabbitmq_url}")
tests\test_complete_system.py                         146 print(f"  ✓ PostgreSQL DSN: {settings.postgres_dsn[:50]}..."...
tests\test_complete_system.py                         151 print("✅ 配置系統測試通過\n")
tests\test_complete_system.py                         155 print(f"❌ 配置測試失敗: {e}\n")
tests\test_complete_system.py                         161 print("🧠 測試 4: 核心模組")
tests\test_complete_system.py                         167 print("  ✅ ScanResultProcessor 已導入")
tests\test_complete_system.py                         168 print("  ✅ InitialAttackSurface 已導入")
tests\test_complete_system.py                         169 print("  ✅ ScanModuleInterface 已導入")
tests\test_complete_system.py                         186 print(f"  ✓ 七階段處理器: {len(required_methods)} 個方法完整")
tests\test_complete_system.py                         189 print("✅ 核心模組測試通過\n")
tests\test_complete_system.py                         193 print(f"❌ 核心模組測試失敗: {e}\n")
tests\test_complete_system.py                         199 print("🔍 測試 5: 功能模組 - SQLi")
tests\test_complete_system.py                         213 f"  ✓ {strategy}: {config.timeout_seconds}s, "
tests\test_complete_system.py                         224 print("✅ SQLi 模組測試通過\n")
tests\test_complete_system.py                         228 print(f"❌ SQLi 模組測試失敗: {e}\n")
tests\test_complete_system.py                         234 print("🔗 測試 6: 整合層")
tests\test_complete_system.py                         247 print("  ✅ HTTPException 錯誤處理已實作")
tests\test_complete_system.py                         249 print("✅ 整合層測試通過\n")
tests\test_complete_system.py                         251 print("  ⚠️  HTTPException 未找到")
tests\test_complete_system.py                         253 print("⚠️  整合層測試跳過\n")
tests\test_complete_system.py                         257 print(f"❌ 整合層測試失敗: {e}\n")
tests\test_complete_system.py                         263 print("🤖 測試 7: AI 系統")
tests\test_complete_system.py                         272 print("  ✅ BioNeuronRAGAgent")
tests\test_complete_system.py                         274 print(f"  ⚠️  BioNeuronRAGAgent: {str(e)[:50]}")
tests\test_complete_system.py                         278 print("  ✅ UnifiedAIController")
tests\test_complete_system.py                         280 print(f"  ⚠️  UnifiedAIController: {str(e)[:50]}")
tests\test_complete_system.py                         284 print(f"✅ AI 系統測試通過 ({len(ai_components)} 個組件)\n")
tests\test_complete_system.py                         287 print("⚠️  AI 系統測試跳過\n")
tests\test_complete_system.py                         291 print(f"⚠️  AI 測試跳過: {e}\n")
tests\test_complete_system.py                         297 print("🔎 測試 8: 掃描引擎")
tests\test_complete_system.py                         304 print("  ✅ ScanOrchestrator 初始化成功")
tests\test_complete_system.py                         305 print("  ✓ 已載入靜態解析器")
tests\test_complete_system.py                         306 print("  ✓ 已載入指紋收集器")
tests\test_complete_system.py                         307 print("  ✓ 已載入敏感資訊檢測器")
tests\test_complete_system.py                         308 print("  ✓ 已載入 JavaScript 分析器")
tests\test_complete_system.py                         311 print("✅ 掃描引擎測試通過\n")
tests\test_complete_system.py                         315 print(f"❌ 掃描引擎測試失敗: {e}\n")
tests\test_complete_system.py                         322 print("📊 完整系統測試報告")
tests\test_complete_system.py                         325 print(f"\n📋 總測試數: {results['summary']['total']}")
tests\test_complete_system.py                         326 print(f"✅ 通過: {results['summary']['passed']}")
tests\test_complete_system.py                         327 print(f"❌ 失敗: {results['summary']['failed']}")
tests\test_complete_system.py                         328 print(f"⏭️  跳過: {results['summary']['skipped']}")
tests\test_complete_system.py                         332 print(f"📈 成功率: {success_rate:.1f}%")
tests\test_complete_system.py                         334 print("\n📝 詳細結果:")
tests\test_complete_system.py                         336 status_icon = {"PASS": "✅", "FAIL": "❌", "SKIP": "⏭️"}.get(t...
tests\test_complete_system.py                         348 print(f"\n💾 詳細報告已保存至: {output_file}")
tests\test_complete_system.py                         353 print("🎉 所有測試通過! AIVA 系統運行正常!")
tests\test_complete_system.py                         355 print("✅ 大部分測試通過! 系統基本可用。")
tests\test_complete_system.py                         357 print("⚠️  部分測試失敗，請檢查詳細報告。")
tests\test_improvements_simple.py                      17 print("🚀 AIVA 架構改進測試")
tests\test_improvements_simple.py                      29 print(f"✓ Core Monitor Interval: {settings.core_monitor_inte...
tests\test_improvements_simple.py                      30 print(f"✓ Enable Strategy Generator: {settings.enable_strate...
tests\test_improvements_simple.py                      35 print("✅ 測試 1 通過 - 配置外部化正常工作")
tests\test_improvements_simple.py                      39 print(f"❌ 測試 1 失敗: {e}")
tests\test_improvements_simple.py                      73 print("\n✅ 測試 2 通過 - SQLi 配置動態化正常工作")
tests\test_improvements_simple.py                      77 print(f"❌ 測試 2 失敗: {e}")
tests\test_improvements_simple.py                      91 print("✓ Tenacity 函式庫已安裝")
tests\test_improvements_simple.py                     105 print("✓ 重試裝飾器正常工作")
tests\test_improvements_simple.py                     106 print("✅ 測試 3 通過 - 重試機制可用")
tests\test_improvements_simple.py                     110 print(f"❌ 測試 3 失敗: {e}")
tests\test_improvements_simple.py                     121 print("✓ ScanResultProcessor 類別已導入")
tests\test_improvements_simple.py                     122 print("✓ 可用方法:")
tests\test_improvements_simple.py                     139 print("✅ 測試 4 通過 - 七階段處理器結構完整")
tests\test_improvements_simple.py                     143 print(f"❌ 測試 4 失敗: {e}")
tests\test_improvements_simple.py                     160 print("✓ HTTPException 已導入")
tests\test_improvements_simple.py                     162 print("⚠️  HTTPException 未導入 (可能使用其他錯誤處理)")
tests\test_improvements_simple.py                     165 print("✓ 使用 HTTPException 拋出錯誤")
tests\test_improvements_simple.py                     166 print("✅ 測試 5 通過 - Integration API 錯誤處理改進")
tests\test_improvements_simple.py                     168 print("⚠️  未找到 HTTPException 使用 (可能使用其他方式)")
tests\test_improvements_simple.py                     169 print("✅ 測試 5 通過 (部分)")
tests\test_improvements_simple.py                     174 print(f"❌ 測試 5 失敗: {e}")
tests\test_improvements_simple.py                     180 print("📊 測試摘要")
tests\test_improvements_simple.py                     182 print("✅ 所有核心測試通過!")
tests\test_improvements_simple.py                     185 print("  1. ✅ 配置外部化 - 環境變數支援")
tests\test_improvements_simple.py                     186 print("  2. ✅ SQLi 引擎配置動態化 - 4 種策略")
tests\test_improvements_simple.py                     187 print("  3. ✅ 重試機制 - Tenacity 整合")
tests\test_improvements_simple.py                     188 print("  4. ✅ 七階段處理器 - 模組化架構")
tests\test_improvements_simple.py                     189 print("  5. ✅ Integration API - 錯誤處理改進")
tests\test_improvements_simple.py                     191 print("🎯 系統架構改進已完成,準備就緒!")
tests\test_integration.py                              16 print("🧪 測試組件導入...")
tests\test_integration.py                              20 print("✅ BioNeuron Master Controller 導入成功")
tests\test_integration.py                              22 print(f"❌ BioNeuron Master Controller 導入失敗: {e}")
tests\test_integration.py                              26 print("✅ 存儲管理器導入成功")
tests\test_integration.py                              28 print(f"❌ 存儲管理器導入失敗: {e}")
tests\test_integration.py                              32 print("✅ BioNeuronRAGAgent 導入成功")
tests\test_integration.py                              34 print(f"❌ BioNeuronRAGAgent 導入失敗: {e}")
tests\test_integration.py                              38 print("✅ 經驗管理器導入成功")
tests\test_integration.py                              40 print(f"❌ 經驗管理器導入失敗: {e}")
tests\test_integration.py                              44 print("\n🔧 測試基本功能...")
tests\test_integration.py                              54 print("✅ BioNeuron Master Controller 創建成功")
tests\test_integration.py                              58 print(f"✅ 模式切換成功，當前模式: {controller.current_mode}")
tests\test_integration.py                              61 print(f"❌ 控制器測試失敗: {e}")
tests\test_integration.py                              72 print("✅ 存儲管理器創建成功")
tests\test_integration.py                              75 print(f"❌ 存儲管理器測試失敗: {e}")
tests\test_integration.py                              80 print("🚀 AIVA-1 整合驗證測試")
tests\test_integration.py                              87 print("✨ 測試完成")
tests\test_module_imports.py                           21 print("🧪 測試 1: 從 schemas.py 直接導入...")
tests\test_module_imports.py                           43 print("  ✅ 所有核心類成功從 schemas.py 導入")
tests\test_module_imports.py                           53 print("  ✅ 所有類驗證通過")
tests\test_module_imports.py                           56 print(f"  ❌ 導入失敗: {e}")
tests\test_module_imports.py                           62 print("\n🧪 測試 2: models.py 向後兼容性（重新導出）...")
tests\test_module_imports.py                           80 print("  ✅ 成功從 models.py 導入（通過重新導出）")
tests\test_module_imports.py                           86 print("  ✅ 確認類來自 schemas.py（非重複定義）")
tests\test_module_imports.py                           89 print(f"  ❌ 導入失敗: {e}")
tests\test_module_imports.py                           92 print("  ❌ 類不是來自 schemas.py（可能存在重複定義）")
tests\test_module_imports.py                           98 print("\n🧪 測試 3: 從 aiva_common 包導入...")
tests\test_module_imports.py                          119 print("  ✅ 成功從 aiva_common 包導入")
tests\test_module_imports.py                          124 print("  ✅ 枚舉和類都可用")
tests\test_module_imports.py                          127 print(f"  ❌ 導入失敗: {e}")
tests\test_module_imports.py                          133 print("\n🧪 測試 4: 從服務模組導入...")
tests\test_module_imports.py                          140 print("  ✅ services.scan 導入成功")
tests\test_module_imports.py                          143 print(f"  ❌ services.scan 導入失敗: {e}")
tests\test_module_imports.py                          149 print("  ✅ services.core.aiva_core 導入成功")
tests\test_module_imports.py                          152 print(f"  ❌ services.core.aiva_core 導入失敗: {e}")
tests\test_module_imports.py                          158 print("  ✅ services.function 導入成功")
tests\test_module_imports.py                          161 print(f"  ❌ services.function 導入失敗: {e}")
tests\test_module_imports.py                          169 print("\n🧪 測試 5: 檢查循環導入...")
tests\test_module_imports.py                          176 print("  ✅ 沒有檢測到循環導入")
tests\test_module_imports.py                          179 print(f"  ❌ 可能存在循環導入: {e}")
tests\test_module_imports.py                          185 print("\n🧪 測試 6: 類的一致性檢查...")
tests\test_module_imports.py                          193 print("  ✅ MessageHeader 在所有導入位置保持一致")
tests\test_module_imports.py                          200 print("  ✅ CVSSv3Metrics 在所有導入位置保持一致")
tests\test_module_imports.py                          204 print(f"  ❌ 導入失敗: {e}")
tests\test_module_imports.py                          207 print("  ❌ 類在不同位置不一致（可能存在重複定義）")
tests\test_module_imports.py                          214 print("🚀 AIVA 模組導入修復測試")
tests\test_module_imports.py                          229 print("📊 測試結果總結")
tests\test_module_imports.py                          236 status = "✅ PASS" if result else "❌ FAIL"
tests\test_module_imports.py                          244 print("\n✨ 所有測試通過！模組導入問題已修復。")
tests\test_module_imports.py                          247 print(f"\n⚠️  {total - passed} 個測試失敗。")
tests\verify_ai_working.py                             14 print("🚀 AIVA AI 功能驗證")
tests\verify_ai_working.py                             18 print("\n📦 步驟 1: 檢查依賴...")
tests\verify_ai_working.py                             21 print(f"   ✅ pydantic 已安裝: {pydantic.__version__}")
tests\verify_ai_working.py                             24 print("   ❌ pydantic 未安裝")
tests\verify_ai_working.py                             29 print("\n⚠️  請先安裝依賴再繼續測試")
tests\verify_ai_working.py                             33 print("\n🧪 步驟 2: 測試核心類導入...")
tests\verify_ai_working.py                             45 print("   ✅ 所有核心類導入成功")
tests\verify_ai_working.py                             47 print(f"   ❌ 導入失敗: {e}")
tests\verify_ai_working.py                             51 print("\n🧪 步驟 3: 測試 MessageHeader 創建...")
tests\verify_ai_working.py                             60 print(f"   ✅ MessageHeader 創建成功")
tests\verify_ai_working.py                             65 print(f"   ❌ 創建失敗: {e}")
tests\verify_ai_working.py                             69 print("\n🧪 步驟 4: 測試 AivaMessage 創建...")
tests\verify_ai_working.py                             78 print(f"   ✅ AivaMessage 創建成功")
tests\verify_ai_working.py                             82 print(f"   ❌ 創建失敗: {e}")
tests\verify_ai_working.py                             86 print("\n🧪 步驟 5: 測試 CVSS v3.1 評分...")
tests\verify_ai_working.py                             98 print(f"   ✅ CVSSv3Metrics 創建成功")
tests\verify_ai_working.py                            109 print(f"   ❌ 創建失敗: {e}")
tests\verify_ai_working.py                            113 print("\n🧪 步驟 6: 測試安全標準類...")
tests\verify_ai_working.py                            120 print(f"   ✅ CVEReference 創建成功: {cve.cve_id}")
tests\verify_ai_working.py                            127 print(f"   ✅ CWEReference 創建成功: {cwe.cwe_id}")
tests\verify_ai_working.py                            134 print(f"   ✅ CAPECReference 創建成功: {capec.capec_id}")
tests\verify_ai_working.py                            137 print(f"   ❌ 創建失敗: {e}")
tests\verify_ai_working.py                            141 print("\n🧪 步驟 7: 測試認證和限流配置...")
tests\verify_ai_working.py                            147 print(f"   ✅ Authentication 創建成功: {auth.method}")
tests\verify_ai_working.py                            153 print(f"   ✅ RateLimit 創建成功: {rate_limit.requests_per_second...
tests\verify_ai_working.py                            156 print(f"   ❌ 創建失敗: {e}")
tests\verify_ai_working.py                            160 print("\n🧪 步驟 8: 驗證類的一致性...")
tests\verify_ai_working.py                            166 print("   ✅ models.py 和 schemas.py 中的類完全一致（同一對象）")
tests\verify_ai_working.py                            168 print("   ⚠️  models.py 和 schemas.py 中的類不同（可能有重複定義）")
tests\verify_ai_working.py                            171 print(f"   ❌ 驗證失敗: {e}")
tests\verify_ai_working.py                            175 print("✨ AI 功能驗證完成！")
tests\verify_ai_working.py                            178 print("  ✅ 模組導入正常")
tests\verify_ai_working.py                            179 print("  ✅ 消息協議可用")
tests\verify_ai_working.py                            180 print("  ✅ CVSS 評分系統可用")
tests\verify_ai_working.py                            181 print("  ✅ 安全標準（CVE/CWE/CAPEC）可用")
tests\verify_ai_working.py                            182 print("  ✅ 認證和限流配置可用")
tests\verify_ai_working.py                            183 print("\n🎉 AIVA AI 系統已就緒！")
tools\analyze_aiva_common_status.py                    29 print("1️⃣  目前結構分析")
tools\analyze_aiva_common_status.py                    44 print(f"\n📁 {folder}")
tools\analyze_aiva_common_status.py                    55 print("2️⃣  導入路徑相容性檢查")
tools\analyze_aiva_common_status.py                    86 print(f"\n🔍 測試類別: {category}")
tools\analyze_aiva_common_status.py                    90 print(f"   ✅ {import_stmt}")
tools\analyze_aiva_common_status.py                    92 results["details"].append({"test": import_stmt, "status": "✅...
tools\analyze_aiva_common_status.py                    94 print(f"   ❌ {import_stmt}")
tools\analyze_aiva_common_status.py                    97 results["details"].append({"test": import_stmt, "status": f"...
tools\analyze_aiva_common_status.py                    99 print(f"\n📊 測試結果: {results['passed']} 通過, {results['failed']...
tools\analyze_aiva_common_status.py                   105 print("3️⃣  實際使用情況分析")
tools\analyze_aiva_common_status.py                   143 print(f"\n📦 {service}")
tools\analyze_aiva_common_status.py                   152 print("\n⚠️  未在其他服務中找到 aiva_common 的使用")
tools\analyze_aiva_common_status.py                   158 print("4️⃣  舊檔案狀態檢查")
tools\analyze_aiva_common_status.py                   173 print(f"⚠️  {old_file:20s} 仍然存在 ({size:>10,} bytes)")
tools\analyze_aiva_common_status.py                   175 print(f"✅ {old_file:20s} 已刪除")
tools\analyze_aiva_common_status.py                   180 print(f"\n⚠️  發現 {len(backup_files)} 個備份檔案:")
tools\analyze_aiva_common_status.py                   184 print("\n✅ 沒有備份檔案")
tools\analyze_aiva_common_status.py                   190 print("5️⃣  潛在問題識別")
tools\analyze_aiva_common_status.py                   196 print("\n🔍 檢查循環導入風險...")
tools\analyze_aiva_common_status.py                   205 print("   ⚠️  schemas 中導入了 enums")
tools\analyze_aiva_common_status.py                   207 print("   ✅ schemas 沒有導入 enums")
tools\analyze_aiva_common_status.py                   210 print("\n🔍 檢查 __all__ 列表...")
tools\analyze_aiva_common_status.py                   221 print(f"   ⚠️  {module}/__init__.py 缺少 __all__")
tools\analyze_aiva_common_status.py                   223 print(f"   ✅ {module}/__init__.py 有 __all__")
tools\analyze_aiva_common_status.py                   234 print(f"\n⚠️  發現 {len(issues)} 個潛在問題:")
tools\analyze_aiva_common_status.py                   236 severity_icon = {"HIGH": "🔴", "MEDIUM": "🟡", "LOW": "🟢"}
tools\analyze_aiva_common_status.py                   240 print("\n✅ 沒有發現潛在問題")
tools\analyze_aiva_common_status.py                   246 print("6️⃣  未來需求評估")
tools\analyze_aiva_common_status.py                   298 priority_icon = {"HIGH": "🔴", "MEDIUM": "🟡", "LOW": "🟢"}
tools\analyze_aiva_common_status.py                   306 print("7️⃣  生成詳細報告")
tools\analyze_aiva_common_status.py                   328 print(f"\n✅ 詳細報告已儲存至: {report_file}")
tools\analyze_aiva_common_status.py                   334 print("📋 分析總結")
tools\analyze_aiva_common_status.py                   338 ✅ 結構完整性: {'通過' if len(structure['schemas/']['files']) > 0 an...
tools\analyze_aiva_common_status.py                   339 {'✅' if results['failed'] == 0 else '⚠️'} 導入測試: {results['pa...
tools\analyze_aiva_common_status.py                   340 {'⚠️' if old_files_found else '✅'} 舊檔案: {len(old_files_found...
tools\analyze_aiva_common_status.py                   341 {'⚠️' if issues else '✅'} 潛在問題: {len(issues)} 個
tools\analyze_aiva_common_status.py                   342 🎯 建議行動: {len([r for r in recommendations if r['priority'] ==...
tools\analyze_codebase.py                             935 print("📊 階段 1: 分析 Python 程式碼")
tools\analyze_codebase.py                             944 print("\n📊 階段 2: 分析多語言程式碼 (Go/Rust/TypeScript/JavaScript)")
tools\analyze_codebase.py                             953 print("✅ Python 分析完成！摘要:")
tools\analyze_codebase.py                             972 print("✅ 多語言分析完成！摘要:")
tools\analyze_codebase.py                             988 print("📈 專案總計:")
tools\analyze_core_modules.py                          89 print(f"❌ 核心模組路徑不存在: {core_path.absolute()}")
tools\analyze_core_modules.py                          98 print(f"⚠️  分析文件失敗: {py_file} - {result['error']}")
tools\analyze_core_modules.py                         113 print('🔍 按代碼規模排序 (前10個最大文件):')
tools\analyze_core_modules.py                         119 print('\n🧠 AI 相關核心模組分析:')
tools\analyze_core_modules.py                         123 print(f'📁 {result["file"]}')
tools\analyze_core_modules.py                         129 print('⚡ 性能關鍵模組分析:')
tools\analyze_core_modules.py                         134 print(f'📁 {result["file"]}')
tools\analyze_core_modules.py                         139 print('📊 複雜度統計:')
tools\analyze_core_modules.py                         151 print('\n🚨 需要重構的高複雜度文件:')
tools\analyze_core_modules.py                         156 print('\n🔗 依賴關係分析:')
tools\analyze_core_modules.py                         250 print('\n📝 詳細分析結果已儲存到: _out/core_module_analysis_detailed.js...
tools\analyze_cross_language_ai.py                     14 print("\n🤖 步驟 1: 分析當前 AI Schemas")
tools\analyze_cross_language_ai.py                     19 print("❌ ai.py 檔案不存在")
tools\analyze_cross_language_ai.py                     25 print(f"📄 ai.py 中的類別 ({len(ai_classes)} 個):")
tools\analyze_cross_language_ai.py                     44 print("\n🌐 發現多語言相關內容:")
tools\analyze_cross_language_ai.py                     48 print("\n⚠️  未發現多語言相關內容")
tools\analyze_cross_language_ai.py                     55 print("\n🌐 步驟 2: 跨語言支援需求分析")
tools\analyze_cross_language_ai.py                    108 print(f"\n📂 {category}:")
tools\analyze_cross_language_ai.py                    119 print("\n📝 步驟 3: 建議的多語言 Schema 擴展")
tools\analyze_cross_language_ai.py                    144 print(f"\n🔧 {category}:")
tools\analyze_cross_language_ai.py                    153 print("\n🏷️  步驟 4: 檢查 Enums 的多語言支援")
tools\analyze_cross_language_ai.py                    169 print(f"📊 當前 Enums 總計: {len(all_enums)} 個")
tools\analyze_cross_language_ai.py                    181 print("🌐 語言相關的枚舉:")
tools\analyze_cross_language_ai.py                    185 print("⚠️  缺少語言相關的枚舉")
tools\analyze_cross_language_ai.py                    192 print("\n🧠 步驟 5: AI 模組完備性檢查")
tools\analyze_cross_language_ai.py                    205 print(f"\n🎯 {category}:")
tools\analyze_cross_language_ai.py                    222 print(f"\n✅ 已涵蓋的能力 ({len(covered_capabilities)} 項):")
tools\analyze_cross_language_ai.py                    235 print("🌐 AIVA Common 跨語言功能和 AI 模組完備性分析")
tools\analyze_cross_language_ai.py                    260 print("\n🚀 步驟 6: 增強建議")
tools\analyze_cross_language_ai.py                    285 print(f"\n📋 {category}:")
tools\compare_schemas.py                               19 print(f"❌ {old_path} 不存在")
tools\compare_schemas.py                               23 print(f"❌ {new_path} 不存在")
tools\compare_schemas.py                               32 print(f'\n📊 {name} 分析:')
tools\compare_schemas.py                               43 print(f'\n  🔍 比對結果:')
tools\compare_schemas.py                               47 print(f'    - ⚠️  僅在舊檔案: {len(only_in_old)} 個')
tools\compare_schemas.py                               51 print(f'    - ✅ 舊檔案的所有類別已遷移')
tools\compare_schemas.py                               54 print(f'    - 📝 新增類別: {len(only_in_new)} 個')
tools\compare_schemas.py                               88 print(f'\n  📄 {py_file.name}: {len(classes)} 個類別')
tools\compare_schemas.py                               90 print(f'\n📊 總計:')
tools\compare_schemas.py                               96 print(f'\n⚠️  尚未遷移的類別 ({len(missing)} 個):')
tools\compare_schemas.py                              100 print(f'\n✅ schemas.py 的所有類別已遷移')
tools\comprehensive_migration_analysis.py              18 print("🔍 AIVA COMMON 遷移完整性全面分析")
tools\comprehensive_migration_analysis.py              32 print("\n📄 步驟 1: 分析舊檔案內容")
tools\comprehensive_migration_analysis.py              52 print(f"✅ {name:15s}: {len(old_data[name]['classes']):3d} 類別...
tools\comprehensive_migration_analysis.py              54 print(f"❌ {name:15s}: 讀取失敗 - {e}")
tools\comprehensive_migration_analysis.py              57 print(f"⚠️  {name:15s}: 檔案不存在")
tools\comprehensive_migration_analysis.py              71 print(f"\n📊 舊檔案總計:")
tools\comprehensive_migration_analysis.py              85 print("\n📁 步驟 2: 分析新模組結構")
tools\comprehensive_migration_analysis.py             109 print(f"   📄 {py_file.name:20s}: {len(classes):3d} 類別, {py_f...
tools\comprehensive_migration_analysis.py             111 print(f"   ❌ {py_file.name:20s}: 讀取失敗 - {e}")
tools\comprehensive_migration_analysis.py             118 print(f"   📊 Schemas 總計: {len(total_schema_classes)} 個類別")
tools\comprehensive_migration_analysis.py             139 print(f"   📄 {py_file.name:20s}: {len(classes):3d} 類別, {py_f...
tools\comprehensive_migration_analysis.py             141 print(f"   ❌ {py_file.name:20s}: 讀取失敗 - {e}")
tools\comprehensive_migration_analysis.py             148 print(f"   📊 Enums 總計: {len(total_enum_classes)} 個類別")
tools\comprehensive_migration_analysis.py             155 print("\n🔄 步驟 3: 遷移完整性對比")
tools\comprehensive_migration_analysis.py             164 print(f"📋 Schemas 對比:")
tools\comprehensive_migration_analysis.py             169 print(f"   ⚠️  缺失: {len(missing_schemas)} 個")
tools\comprehensive_migration_analysis.py             176 print(f"   ➕ 新增: {len(extra_schemas)} 個")
tools\comprehensive_migration_analysis.py             181 print(f"   ✅ 完全匹配！")
tools\comprehensive_migration_analysis.py             197 print(f"\n📋 Enums 對比:")
tools\comprehensive_migration_analysis.py             202 print(f"   ⚠️  缺失: {len(missing_enums)} 個")
tools\comprehensive_migration_analysis.py             207 print(f"   ➕ 新增: {len(extra_enums)} 個")
tools\comprehensive_migration_analysis.py             212 print(f"   ✅ 完全匹配！")
tools\comprehensive_migration_analysis.py             225 print("\n🧪 步驟 4: 實際導入測試")
tools\comprehensive_migration_analysis.py             241 "status": "✅ PASS",
tools\comprehensive_migration_analysis.py             244 print(f"✅ 基本模組導入成功")
tools\comprehensive_migration_analysis.py             251 "status": "❌ FAIL",
tools\comprehensive_migration_analysis.py             254 print(f"❌ 基本模組導入失敗: {e}")
tools\comprehensive_migration_analysis.py             273 "status": "✅ PASS",
tools\comprehensive_migration_analysis.py             276 print(f"✅ {module}.{class_name}")
tools\comprehensive_migration_analysis.py             280 "status": "❌ FAIL",
tools\comprehensive_migration_analysis.py             283 print(f"❌ {module}.{class_name}: {e}")
tools\comprehensive_migration_analysis.py             290 print("\n📊 步驟 5: 檔案大小和效率分析")
tools\comprehensive_migration_analysis.py             307 print(f"   📈 增加: {size_diff:>10,} bytes ({size_diff/1024:.1f...
tools\comprehensive_migration_analysis.py             309 print(f"   📉 減少: {abs(size_diff):>10,} bytes ({abs(size_diff...
tools\comprehensive_migration_analysis.py             311 print(f"   📊 大小相同")
tools\comprehensive_migration_analysis.py             316 print("\n🎯 步驟 6: 遷移完整性總結")
tools\comprehensive_migration_analysis.py             322 passed_tests = len([t for t in import_tests if "✅" in t["sta...
tools\comprehensive_migration_analysis.py             326 🔍 遷移分析結果:
tools\comprehensive_migration_analysis.py             328 📄 Schemas 遷移:
tools\comprehensive_migration_analysis.py             331 - 遷移狀態: {'✅ 完整' if schemas_complete else '⚠️ 不完整'}
tools\comprehensive_migration_analysis.py             333 📄 Enums 遷移:
tools\comprehensive_migration_analysis.py             336 - 遷移狀態: {'✅ 完整' if enums_complete else '⚠️ 不完整'}
tools\comprehensive_migration_analysis.py             338 🧪 導入測試:
tools\comprehensive_migration_analysis.py             340 - 狀態: {'✅ 全部通過' if passed_tests == total_tests else '⚠️ 部分失敗...
tools\comprehensive_migration_analysis.py             342 📊 整體評估:
tools\comprehensive_migration_analysis.py             343 - 結構完整性: {'✅ 良好' if schemas_complete and enums_complete else...
tools\comprehensive_migration_analysis.py             344 - 功能可用性: {'✅ 良好' if passed_tests >= total_tests * 0.8 else '...
tools\comprehensive_migration_analysis.py             345 - 建議行動: {'🎉 可以刪除舊檔案' if schemas_complete and enums_complete ...
tools\comprehensive_migration_analysis.py             355 print(f"📋 詳細報告已儲存至: {report_file}")
tools\create_enums_structure.py                        93 print(f"⚠️  找不到 {enum_name}")
tools\create_enums_structure.py                        99 print(f"✅ 創建 enums/{filename} ({enum_count} 個枚舉)")
tools\create_enums_structure.py                       172 print(f"✅ 創建 enums/__init__.py (導出 {len(all_enums)} 個枚舉)")
tools\create_schemas_files.py                         688 print(f"✅ 成功創建: {file_path.name}")
tools\create_schemas_files.py                         691 print(f"❌ 創建失敗 {file_path.name}: {e}")
tools\create_schemas_files.py                         696 print(f"📁 目標目錄: {SCHEMAS_DIR}")
tools\create_schemas_files.py                         697 print(f"📝 準備創建 {len(REMAINING_FILES)} 個檔案\n")
tools\create_schemas_files.py                         705 print(f"\n✨ 完成! 成功創建 {success_count}/{len(REMAINING_FILES)} ...
tools\delete_migrated_files.py                         43 print(f"✓ {filename:50s} {size:>10,} bytes")
tools\delete_migrated_files.py                         45 print(f"✗ {filename:50s} (不存在)")
tools\delete_migrated_files.py                         69 print(f"✓ 已刪除: {filename}")
tools\delete_migrated_files.py                         72 print(f"✗ 刪除失敗 {filename}: {e}")
tools\diagnose_missing_enums.py                        28 print("\n🔍 檢查 AuthType 使用情況:")
tools\diagnose_missing_enums.py                        38 print("\n🔍 檢查 CrawlingStrategy 使用情況:")
tools\diagnose_missing_enums.py                        49 print("\n📋 當前導入區塊:")
tools\diagnose_missing_enums.py                        57 print("\n🔍 實際使用的枚舉 (在類型提示或賦值中):")
tools\diagnose_missing_enums.py                        76 print(f"\n⚠️  未使用的導入: {', '.join(unused_imports)}")
tools\diagnose_missing_enums.py                        82 print("\n✅ 修復後的導入區塊:")
tools\diagnose_missing_enums.py                        89 print("\n✅ 所有導入的枚舉都有使用")
tools\extract_enhanced.py                              72 print(f'✅ 已創建 {output_file}')
tools\extract_enhanced.py                              73 print(f'✅ 提取了 {len(enhanced_classes)} 個 Enhanced 類別')
tools\find_non_cp950_filtered.py                       76 f.write('🎉 所有文件都與 CP950 編碼兼容！\n')
tools\fix_all_schema_imports.py                        48 print("\n🔍 查找缺失類別的位置:")
tools\fix_all_schema_imports.py                        62 print(f"   {class_name:25s} -> ❌ 找不到")
tools\fix_all_schema_imports.py                        65 print(f"\n🔧 修復 enhanced.py...")
tools\fix_all_schema_imports.py                        84 print("   ✅ enhanced.py 導入已修復")
tools\fix_all_schema_imports.py                        87 print(f"\n🔍 檢查其他檔案的導入問題:")
tools\fix_all_schema_imports.py                       109 print(f"   ⚠️ 檢查 {py_file.name} 時出錯: {e}")
tools\fix_all_schema_imports.py                       112 print(f"   ⚠️ {filename}: {issue}")
tools\fix_all_schema_imports.py                       137 print(f"   ✅ {filename} 已修復")
tools\fix_all_schema_imports.py                       139 print(f"\n✅ 所有已知問題已修復")
tools\fix_field_validators.py                          63 print(f"✅ {Path(file_path).name}: 修正了 {fixes} 個方法")
tools\fix_field_validators.py                          68 print(f"⚪ {Path(file_path).name}: 無需修正")
tools\fix_field_validators.py                          73 print("\n✅ 所有修正已完成！")
tools\fix_field_validators.py                          77 print("\n⚪ 所有檔案已經符合規範")
tools\generate_complete_architecture.py                66 "🚀 開始生成 AIVA 完整架構圖... | Starting AIVA complete architecture ...
tools\generate_complete_architecture.py               108 f"✅ 完成！生成了 {len(diagrams)} 個圖表 | Completed! Generated {len(d...
tools\generate_complete_architecture.py               114 print("  📊 生成整體系統架構... | Generating overall system architect...
tools\generate_complete_architecture.py               117 subgraph "🎨 前端層 Frontend Layer"
tools\generate_complete_architecture.py               118 UI["🖥️ Web UI<br/>網頁介面<br/><i>FastAPI + React</i>"]
tools\generate_complete_architecture.py               119 API["🔌 REST API<br/>REST 接口<br/><i>OpenAPI 3.0</i>"]
tools\generate_complete_architecture.py               122 subgraph "🤖 核心層 Core Layer"
tools\generate_complete_architecture.py               123 CORE["⚡ AI Core Engine<br/>AI 核心引擎<br/><i>Bio Neuron Network...
tools\generate_complete_architecture.py               124 STRATEGY["📋 Strategy Generator<br/>策略生成器<br/><i>Dynamic Plan...
tools\generate_complete_architecture.py               125 TASK["📦 Task Manager<br/>任務管理器<br/><i>Multi-threading</i>"]
tools\generate_complete_architecture.py               128 subgraph "🔍 掃描層 Scan Layer"
tools\generate_complete_architecture.py               129 SCAN_PY["🐍 Python Scanner<br/>Python 掃描器<br/><i>Requests + a...
tools\generate_complete_architecture.py               130 SCAN_TS["📘 TypeScript Scanner<br/>TypeScript 掃描器<br/><i>Play...
tools\generate_complete_architecture.py               131 SCAN_RS["🦀 Rust Info Gatherer<br/>Rust 資訊收集<br/><i>High Perf...
tools\generate_complete_architecture.py               134 subgraph "⚡ 檢測層 Detection Layer"
tools\generate_complete_architecture.py               135 FUNC_PY["🐍 Python Functions<br/>Python 檢測模組<br/><i>SQLi, XSS...
tools\generate_complete_architecture.py               136 FUNC_GO["🔷 Go Functions<br/>Go 檢測模組<br/><i>AuthN, CSPM, SCA<...
tools\generate_complete_architecture.py               137 FUNC_RS["🦀 Rust Functions<br/>Rust 檢測模組<br/><i>SAST, Deseria...
tools\generate_complete_architecture.py               140 subgraph "🔗 整合層 Integration Layer"
tools\generate_complete_architecture.py               141 INTG["🔧 Integration Service<br/>整合服務<br/><i>Result Aggregati...
tools\generate_complete_architecture.py               142 REPORT["📊 Report Generator<br/>報告生成器<br/><i>HTML/PDF/JSON</i...
tools\generate_complete_architecture.py               143 ANALYSIS["🎯 Risk Analyzer<br/>風險分析器<br/><i>CVSS Scoring</i>"...
tools\generate_complete_architecture.py               146 subgraph "💾 資料層 Data Layer"
tools\generate_complete_architecture.py               147 DB[("🗄️ PostgreSQL<br/>資料庫<br/><i>Primary Storage</i>")]
tools\generate_complete_architecture.py               148 MQ["📨 RabbitMQ<br/>訊息佇列<br/><i>Task Distribution</i>"]
tools\generate_complete_architecture.py               149 REDIS[("⚡ Redis<br/>快取<br/><i>Session & Cache</i>")]
tools\generate_complete_architecture.py               210 print("  📊 生成四大模組概覽... | Generating four core modules overvi...
tools\generate_complete_architecture.py               266 print("  📊 生成核心引擎模組... | Generating core engine module...")
tools\generate_complete_architecture.py               329 print("  📊 生成掃描引擎模組... | Generating scan engine module...")
tools\generate_complete_architecture.py               371 print("  📊 生成檢測功能模組... | Generating detection function modul...
tools\generate_complete_architecture.py               411 print("  📊 生成整合服務模組... | Generating integration service modu...
tools\generate_complete_architecture.py               454 print("  📊 生成 SQL 注入檢測流程... | Generating SQLi detection flow...
tools\generate_complete_architecture.py               490 print("  📊 生成 XSS 檢測流程... | Generating XSS detection flow......
tools\generate_complete_architecture.py               528 print("  📊 生成 SSRF 檢測流程... | Generating SSRF detection flow....
tools\generate_complete_architecture.py               561 print("  📊 生成 IDOR 檢測流程... | Generating IDOR detection flow....
tools\generate_complete_architecture.py               598 print("  📊 生成完整掃描工作流程... | Generating complete scan workflow...
tools\generate_complete_architecture.py               601 participant User as 👤 User<br/>使用者
tools\generate_complete_architecture.py               602 participant API as 🔌 API<br/>接口
tools\generate_complete_architecture.py               603 participant Core as 🤖 Core<br/>核心
tools\generate_complete_architecture.py               604 participant Scan as 🔍 Scanner<br/>掃描器
tools\generate_complete_architecture.py               605 participant MQ as 📨 MQ<br/>佇列
tools\generate_complete_architecture.py               606 participant Func as ⚡ Functions<br/>檢測
tools\generate_complete_architecture.py               607 participant Intg as 🔗 Integration<br/>整合
tools\generate_complete_architecture.py               629 "  📊 生成多語言架構決策... | Generating multi-language architecture d...
tools\generate_complete_architecture.py               671 print("  📊 生成資料流程圖... | Generating data flow diagram...")
tools\generate_complete_architecture.py               700 print("  📊 生成部署架構圖... | Generating deployment architecture.....
tools\generate_complete_architecture.py               757 print(f"    ✅ 已生成: {output_file.name}")
tools\generate_complete_architecture.py               773 "⚠️  未安裝 mermaid-cli，無法匯出圖片 | mermaid-cli not installed, can...
tools\generate_complete_architecture.py               779 f"📤 開始匯出 {format.upper()} 格式... | Starting {format.upper()} ...
tools\generate_complete_architecture.py               800 print(f"  ✅ 已匯出: {output_file.name}")
tools\generate_complete_architecture.py               802 print(f"  ❌ 匯出失敗 Failed: {diagram.name} - {e}")
tools\generate_complete_architecture.py               814 print("📋 生成索引檔案... | Generating index file...")
tools\generate_complete_architecture.py               873 print(f"  ✅ 已生成索引: {index_file}")
tools\generate_complete_architecture.py               908 print("✨ 完成！所有架構圖已生成 | Completed! All diagrams generated")
tools\generate_complete_architecture.py               909 print(f"📁 輸出位置 Output: {generator.output_dir}")
tools\generate_mermaid_diagrams.py                     19 subgraph "🐍 Python Layer"
tools\generate_mermaid_diagrams.py                     26 subgraph "🔷 Go Layer"
tools\generate_mermaid_diagrams.py                     33 subgraph "🦀 Rust Layer"
tools\generate_mermaid_diagrams.py                     38 subgraph "📘 TypeScript Layer"
tools\generate_mermaid_diagrams.py                     42 subgraph "🗄️ Data Layer"
tools\generate_mermaid_diagrams.py                    320 print(f"📊 讀取分析報告: {latest_report.name}")
tools\generate_mermaid_diagrams.py                    328 print(f"⚠️  無法讀取報告: {e}")
tools\generate_mermaid_diagrams.py                    401 print("\n✅ 圖表已生成:")
tools\generate_mermaid_diagrams.py                    402 print(f"  📊 {mermaid_file}")
tools\generate_programming_language_support.py        320 print("\n🔧 新增枚舉:")
tools\generate_programming_language_support.py        327 print("\n📄 新增 Schema:")
tools\mermaid_optimizer.py                            348 "CORE", "核心引擎", "Core Engine", "Bio Neuron Network", icon="🤖...
tools\test_schemas_complete.py                         12 print("🔍 開始測試 schemas 模組導入...")
tools\test_schemas_complete.py                         22 print(f"\n✅ 模組載入成功")
tools\test_schemas_complete.py                         27 print("\n📦 測試 AI 模組新增類別...")
tools\test_schemas_complete.py                         36 print("   ✅ AI 類別 (6/6)")
tools\test_schemas_complete.py                         39 print("\n📦 測試 Tasks 模組新增類別...")
tools\test_schemas_complete.py                         48 print("   ✅ Tasks 類別 (6/6)")
tools\test_schemas_complete.py                         51 print("\n📦 測試 Assets 模組新增類別...")
tools\test_schemas_complete.py                         57 print("   ✅ Assets 類別 (3/3)")
tools\test_schemas_complete.py                         60 print("\n📦 測試 Telemetry 模組新增類別...")
tools\test_schemas_complete.py                         62 print("   ✅ Telemetry 類別 (1/1)")
tools\test_schemas_complete.py                         65 print("\n📦 測試 Enhanced 模組類別...")
tools\test_schemas_complete.py                         79 print("   ✅ Enhanced 類別 (11/11)")
tools\test_schemas_complete.py                         82 print("\n📦 測試 System 模組類別...")
tools\test_schemas_complete.py                         90 print("   ✅ System 類別 (5/5)")
tools\test_schemas_complete.py                         93 print("\n📦 測試 References 模組類別...")
tools\test_schemas_complete.py                         99 print("   ✅ References 類別 (3/3)")
tools\test_schemas_complete.py                        102 print("\n📦 測試原有核心類別...")
tools\test_schemas_complete.py                        111 print("   ✅ 核心類別正常")
tools\test_schemas_complete.py                        114 print("🎉 所有測試通過!")
tools\test_schemas_complete.py                        115 print(f"📊 成功導入 {class_count} 個類別")
tools\test_schemas_complete.py                        121 print(f"\n✅ __all__ 列表: {all_count} 個導出項目")
tools\test_schemas_complete.py                        123 print(f"\n✅ 版本信息:")
tools\test_schemas_complete.py                        128 print(f"\n❌ 導入失敗: {e}")
tools\test_schemas_complete.py                        134 print(f"\n❌ 測試失敗: {e}")
tools\test_schemas_import.py                           12 print("✅ Base schemas working")
tools\test_schemas_import.py                           15 print("✅ Enhanced schemas working")
tools\test_schemas_import.py                           18 print("✅ System schemas working")
tools\test_schemas_import.py                           21 print("✅ References schemas working")
tools\test_schemas_import.py                           23 print("\n🎉 所有新模組導入成功!")
tools\test_schemas_import.py                           26 print(f"❌ 導入失敗: {e}")
tools\verify_migration_completeness.py                 20 print("1️⃣  ENUMS 遷移完整性檢查")
tools\verify_migration_completeness.py                 32 print(f"\n📄 舊 enums.py: {len(old_enum_set)} 個枚舉類別")
tools\verify_migration_completeness.py                 35 print("\n⚠️  舊 enums.py 不存在")
tools\verify_migration_completeness.py                 48 print(f"\n📁 新 enums/ 模組: {len(new_enum_set)} 個枚舉類別")
tools\verify_migration_completeness.py                 57 print(f"\n⚠️  缺失的枚舉 ({len(missing)} 個): {', '.join(sorted(mi...
tools\verify_migration_completeness.py                 59 print(f"\n➕ 新增的枚舉 ({len(extra)} 個): {', '.join(sorted(extra)...
tools\verify_migration_completeness.py                 61 print(f"\n✅ 完全匹配！所有 {len(old_enum_set)} 個枚舉都已遷移")
tools\verify_migration_completeness.py                 63 print(f"\n✅ 新 enums 模組有 {len(new_enum_set)} 個枚舉")
tools\verify_migration_completeness.py                 66 print(f"\n❌ 導入 enums 失敗: {e}")
tools\verify_migration_completeness.py                 73 print("2️⃣  SCHEMAS 遷移完整性檢查")
tools\verify_migration_completeness.py                 83 print(f"\n📄 舊 schemas.py: {len(old_schema_set)} 個 Schema 類別"...
tools\verify_migration_completeness.py                 86 print("\n⚠️  舊 schemas.py 不存在")
tools\verify_migration_completeness.py                 96 print(f"\n📄 舊 ai_schemas.py: {len(old_ai_schema_set)} 個 Sche...
tools\verify_migration_completeness.py                101 print(f"\n📊 舊 schemas 總計: {len(old_schema_set)} 個類別")
tools\verify_migration_completeness.py                103 print("\n⚠️  舊 ai_schemas.py 不存在")
tools\verify_migration_completeness.py                115 print(f"\n📁 新 schemas/ 模組: {len(new_schema_set)} 個 Schema 類別...
tools\verify_migration_completeness.py                124 print(f"\n⚠️  缺失的 Schema ({len(missing)} 個):")
tools\verify_migration_completeness.py                128 print(f"\n➕ 新增的 Schema ({len(extra)} 個):")
tools\verify_migration_completeness.py                132 print(f"\n✅ 完全匹配！所有 {len(old_schema_set)} 個 Schema 都已遷移")
tools\verify_migration_completeness.py                134 print(f"\n✅ 新 schemas 模組有 {len(new_schema_set)} 個 Schema")
tools\verify_migration_completeness.py                137 print(f"\n❌ 導入 schemas 失敗: {e}")
tools\verify_migration_completeness.py                146 print("3️⃣  檔案結構檢查")
tools\verify_migration_completeness.py                153 print(f"\n📁 schemas/ 資料夾: {len(schema_files)} 個檔案")
tools\verify_migration_completeness.py                158 print("\n❌ schemas/ 資料夾不存在")
tools\verify_migration_completeness.py                164 print(f"\n📁 enums/ 資料夾: {len(enum_files)} 個檔案")
tools\verify_migration_completeness.py                169 print("\n❌ enums/ 資料夾不存在")
tools\verify_migration_completeness.py                175 print("4️⃣  舊檔案狀態")
tools\verify_migration_completeness.py                189 print(f"⚠️  {name:20s} 存在 ({size:>10,} bytes)")
tools\verify_migration_completeness.py                191 print(f"✅ {name:20s} 已刪除")
tools\verify_migration_completeness.py                194 print(f"\n📊 舊檔案總大小: {total_old_size:,} bytes ({total_old_siz...
tools\verify_migration_completeness.py                200 print("5️⃣  導入測試")
tools\verify_migration_completeness.py                221 print(f"✅ {test_code}")
tools\verify_migration_completeness.py                224 print(f"❌ {test_code}")
tools\verify_migration_completeness.py                228 print(f"\n📊 測試結果: {passed}/{passed + failed} 通過")
tools\verify_migration_completeness.py                234 print("📋 遷移完整性總結")
tools\verify_migration_completeness.py                244 - 狀態: {'✅ 完整' if enums_complete else '⚠️ 不完整'}
tools\verify_migration_completeness.py                249 - 狀態: {'✅ 完整' if schemas_complete else '⚠️ 不完整'}
tools\verify_migration_completeness.py                252 - schemas/ 資料夾: {'✅ 存在' if schemas_dir.exists() else '❌ 不存在'...
tools\verify_migration_completeness.py                253 - enums/ 資料夾: {'✅ 存在' if enums_dir.exists() else '❌ 不存在'}
tools\verify_migration_completeness.py                256 - schemas.py: {'⚠️ 需要刪除' if old_schemas_file.exists() else '...
tools\verify_migration_completeness.py                257 - enums.py: {'⚠️ 需要刪除' if old_enums_file.exists() else '✅ 已刪...
tools\verify_migration_completeness.py                258 - ai_schemas.py: {'⚠️ 需要刪除' if old_ai_schemas_file.exists() ...
tools\verify_migration_completeness.py                264 print("  ⚠️ 需要完成遷移缺失的類別")
tools\verify_migration_completeness.py                266 print("  🗑️  需要刪除舊檔案")
tools\verify_migration_completeness.py                268 print("  🔧 需要修復導入問題")
tools\verify_migration_completeness.py                270 print("  ✅ 遷移完全完成！")
services\cli\aiva_cli.py                               43 logger.info(f"🚀 啟動掃描任務")
services\cli\aiva_cli.py                               78 logger.info("✅ 掃描任務已提交到消息隊列")
services\cli\aiva_cli.py                               83 logger.info("⏳ 等待掃描結果...")
services\cli\aiva_cli.py                               95 logger.info("✅ 掃描完成！")
services\cli\aiva_cli.py                              101 logger.info("\n📦 發現的資產:")
services\cli\aiva_cli.py                              116 logger.info(f"🔍 啟動 SQL 注入檢測")
services\cli\aiva_cli.py                              148 logger.info("✅ SQL 注入檢測任務已提交")
services\cli\aiva_cli.py                              158 logger.info(f"🔍 啟動 XSS 檢測")
services\cli\aiva_cli.py                              184 logger.info("✅ XSS 檢測任務已提交")
services\cli\aiva_cli.py                              204 logger.info(f"⏳ 等待 {vuln_type.upper()} 檢測結果...")
services\cli\aiva_cli.py                              213 logger.info(f"🚨 發現 {len(findings)} 個漏洞！")
services\cli\aiva_cli.py                              220 logger.info("✅ 未發現漏洞")
services\cli\aiva_cli.py                              235 logger.info("🤖 啟動 AI 訓練系統")
services\cli\aiva_cli.py                              257 logger.info("📡 實時訓練模式：監聽實際任務執行...")
services\cli\aiva_cli.py                              261 logger.info("📼 回放訓練模式：從歷史經驗學習...")
services\cli\aiva_cli.py                              265 logger.info("🎮 模擬訓練模式：使用模擬場景...")
services\cli\aiva_cli.py                              271 logger.info("✅ AI 訓練完成")
services\cli\aiva_cli.py                              279 logger.info("🤖 AI 系統狀態")
services\cli\aiva_cli.py                              305 logger.info(f"📊 生成報告")
services\cli\aiva_cli.py                              335 logger.info(f"✅ 報告已生成: {args.output}")
services\cli\aiva_cli.py                              344 logger.info("⚙️ AIVA 系統狀態")
services\cli\aiva_cli.py                              357 logger.info("\n📡 模組狀態:")
services\cli\aiva_cli.py                              360 status = "🟢 運行中" if await check_module_alive(module) else "🔴...
services\cli\aiva_cli.py                              494 logger.info("\n⚠️ 用戶中斷操作")
services\cli\aiva_cli.py                              496 logger.error(f"❌ 錯誤: {e}", exc_info=True)
services\function\test_schemas.py                     109 stack_trace: str | None = Field(default=None, description="堆...
services\integration\aiva_integration\analysis\risk_assessment_engine_enhanced.py    348 f"🚨 立即處理 {severity_counts['critical']} 個關鍵級別漏洞"
services\integration\aiva_integration\analysis\risk_assessment_engine_enhanced.py    352 recommendations.append(f"⚠️ 優先處理 {severity_counts['high']} 個...
services\integration\aiva_integration\analysis\risk_assessment_engine_enhanced.py    358 "💼 業務關鍵系統發現高風險漏洞，建議啟動緊急響應程序"
services\integration\aiva_integration\analysis\risk_assessment_engine_enhanced.py    360 recommendations.append("🔒 考慮暫時下線受影響功能直至漏洞修復")
services\integration\aiva_integration\analysis\risk_assessment_engine_enhanced.py    366 f"📋 此資產受 {compliance_str} 合規要求約束，務必在規定時間內修復"
services\integration\aiva_integration\analysis\risk_assessment_engine_enhanced.py    373 f"🎯 最高優先級：{top_vuln.get('vulnerability_type', '未知')} "
services\integration\aiva_integration\analysis\risk_assessment_engine_enhanced.py    379 recommendations.append("📞 建議立即通知相關利益相關者和管理層")
services\integration\aiva_integration\analysis\risk_assessment_engine_enhanced.py    380 recommendations.append("🛡️ 考慮實施臨時緩解措施（WAF 規則、IP 限制等）")
services\integration\aiva_integration\analysis\risk_assessment_engine_enhanced.py    383 recommendations.append("✅ 繼續保持良好的安全實踐")
services\integration\aiva_integration\attack_path_analyzer\nlp_recommender.py    250 RiskLevel.CRITICAL: "🔴",
services\integration\aiva_integration\attack_path_analyzer\nlp_recommender.py    251 RiskLevel.HIGH: "🟠",
services\integration\aiva_integration\attack_path_analyzer\nlp_recommender.py    252 RiskLevel.MEDIUM: "🟡",
services\integration\aiva_integration\attack_path_analyzer\nlp_recommender.py    253 RiskLevel.LOW: "🟢",
services\integration\aiva_integration\attack_path_analyzer\nlp_recommender.py    350 impact += "### 🚨 嚴重業務影響\n\n"
services\integration\aiva_integration\attack_path_analyzer\nlp_recommender.py    360 impact += "### ⚠️ 高度業務影響\n\n"
services\integration\aiva_integration\attack_path_analyzer\nlp_recommender.py    370 impact += "### ⚡ 中度業務影響\n\n"
services\integration\aiva_integration\attack_path_analyzer\nlp_recommender.py    379 impact += "### ℹ️ 低度業務影響\n\n"
services\integration\aiva_integration\attack_path_analyzer\nlp_recommender.py    504 "🚀 部署 Content Security Policy (CSP) Header (1小時內可完成)"
services\integration\aiva_integration\attack_path_analyzer\nlp_recommender.py    507 "🚀 啟用 HttpOnly 和 Secure Cookie 標誌 (30分鐘內可完成)"
services\integration\aiva_integration\attack_path_analyzer\nlp_recommender.py    512 "🚀 在防火牆層面阻擋內部 IP 存取 (1小時內可完成)"
services\integration\aiva_integration\attack_path_analyzer\nlp_recommender.py    515 "🚀 加入雲端元資料端點黑名單 (30分鐘內可完成)"
services\integration\aiva_integration\attack_path_analyzer\nlp_recommender.py    520 "🚀 在中介軟體層面加入統一授權檢查 (半天可完成)"
services\integration\aiva_integration\attack_path_analyzer\nlp_recommender.py    522 quick_wins.append("🚀 啟用詳細的存取日誌記錄 (1小時內可完成)")
services\integration\aiva_integration\attack_path_analyzer\nlp_recommender.py    527 "🚀 部署 WAF 規則阻擋已知攻擊模式 (當天可完成)"
services\integration\aiva_integration\attack_path_analyzer\nlp_recommender.py    530 "🚀 限制錯誤訊息中的敏感資訊洩露 (半天可完成)"
services\integration\aiva_integration\attack_path_analyzer\nlp_recommender.py    642 report += "## 📊 執行摘要\n\n"
services\integration\aiva_integration\attack_path_analyzer\nlp_recommender.py    651 report += f"- 🔴 **CRITICAL**: {risk_counts[RiskLevel.CRITICA...
services\integration\aiva_integration\attack_path_analyzer\nlp_recommender.py    652 report += f"- 🟠 **HIGH**: {risk_counts[RiskLevel.HIGH]} 條\n"
services\integration\aiva_integration\attack_path_analyzer\nlp_recommender.py    653 report += f"- 🟡 **MEDIUM**: {risk_counts[RiskLevel.MEDIUM]} ...
services\integration\aiva_integration\attack_path_analyzer\nlp_recommender.py    654 report += f"- 🟢 **LOW**: {risk_counts[RiskLevel.LOW]} 條\n\n"
services\integration\aiva_integration\attack_path_analyzer\nlp_recommender.py    658 report += "### ⚠️ 緊急建議\n\n"
services\integration\aiva_integration\attack_path_analyzer\nlp_recommender.py    667 report += "## 🎯 詳細推薦\n\n"
services\integration\aiva_integration\attack_path_analyzer\nlp_recommender.py    683 report += "### ⚡ 快速修復建議\n\n"
services\integration\aiva_integration\attack_path_analyzer\nlp_recommender.py    689 report += "### 🔧 詳細修復步驟\n\n"
services\integration\aiva_integration\attack_path_analyzer\nlp_recommender.py    695 report += "### 📦 受影響資產\n\n"
services\integration\aiva_integration\attack_path_analyzer\nlp_recommender.py    701 report += "### 📈 修復評估\n\n"
services\integration\aiva_integration\attack_path_analyzer\nlp_recommender.py    711 report += "## 📝 總結與後續行動\n\n"
services\integration\aiva_integration\attack_path_analyzer\visualizer.py    188 <h1>🔍 AIVA Attack Path Visualization</h1>
services\integration\aiva_integration\examples\enhanced_attack_path_demo.py    251 logger.info("   ⚠️ 高連接度節點，建議加強監控和防護")
services\integration\aiva_integration\examples\enhanced_risk_assessment_demo.py    182 "💡 相同的技術漏洞在不同業務上下文中，風險評估可能相差數倍！"
services\integration\aiva_integration\examples\enhanced_risk_assessment_demo.py    232 print("\n✅ 風險下降，安全態勢正在改善！")
services\integration\aiva_integration\examples\enhanced_risk_assessment_demo.py    234 print("\n⚠️ 風險上升，需要加強安全措施！")
services\integration\aiva_integration\examples\enhanced_risk_assessment_demo.py    236 print("\n➡️ 風險穩定，繼續保持當前安全實踐")
services\integration\aiva_integration\examples\enhanced_risk_assessment_demo.py    247 print("✨ 增強版風險評估引擎示範完成")
services\integration\aiva_integration\examples\enhanced_scan_integration.py    299 f"🔗 識別出 {chain_count} 條攻擊鏈，攻擊者可能透過這些路徑達成進階攻擊目標"
services\integration\aiva_integration\examples\enhanced_scan_integration.py    307 f"🎯 發現 {root_count} 個共用元件問題，影響 {affected} 個漏洞。"
services\integration\aiva_integration\examples\enhanced_scan_integration.py    316 f"✅ {confirmed} 個 SAST 發現已被 DAST 驗證（確認率 {rate}%），"
services\integration\aiva_integration\examples\enhanced_scan_integration.py    324 f"⚠️ 漏洞相關性導致風險放大 {risk_amp}x，"
services\integration\aiva_integration\examples\enhanced_scan_integration.py    442 print(f"⚠️ 有 {len(overdue_vulns)} 個漏洞已逾期")
services\integration\aiva_integration\remediation\code_fixer.py    365 print("🤖 Code Fixer Demo (Mock Mode)")
services\integration\aiva_integration\remediation\code_fixer.py    379 print("\n📋 SQL Injection Fix:")
services\integration\aiva_integration\remediation\code_fixer.py    392 print("\n📋 XSS Fix:")
services\integration\aiva_integration\remediation\code_fixer.py    396 print("\n✅ Demo completed (Mock mode)")
services\integration\aiva_integration\remediation\code_fixer.py    397 print("💡 Provide API key to use real LLM fixes")
services\integration\aiva_integration\remediation\config_recommender.py    368 print("⚙️  Config Recommender Demo")
services\integration\aiva_integration\remediation\config_recommender.py    385 print(f"\n📊 Analysis ID: {analysis['analysis_id']}")
services\integration\aiva_integration\remediation\config_recommender.py    386 print(f"🎯 Config Type: {analysis['config_type']}")
services\integration\aiva_integration\remediation\config_recommender.py    387 print(f"⚠️  Risk Level: {analysis['risk_level']}")
services\integration\aiva_integration\remediation\config_recommender.py    388 print(f"\n🔍 Issues Found: {len(analysis['issues'])}")
services\integration\aiva_integration\remediation\config_recommender.py    393 print(f"\n💡 Recommendations: {len(analysis['recommendations'...
services\integration\aiva_integration\remediation\config_recommender.py    400 print("\n✅ Secure config generated")
services\integration\aiva_integration\remediation\config_recommender.py    403 print("\n✅ Demo completed")
services\integration\aiva_integration\remediation\patch_generator.py    320 print("🔧 Patch Generator Demo")
services\integration\aiva_integration\remediation\patch_generator.py    333 print("\n📋 Generated SQL Injection Patch:")
services\integration\aiva_integration\remediation\patch_generator.py    345 print("\n📋 Generated XSS Patch:")
services\integration\aiva_integration\remediation\patch_generator.py    352 print(f"\n💾 Exported {result['exported_count']} patches to {...
services\integration\aiva_integration\remediation\patch_generator.py    354 print("\n✅ Demo completed")
services\integration\aiva_integration\remediation\report_generator.py    275 <h1>🔒 Vulnerability Report</h1>
services\integration\aiva_integration\remediation\report_generator.py    279 <h2>📊 Statistics</h2>
services\integration\aiva_integration\remediation\report_generator.py    301 <h2>🔍 Vulnerabilities</h2>
services\integration\aiva_integration\remediation\report_generator.py    399 md = f"""# 🔒 Vulnerability Report
services\integration\aiva_integration\remediation\report_generator.py    404 ## 📊 Statistics
services\integration\aiva_integration\remediation\report_generator.py    412 md += "\n## 🔍 Vulnerabilities\n\n"
services\integration\aiva_integration\remediation\report_generator.py    455 <h1>✅ Remediation Report</h1>
services\integration\aiva_integration\remediation\report_generator.py    501 md = f"""# ✅ Remediation Report
services\integration\aiva_integration\remediation\report_generator.py    529 print("📄 Report Generator Demo")
services\integration\aiva_integration\remediation\report_generator.py    562 print("\n✅ Vulnerability report generated:")
services\integration\aiva_integration\remediation\report_generator.py    567 print("\n✅ Demo completed")
services\function\function_postex\lateral_movement.py      4 ⚠️ 嚴格警告: 此模組用於測試橫向移動漏洞
services\function\function_postex\lateral_movement.py     31 ⚠️ 僅用於安全測試和研究
services\function\function_postex\lateral_movement.py    314 print("⚠️  Lateral Movement Tester - SAFE MODE DEMO")
services\function\function_postex\lateral_movement.py    323 print(f"\n📊 Assessment ID: {assessment['assessment_id']}")
services\function\function_postex\lateral_movement.py    324 print(f"🔒 Safe Mode: {assessment['safe_mode']}")
services\function\function_postex\lateral_movement.py    325 print(f"🌐 Target Network: {assessment['target_network']}")
services\function\function_postex\lateral_movement.py    326 print(f"\n📋 Tests Run: {assessment['summary']['total_tests']...
services\function\function_postex\lateral_movement.py    327 print(f"🔍 Findings: {assessment['summary']['total_findings']...
services\function\function_postex\lateral_movement.py    329 print("\n✅ Safe mode demo completed")
services\function\function_postex\lateral_movement.py    330 print("⚠️  Remember: Never use this tool without explicit au...
services\function\function_postex\persistence_checker.py      4 ⚠️ 嚴格警告: 此模組用於檢測持久化機制
services\function\function_postex\persistence_checker.py     32 ⚠️ 僅用於安全測試和研究
services\function\function_postex\persistence_checker.py    355 print("⚠️  Persistence Checker - SAFE MODE DEMO")
services\function\function_postex\persistence_checker.py    364 print(f"\n📊 Assessment ID: {assessment['assessment_id']}")
services\function\function_postex\persistence_checker.py    365 print(f"🔒 Safe Mode: {assessment['safe_mode']}")
services\function\function_postex\persistence_checker.py    366 print(f"💻 OS: {assessment['os']}")
services\function\function_postex\persistence_checker.py    367 print(f"\n📋 Tests Run: {assessment['summary']['total_tests']...
services\function\function_postex\persistence_checker.py    368 print(f"🔍 Findings: {assessment['summary']['total_findings']...
services\function\function_postex\persistence_checker.py    370 print("\n✅ Safe mode demo completed")
services\function\function_postex\persistence_checker.py    371 print("⚠️  Remember: Never use this tool without explicit au...
services\function\function_postex\privilege_escalator.py      4 ⚠️ 嚴格警告: 此模組用於測試權限提升漏洞
services\function\function_postex\privilege_escalator.py     36 ⚠️ 僅用於安全測試和研究
services\function\function_postex\privilege_escalator.py    256 print("⚠️  Privilege Escalation Tester - SAFE MODE DEMO")
services\function\function_postex\privilege_escalator.py    265 print(f"\n📊 Assessment ID: {assessment['assessment_id']}")
services\function\function_postex\privilege_escalator.py    266 print(f"🔒 Safe Mode: {assessment['safe_mode']}")
services\function\function_postex\privilege_escalator.py    267 print(f"💻 OS: {assessment['os']}")
services\function\function_postex\privilege_escalator.py    268 print(f"\n📋 Tests Run: {assessment['summary']['total_tests']...
services\function\function_postex\privilege_escalator.py    269 print(f"🔍 Findings: {assessment['summary']['total_findings']...
services\function\function_postex\privilege_escalator.py    271 print("\n✅ Safe mode demo completed")
services\function\function_postex\privilege_escalator.py    272 print("⚠️  Remember: Never use this tool without explicit au...
services\function\function_postex\__init__.py           4 ⚠️ 警告: 此模組包含後滲透測試功能,僅應在獲得明確授權的環境中使用。
services\function\function_idor\aiva_func_idor\cross_user_tester.py    150 # URL 路径中的 ID
services\core\aiva_core\ai_commander.py                94 logger.info("🎖️ Initializing AI Commander...")
services\core\aiva_core\ai_commander.py               158 logger.info("✅ AI Commander initialized successfully")
services\core\aiva_core\ai_commander.py               180 logger.info(f"🎯 Executing AI Command: {task_type.value}")
services\core\aiva_core\ai_commander.py               229 f"✅ Command {command_id} completed: "
services\core\aiva_core\ai_commander.py               234 logger.error(f"❌ Command {command_id} failed: {e}", exc_info...
services\core\aiva_core\ai_commander.py               253 logger.info("📋 Generating attack plan with RAG enhancement.....
services\core\aiva_core\ai_commander.py               293 logger.info("🤔 Making strategic decision...")
services\core\aiva_core\ai_commander.py               314 logger.info("🔍 Detecting vulnerabilities across languages......
services\core\aiva_core\ai_commander.py               341 logger.info("📚 Learning from experience...")
services\core\aiva_core\ai_commander.py               368 logger.info("🎓 Training AI model...")
services\core\aiva_core\ai_commander.py               387 logger.info("🔎 Retrieving knowledge from RAG...")
services\core\aiva_core\ai_commander.py               420 logger.info("🌐 Coordinating multi-language AI modules...")
services\core\aiva_core\ai_commander.py               445 logger.info("🎓 Starting training session...")
services\core\aiva_core\ai_commander.py               475 logger.info("💾 Saving AI Commander state...")
services\core\aiva_core\ai_commander.py               488 logger.info("✅ AI Commander state saved")
services\core\aiva_core\ai_controller.py               22 logger.info("🧠 初始化 AIVA 統一 AI 控制器...")
services\core\aiva_core\ai_controller.py               37 logger.info("✅ 統一 AI 控制器初始化完成")
services\core\aiva_core\ai_controller.py               41 logger.info(f"🎯 統一 AI 處理: {user_input}")
services\core\aiva_core\ai_controller.py              100 logger.info("📋 主控 AI 直接處理任務")
services\core\aiva_core\ai_controller.py              114 logger.info("🔧 協調程式碼修復 (主控 AI 監督)")
services\core\aiva_core\ai_controller.py              141 logger.info("🔍 協調漏洞檢測 (統一調度)")
services\core\aiva_core\ai_controller.py              168 logger.info("🤝 多 AI 協同處理 (主控統籌)")
services\core\aiva_core\ai_controller.py              234 print("🎯 AIVA 統一 AI 控制展示")
services\core\aiva_core\ai_controller.py              248 print(f"\n👤 用戶請求: {request}")
services\core\aiva_core\ai_controller.py              250 print(f"🤖 處理方式: {result['processing_method']}")
services\core\aiva_core\ai_controller.py              251 print(f"✅ 統一控制: {result['unified_control']}")
services\core\aiva_core\ai_controller.py              252 print(f"🔄 AI 衝突: {result['ai_conflicts']}")
services\core\aiva_core\ai_controller.py              254 print("\n📊 統一控制統計:")
services\core\aiva_core\ai_integration_test.py         53 print("🚀 AI 整合測試器初始化完成")
services\core\aiva_core\ai_integration_test.py         62 print("📋 開始執行 AI 整合測試套件...")
services\core\aiva_core\ai_integration_test.py         78 print(f"\n🧪 執行測試: {test_name}")
services\core\aiva_core\ai_integration_test.py         81 print(f"✅ {test_name} - 通過")
services\core\aiva_core\ai_integration_test.py         83 print(f"❌ {test_name} - 失敗: {str(e)}")
services\core\aiva_core\ai_integration_test.py        545 recommendations.append("🎉 所有測試都通過了！AI 整合系統運作良好。")
services\core\aiva_core\ai_integration_test.py        550 recommendations.append("🔧 建議檢查各 AI 組件的初始化配置和依賴項。")
services\core\aiva_core\ai_integration_test.py        552 recommendations.append("⚙️ 建議優化統一控制器的任務分配邏輯。")
services\core\aiva_core\ai_integration_test.py        554 recommendations.append("📝 建議檢查 NLG 系統的模板配置和上下文處理。")
services\core\aiva_core\ai_integration_test.py        556 recommendations.append("🌐 建議檢查多語言協調器的語言模組註冊。")
services\core\aiva_core\ai_integration_test.py        558 recommendations.append("⚠️ 建議增強 AI 衝突檢測和去重機制。")
services\core\aiva_core\ai_integration_test.py        560 recommendations.append("🔄 建議檢查整個 AI 處理流程的各個環節。")
services\core\aiva_core\ai_integration_test.py        562 recommendations.append("⚡ 建議優化系統效能和並發處理能力。")
services\core\aiva_core\ai_integration_test.py        564 recommendations.append("🛡️ 建議增強錯誤處理和恢復機制。")
services\core\aiva_core\ai_integration_test.py        571 print("🚀 AIVA AI 整合測試系統")
services\core\aiva_core\ai_integration_test.py        581 print("\n📊 測試報告")
services\core\aiva_core\ai_integration_test.py        583 print(f"📋 總測試數: {report['summary']['total_tests']}")
services\core\aiva_core\ai_integration_test.py        584 print(f"✅ 成功測試: {report['summary']['successful_tests']}")
services\core\aiva_core\ai_integration_test.py        585 print(f"❌ 失敗測試: {report['summary']['failed_tests']}")
services\core\aiva_core\ai_integration_test.py        586 print(f"📈 成功率: {report['summary']['success_rate']:.1f}%")
services\core\aiva_core\ai_integration_test.py        587 print(f"⏱️ 總執行時間: {report['summary']['total_execution_time']...
services\core\aiva_core\ai_integration_test.py        589 print("\n📝 詳細結果:")
services\core\aiva_core\ai_integration_test.py        591 status = "✅" if result['success'] else "❌"
services\core\aiva_core\ai_integration_test.py        596 print("\n💡 改進建議:")
services\core\aiva_core\ai_integration_test.py        606 print(f"\n📄 詳細報告已保存至: {report_file}")
services\core\aiva_core\app.py                        230 f"[📈] Starting execution status monitor "
services\core\aiva_core\bio_neuron_master.py           74 logger.info("🧠 Initializing BioNeuron Master Controller...")
services\core\aiva_core\bio_neuron_master.py          110 logger.info(f"✅ Master Controller initialized in {default_mo...
services\core\aiva_core\bio_neuron_master.py          135 logger.info(f"📥 Processing request in {mode.value} mode")
services\core\aiva_core\bio_neuron_master.py          167 logger.info("🖥️ Handling UI mode request")
services\core\aiva_core\bio_neuron_master.py          235 logger.info(f"⏸️ Requesting UI confirmation for: {action}")
services\core\aiva_core\bio_neuron_master.py          256 logger.info(f"▶️ Executing UI action: {action}")
services\core\aiva_core\bio_neuron_master.py          282 logger.info("🤖 Handling AI autonomous mode request")
services\core\aiva_core\bio_neuron_master.py          293 logger.info("🧠 BioNeuron analyzing objective...")
services\core\aiva_core\bio_neuron_master.py          329 logger.info("🧠 BioNeuron making decision...")
services\core\aiva_core\bio_neuron_master.py          356 logger.info("⚡ Auto-executing decision...")
services\core\aiva_core\bio_neuron_master.py          378 logger.info("💬 Handling chat mode request")
services\core\aiva_core\bio_neuron_master.py          507 logger.info("🔀 Handling hybrid mode request")
services\core\aiva_core\bio_neuron_master.py          578 logger.info("📚 Learning from execution...")
services\core\aiva_core\bio_neuron_master.py          627 logger.info("🔍 Starting scan task...")
services\core\aiva_core\bio_neuron_master.py          640 logger.info("⚔️ Starting attack task...")
services\core\aiva_core\bio_neuron_master.py          653 logger.info("🎓 Starting training task...")
services\core\aiva_core\multilang_coordinator.py       42 logger.info("🌐 初始化多語言 AI 協調器...")
services\core\aiva_core\multilang_coordinator.py       48 logger.info(f"✅ 已註冊 {len(self.language_modules)} 個語言模組")
services\core\aiva_core\multilang_coordinator.py      146 logger.info(f"🎯 協調任務: {task.description}")
services\core\aiva_core\multilang_coordinator.py      227 logger.info(f"🤖 選擇了 {len(selected)} 個 AI 模組參與協調")
services\core\aiva_core\multilang_coordinator.py      284 logger.info("⚡ 開始並行執行 AI 任務...")
services\core\aiva_core\multilang_coordinator.py      331 logger.info(f"✅ 完成 {len(execution_results)} 個 AI 任務執行")
services\core\aiva_core\multilang_coordinator.py      379 logger.info("🔄 整合多語言 AI 執行結果...")
services\core\aiva_core\multilang_coordinator.py      427 logger.info("✅ 多語言 AI 結果整合完成")
services\core\aiva_core\multilang_coordinator.py      527 print("🌐 AIVA 多語言 AI 協調展示")
services\core\aiva_core\multilang_coordinator.py      555 print(f"\n🎯 執行任務: {task.description}")
services\core\aiva_core\multilang_coordinator.py      558 print(f"✅ 協調效率: {result['coordination_summary']['coordinatio...
services\core\aiva_core\multilang_coordinator.py      559 print(f"🌍 協調語言: {', '.join(result['coordination_summary']['l...
services\core\aiva_core\multilang_coordinator.py      560 print(f"🤖 AI 模組數: {result['coordination_summary']['total_ai_...
services\core\aiva_core\multilang_coordinator.py      561 print(f"💡 主控綜合: {result['master_ai_synthesis']}")
services\core\aiva_core\multilang_coordinator.py      563 print("\n📊 協調統計:")
services\core\aiva_core\nlg_system.py                  32 "✅ 任務完成！{action}已成功執行，{result_detail}。",
services\core\aiva_core\nlg_system.py                  33 "🎯 操作成功！使用{tool_name}完成了{action}，結果：{result_detail}。",
services\core\aiva_core\nlg_system.py                  34 "✨ 處理完畢！{action}執行順利，{result_detail}。信心度：{confidence}%",
services\core\aiva_core\nlg_system.py                  35 "💯 已完成您的請求「{action}」，{result_detail}。AIVA 自主執行成功！",
services\core\aiva_core\nlg_system.py                  38 "⚠️ 部分完成：{action}已執行，但{issue}。建議：{suggestion}",
services\core\aiva_core\nlg_system.py                  39 "🔄 處理中：{action}進行順利，{progress}。預計{eta}完成",
services\core\aiva_core\nlg_system.py                  40 "📋 階段性成果：{action}完成 {percentage}%，{result_detail}",
services\core\aiva_core\nlg_system.py                  43 "❌ 執行遇到問題：{action}失敗，原因：{error_reason}。建議：{solution}",
services\core\aiva_core\nlg_system.py                  44 "⚡ 需要協助：{action}無法完成，{error_detail}。請{next_step}",
services\core\aiva_core\nlg_system.py                  45 "🔧 技術問題：{error_type}導致{action}中斷，正在{recovery_action}",
services\core\aiva_core\nlg_system.py                  50 "📖 程式碼讀取完成！共{lines}行，主要包含{content_summary}",
services\core\aiva_core\nlg_system.py                  51 "🔍 已分析{file_name}，發現{key_components}，程式碼品質{quality_rating}",
services\core\aiva_core\nlg_system.py                  52 "📋 檔案內容：{lines}行程式碼，{functions}個函數，{classes}個類別",
services\core\aiva_core\nlg_system.py                  55 "✏️ 程式碼寫入成功！新增{bytes_written}位元組至{file_name}",
services\core\aiva_core\nlg_system.py                  56 "💾 檔案更新完成，{modification_type}，影響{scope}",
services\core\aiva_core\nlg_system.py                  57 "🚀 程式碼部署就緒，{file_name}已{action_type}，可立即使用",
services\core\aiva_core\nlg_system.py                  60 "🧮 程式分析完成！架構{architecture_rating}，複雜度{complexity_level}",
services\core\aiva_core\nlg_system.py                  61 "📊 程式碼品質報告：{metrics}，建議{recommendations}",
services\core\aiva_core\nlg_system.py                  62 "🎯 分析結果：{findings}，優化建議：{optimizations}",
services\core\aiva_core\nlg_system.py                  67 "🛡️ 安全掃描完成！檢測{scan_coverage}，發現{findings_count}項問題",
services\core\aiva_core\nlg_system.py                  68 "🔒 漏洞檢測報告：{vuln_summary}，風險等級{risk_level}",
services\core\aiva_core\nlg_system.py                  69 "⚔️ 安全分析：{threat_analysis}，防護建議{security_recommendations}",
services\core\aiva_core\nlg_system.py                  72 "🚨 檢測到{vuln_type}漏洞！位置：{location}，嚴重度：{severity}",
services\core\aiva_core\nlg_system.py                  73 "⚠️ 安全警告：{security_issue}，建議立即{action_required}",
services\core\aiva_core\nlg_system.py                  74 "🎯 漏洞確認：{vulnerability_details}，修復方案：{fix_suggestion}",
services\core\aiva_core\nlg_system.py                  79 "🎮 系統協調完成！{language_modules}模組已同步，狀態正常",
services\core\aiva_core\nlg_system.py                  80 "🔄 多語言協調：Python主控✅，Go模組✅，Rust引擎✅，TS前端✅",
services\core\aiva_core\nlg_system.py                  81 "🌐 跨語言操作成功，{operation_summary}，效能提升{performance_gain}%",
services\core\aiva_core\nlg_system.py                  84 "⚡ 系統指令執行完成！{command_summary}，輸出：{output_summary}",
services\core\aiva_core\nlg_system.py                  85 "🖥️ 執行結果：{execution_details}，狀態碼：{status_code}",
services\core\aiva_core\nlg_system.py                  86 "🔧 操作完成：{system_operation}，系統回應：{system_response}",
services\core\aiva_core\nlg_system.py                  91 "🤖 AIVA 自主 AI 為您服務！我具備完整的程式控制和分析能力",
services\core\aiva_core\nlg_system.py                  92 "👋 您好！我是 AIVA 智能助手，準備協助您進行程式管理和分析",
services\core\aiva_core\nlg_system.py                  93 "🎯 AIVA 已就緒，500萬參數生物神經網路隨時為您提供專業協助",
services\core\aiva_core\nlg_system.py                  96 "🤔 您是希望我{possible_action_1}還是{possible_action_2}？請提供更多細節",
services\core\aiva_core\nlg_system.py                  97 "📋 需要澄清：關於「{user_input}」，我可以{available_options}",
services\core\aiva_core\nlg_system.py                  98 "💡 建議：您可以說「{suggestion_1}」或「{suggestion_2}」來獲得更精確的協助",
services\core\aiva_core\nlg_system.py                 101 "📊 AIVA 狀態：系統運作正常，AI 引擎活躍，知識庫已載入{kb_stats}",
services\core\aiva_core\nlg_system.py                 102 "🚀 當前狀態：所有模組協調良好，處理效能{performance_level}",
services\core\aiva_core\nlg_system.py                 103 "⚡ 系統健康度：{health_percentage}%，記憶體使用{memory_usage}，決策準確率{accu...
services\core\aiva_core\nlg_system.py                 286 return "✅ 任務已完成，結果：{result_summary}"
services\core\aiva_core\nlg_system.py                 398 response = response.replace("✅", "⚠️").replace("成功", "嘗試")
services\core\aiva_core\nlg_system.py                 408 print("🧠 AIVA 自然語言生成系統測試")
services\core\aiva_core\nlg_system.py                 436 print("\n✅ 自然語言生成測試完成！")
services\core\aiva_core\nlg_system.py                 437 print("💡 AIVA 無需 GPT-4 也能生成高品質中文回應")
services\core\aiva_core\optimized_core.py               4 🧠 核心特色:
services\core\aiva_core\optimized_core.py              11 ❌ 不需要外部依賴:
services\core\aiva_core\optimized_core.py              17 ✅ AIVA 自身就具備完整 AI 能力！
services\core\aiva_core\optimized_core.py             514 print("🧠 AIVA 自主 AI 分析中...")
services\core\aiva_core\optimized_core.py             519 print("\n📊 AIVA 現有 AI 能力盤點:")
services\core\aiva_core\optimized_core.py             545 print(f"\n✅ {name}:")
services\core\aiva_core\optimized_core.py             552 print("\n🆚 AIVA vs GPT-4 比較 (程式控制場景):")
services\core\aiva_core\optimized_core.py             555 "離線運作": {"AIVA": "✅ 完全離線", "GPT-4": "❌ 需要網路"},
services\core\aiva_core\optimized_core.py             556 "程式控制": {"AIVA": "✅ 直接控制", "GPT-4": "❌ 只能生成文字"},
services\core\aiva_core\optimized_core.py             557 "即時響應": {"AIVA": "✅ 毫秒級", "GPT-4": "❌ 網路延遲"},
services\core\aiva_core\optimized_core.py             558 "安全性": {"AIVA": "✅ 內部處理", "GPT-4": "❌ 資料外洩風險"},
services\core\aiva_core\optimized_core.py             559 "成本": {"AIVA": "✅ 零成本", "GPT-4": "❌ API 付費"},
services\core\aiva_core\optimized_core.py             560 "客製化": {"AIVA": "✅ 完全客製", "GPT-4": "❌ 通用模型"},
services\core\aiva_core\optimized_core.py             561 "多語言": {"AIVA": "✅ 原生支援", "GPT-4": "❌ 間接支援"}
services\core\aiva_core\optimized_core.py             571 print("\n🎯 AIVA 自給自足能力展示:")
services\core\aiva_core\optimized_core.py             577 "需要GPT-4嗎": "❌ 不需要"
services\core\aiva_core\optimized_core.py             582 "需要GPT-4嗎": "❌ 不需要"
services\core\aiva_core\optimized_core.py             587 "需要GPT-4嗎": "❌ 不需要"
services\core\aiva_core\optimized_core.py             592 "需要GPT-4嗎": "❌ 不需要"
services\core\aiva_core\optimized_core.py             604 print("🏆 最終結論: AIVA 完全不需要 GPT-4！")
services\core\aiva_core\optimized_core.py             608 "🧠 已有完整的生物神經網路 AI",
services\core\aiva_core\optimized_core.py             609 "🔧 具備所有必要的程式控制工具",
services\core\aiva_core\optimized_core.py             610 "📚 內建知識檢索與學習能力",
services\core\aiva_core\optimized_core.py             611 "🌐 支援多語言協調控制",
services\core\aiva_core\optimized_core.py             612 "⚡ 即時響應，無網路依賴",
services\core\aiva_core\optimized_core.py             613 "🔒 安全可控，無資料洩漏",
services\core\aiva_core\optimized_core.py             614 "💰 零額外成本，完全自主",
services\core\aiva_core\optimized_core.py             615 "🎯 專為程式控制優化設計"
services\core\aiva_core\optimized_core.py             618 print("\n✅ AIVA 的完全自主能力:")
services\core\aiva_core\optimized_core.py             622 print("\n📈 自主性評分: 100/100")
services\core\aiva_core\optimized_core.py             623 print("💯 結論: AIVA 自己就行！不需要外部 AI！")
services\core\aiva_core\optimized_core.py             628 print("🔬 AIVA AI 獨立性分析報告")
services\core\aiva_core\ai_engine\bio_neuron_core.py    221 logger.info("✓ Planner/Orchestrator enabled")
services\core\aiva_core\ai_engine\bio_neuron_core.py    232 logger.info("✓ Execution Tracer enabled")
services\core\aiva_core\ai_engine\bio_neuron_core.py    263 logger.info(f"✓ Experience learning enabled (DB: {database_u...
services\core\aiva_core\ai_engine\bio_neuron_core.py    274 logger.info("BioNeuronRAGAgent 初始化完成 ✓")
services\core\aiva_core\authz\matrix_visualizer.py    350 <h1>🔐 Permission Matrix Report</h1>
services\core\aiva_core\authz\matrix_visualizer.py    353 <h2>📊 Overview Statistics</h2>
services\core\aiva_core\authz\matrix_visualizer.py    375 <div class="alert-title">⚠️ Over-Privileged Roles Detected</...
services\core\aiva_core\authz\matrix_visualizer.py    398 <h2>📈 Visualizations</h2>
services\core\aiva_core\authz\matrix_visualizer.py    417 <p>© 2025 AIVA Platform</p>
services\core\aiva_core\authz\matrix_visualizer.py    492 print("✅ HTML report generated: permission_matrix_report.htm...
services\core\aiva_core\authz\matrix_visualizer.py    496 print("✅ CSV exported: permission_matrix.csv")
services\core\aiva_core\processing\scan_result_processor.py     83 logger.info(f"[🔍] [Stage 1/7] Processing scan results for {s...
services\core\aiva_core\processing\scan_result_processor.py    116 logger.info(f"[🔍] [Stage 2/7] Analyzing attack surface for {...
services\core\aiva_core\processing\scan_result_processor.py    235 f"[📦] [Stage 5/7] Tasks generated - "
services\core\aiva_core\processing\scan_result_processor.py    262 logger.info(f"[📤] [Stage 6/7] Dispatching tasks for {scan_id...
services\core\aiva_core\ui_panel\auto_server.py       102 logger.info("   🚀 啟動 AIVA UI 面板 (自動端口)")
services\core\aiva_core\ui_panel\auto_server.py       104 logger.info(f"🌐 位址: http://{host}:{port}")
services\core\aiva_core\ui_panel\auto_server.py       105 logger.info(f"📖 API 文檔: http://{host}:{port}/docs")
services\core\aiva_core\ui_panel\auto_server.py       106 logger.info(f"🔧 模式: {mode}")
scripts\ai_training\complete_flow_training.py          42 logger.info(f"🚀 開始 AI 訓練會話: {self.training_session_id}")
scripts\ai_training\complete_flow_training.py          59 logger.info("✅ AI 訓練會話完成")
scripts\ai_training\complete_flow_training.py          64 logger.info("📋 場景 1: 掃描到檢測完整流程")
scripts\ai_training\complete_flow_training.py          74 logger.info("\n🎯 Step 1: CLI → Core (掃描請求)")
scripts\ai_training\complete_flow_training.py          87 logger.info("\n🎯 Step 2: Core → Scan Worker")
scripts\ai_training\complete_flow_training.py         100 logger.info("\n🎯 Step 3: Scan Worker → Core (資產發現)")
scripts\ai_training\complete_flow_training.py         110 logger.info("\n🎯 Step 4: Core → Function Workers (自動觸發)")
scripts\ai_training\complete_flow_training.py         123 logger.info("\n🎯 Step 5: Function Workers → Core (檢測結果)")
scripts\ai_training\complete_flow_training.py         133 logger.info("\n🎯 Step 6: Core → Integration (結果聚合)")
scripts\ai_training\complete_flow_training.py         145 logger.info("\n🎯 Step 7: Integration → Core (報告就緒)")
scripts\ai_training\complete_flow_training.py         155 logger.info("\n🎯 Step 8: Core → CLI (任務完成通知)")
scripts\ai_training\complete_flow_training.py         165 logger.info("\n🎯 Step 9: AI 學習階段")
scripts\ai_training\complete_flow_training.py         171 logger.info(f"\n✅ 場景 1 完成！發現 {len(assets)} 個資產，{len(findings...
scripts\ai_training\complete_flow_training.py         176 logger.info("📋 場景 2: 直接功能檢測流程")
scripts\ai_training\complete_flow_training.py         186 logger.info("\n🎯 Step 1: CLI → Core (SQLi 檢測請求)")
scripts\ai_training\complete_flow_training.py         196 logger.info("\n🎯 Step 2: Core → SQLi Worker")
scripts\ai_training\complete_flow_training.py         207 logger.info("\n🎯 Step 3: SQLi Worker → Core (檢測完成)")
scripts\ai_training\complete_flow_training.py         233 logger.info("\n✅ 場景 2 完成！")
scripts\ai_training\complete_flow_training.py         238 logger.info("📋 場景 3: 批量處理流程")
scripts\ai_training\complete_flow_training.py         254 logger.info(f"\n🎯 批量處理 {len(targets)} 個目標")
scripts\ai_training\complete_flow_training.py         267 logger.info(f"✅ 創建 {len(tasks)} 個並行任務")
scripts\ai_training\complete_flow_training.py         281 logger.info("\n✅ 場景 3 完成！")
scripts\ai_training\complete_flow_training.py         286 logger.info("📋 場景 4: 錯誤處理與恢復")
scripts\ai_training\complete_flow_training.py         304 logger.info(f"\n🎯 測試錯誤情況 {idx+1}: {error_case['description']...
scripts\ai_training\complete_flow_training.py         326 logger.info("\n✅ 場景 4 完成！")
scripts\ai_training\complete_flow_training.py         338 logger.info(f"  📤 CLI 發送掃描請求: {task['target']}")
scripts\ai_training\complete_flow_training.py         343 logger.info(f"  🔀 Core 派發到 Scan Worker: {task['task_id']}")
scripts\ai_training\complete_flow_training.py         361 logger.info(f"  📊 Scan Worker 發現 {len(assets)} 個資產")
scripts\ai_training\complete_flow_training.py         384 logger.info(f"  🎯 Core 自動觸發 {len(tasks)} 個檢測任務")
scripts\ai_training\complete_flow_training.py         400 logger.info(f"  🚨 Function Workers 發現 {len(findings)} 個漏洞")
scripts\ai_training\complete_flow_training.py         407 logger.info(f"  📮 Core 轉發 {len(findings)} 個結果到 Integration")
scripts\ai_training\complete_flow_training.py         418 logger.info(f"  📄 Integration 生成報告: {report['report_id']}")
scripts\ai_training\complete_flow_training.py         425 logger.info(f"  ✉️ Core 通知 CLI 任務完成")
scripts\ai_training\complete_flow_training.py         431 logger.info("\n  🧠 AI 學習階段:")
scripts\ai_training\complete_flow_training.py         460 logger.info(f"     ✓ 學習到 {len(insights['learned_patterns'])}...
scripts\ai_training\complete_flow_training.py         464 logger.info(f"     ✓ 產生 {len(insights['optimization_suggesti...
scripts\ai_training\complete_flow_training.py         478 logger.info(f"  📤 CLI 發送檢測請求: {task['target']}")
scripts\ai_training\complete_flow_training.py         483 logger.info(f"  🔀 Core 派發到 {task['type'].upper()} Worker")
scripts\ai_training\complete_flow_training.py         496 logger.info(f"  🚨 SQLi Worker 發現漏洞: {finding['type']}")
scripts\ai_training\complete_flow_training.py         510 logger.info(f"  ⚠️ 模擬錯誤: {error_case['description']}")
scripts\ai_training\complete_flow_training.py         521 logger.info(f"  ✅ 恢復成功: {recovery['action']}")
scripts\ai_training\complete_flow_training.py         534 logger.info(f"\n💾 訓練數據已保存: {output_file}")
scripts\ai_training\complete_flow_training.py         597 logger.info(f"📊 訓練報告已生成: {report_file}")
scripts\ai_training\complete_flow_training.py         603 print("🤖 AIVA AI 強化訓練系統")
scripts\ai_training\complete_flow_training.py         607 print("  1️⃣  完整掃描到檢測流程 (Scan → Function → Integration)")
scripts\ai_training\complete_flow_training.py         608 print("  2️⃣  直接功能檢測流程 (跳過掃描)")
scripts\ai_training\complete_flow_training.py         609 print("  3️⃣  批量並行處理流程")
scripts\ai_training\complete_flow_training.py         610 print("  4️⃣  錯誤處理與恢復流程")
scripts\ai_training\complete_flow_training.py         632 print("✅ 訓練完成！")
scripts\ai_training\complete_flow_training.py         635 print(f"📂 訓練數據目錄: {output_dir}")
scripts\ai_training\complete_flow_training.py         636 print(f"📄 訓練數據: {orchestrator.training_session_id}.json")
scripts\ai_training\complete_flow_training.py         637 print(f"📊 訓練報告: {orchestrator.training_session_id}_report.md...
scripts\ai_training\complete_flow_training.py         639 print("🎯 下一步:")
scripts\ai_training\complete_flow_training.py         647 print("\n⚠️ 訓練被中斷")
scripts\ai_training\complete_flow_training.py         649 print(f"\n❌ 訓練失敗: {e}")
scripts\ai_training\integrated_cli_training.py         60 logger.info("✅ 訓練場景模擬器已初始化")
scripts\ai_training\integrated_cli_training.py         83 logger.info(f"🎬 場景 1: 掃描流程模擬")
scripts\ai_training\integrated_cli_training.py        116 logger.info("   🧠 AI 學習流程...")
scripts\ai_training\integrated_cli_training.py        140 logger.info(f"✅ 場景 1 完成: 發現 {len(scan_result.get('assets', [...
scripts\ai_training\integrated_cli_training.py        170 logger.info(f"🎬 場景 2: SQL 注入檢測流程")
scripts\ai_training\integrated_cli_training.py        233 logger.info(f"✅ 場景 2 完成: 發現 {len(findings)} 個 SQLi 漏洞")
scripts\ai_training\integrated_cli_training.py        256 logger.info(f"🎬 場景 3: 完整攻擊鏈模擬")
scripts\ai_training\integrated_cli_training.py        301 logger.info(f"✅ 場景 3 完成: 完整攻擊鏈分析")
scripts\ai_training\integrated_cli_training.py        472 logger.info("🧠 初始化 ScalableBioNet (500萬參數)...")
scripts\ai_training\integrated_cli_training.py        481 logger.info(f"   ✅ 神經網路參數量: {param_count:,}")
scripts\ai_training\integrated_cli_training.py        498 logger.info("🚀 初始化 AI 訓練系統...")
scripts\ai_training\integrated_cli_training.py        511 logger.info("✅ AI 訓練系統初始化完成")
scripts\ai_training\integrated_cli_training.py        517 logger.info(f"🎓 開始訓練: {num_scenarios} 個場景, {epochs} 輪")
scripts\ai_training\integrated_cli_training.py        542 logger.info(f"\n🔄 更新神經網路模型...")
scripts\ai_training\integrated_cli_training.py        545 logger.info(f"\n✅ 訓練完成！")
scripts\ai_training\integrated_cli_training.py        561 logger.info(f"   ✅ 模型更新完成 (Epoch {epoch})")
scripts\ai_training\integrated_cli_training.py        596 logger.info(f"\n📊 訓練統計:")
scripts\ai_training\test_integration.py                34 print("✅ CLI 解析器創建成功")
scripts\ai_training\test_integration.py                46 print(f"✅ 命令解析成功: {' '.join(cmd)}")
scripts\ai_training\test_integration.py                48 print(f"⚠️ 命令需要額外參數: {' '.join(cmd)}")
scripts\ai_training\test_integration.py                55 print(f"❌ CLI 測試失敗: {e}")
scripts\ai_training\test_integration.py                94 print(f"✅ 參數量正確 (預期: {expected_params:,})")
scripts\ai_training\test_integration.py                96 print(f"⚠️ 參數量不符 (預期: {expected_params:,}, 實際: {param_count:...
scripts\ai_training\test_integration.py               106 print(f"✅ 前向傳播成功")
scripts\ai_training\test_integration.py               112 print(f"❌ BioNeuron 測試失敗: {e}")
scripts\ai_training\test_integration.py               135 print("✅ 訓練編排器創建成功")
scripts\ai_training\test_integration.py               140 print("✅ 訓練系統初始化成功")
scripts\ai_training\test_integration.py               154 print(f"❌ 訓練組件測試失敗: {e}")
scripts\ai_training\test_integration.py               189 print("\n✅ 訓練測試完成")
scripts\ai_training\test_integration.py               194 print(f"❌ 訓練測試失敗: {e}")
scripts\ai_training\test_integration.py               210 status = "✅ 通過" if result else "❌ 失敗"
scripts\ai_training\test_integration.py               216 print("\n🎉 所有測試通過！系統已就緒。")
scripts\ai_training\test_integration.py               223 print("\n⚠️ 部分測試失敗，請檢查錯誤訊息。")
scripts\ai_training\test_integration.py               247 print("⏭️ 跳過訓練測試 (組件初始化失敗)\n")
scripts\analysis\combine_communication_flows.py        19 print(f"✅ 已載入 {len(self.flows)} 個流程圖")
scripts\analysis\combine_communication_flows.py        28 print(f"⚠️ 無法讀取 {mmd_file.name}: {e}")
scripts\analysis\combine_communication_flows.py        33 print("\n📊 組合任務派發流程...")
scripts\analysis\combine_communication_flows.py        50 print("\n📊 組合 SQLi 檢測流程...")
scripts\analysis\combine_communication_flows.py        67 print("\n📊 組合結果收集流程...")
scripts\analysis\combine_communication_flows.py        83 print("\n📊 組合掃描工作流程...")
scripts\analysis\combine_communication_flows.py       104 print(f"  ⚠️ 未找到流程圖: {comp_name}")
scripts\analysis\combine_communication_flows.py       131 print(f"  ✅ 已組合 {len([c for c in components if c in self.flo...
scripts\analysis\combine_communication_flows.py       174 print("\n💾 儲存組合流程圖...")
scripts\analysis\combine_communication_flows.py       178 print(f"  ✅ {output_file.name}")
scripts\analysis\combine_communication_flows.py       230 print(f"  ✅ README.md")
scripts\analysis\combine_communication_flows.py       236 print("🔧 AIVA 通訊流程圖組合工具")
scripts\analysis\combine_communication_flows.py       245 print(f"❌ 錯誤: 找不到流程圖目錄 {diagram_dir}")
scripts\analysis\combine_communication_flows.py       253 print("🎉 組圖完成！")
scripts\analysis\combine_communication_flows.py       254 print(f"📂 輸出目錄: {output_dir}")
scripts\analysis\extract_communication_patterns.py     29 print("🔍 開始掃描流程圖...")
scripts\analysis\extract_communication_patterns.py     49 print(f"  ⚠️ 處理 {mmd_file.name} 時出錯: {e}")
scripts\analysis\extract_communication_patterns.py     51 print(f"✅ 完成掃描 {total} 個流程圖\n")
scripts\analysis\extract_communication_patterns.py    197 "## 📊 整體統計",
scripts\analysis\extract_communication_patterns.py    210 "## 📤 Publisher 統計 (按模組)",
scripts\analysis\extract_communication_patterns.py    226 "## 📥 Subscriber 統計 (按模組)",
scripts\analysis\extract_communication_patterns.py    242 "## 🏷️ Topic 使用頻率 (Top 30)",
scripts\analysis\extract_communication_patterns.py    256 "## 🔄 主要消息流向 (Top 20)",
scripts\analysis\extract_communication_patterns.py    283 return "📋 任務派發"
scripts\analysis\extract_communication_patterns.py    285 return "📊 結果回報"
scripts\analysis\extract_communication_patterns.py    287 return "🎯 事件廣播"
scripts\analysis\extract_communication_patterns.py    289 return "🎮 指令控制"
scripts\analysis\extract_communication_patterns.py    291 return "💡 狀態同步"
scripts\analysis\extract_communication_patterns.py    293 return "🔁 反饋循環"
scripts\analysis\extract_communication_patterns.py    295 return "📝 日誌聚合"
scripts\analysis\extract_communication_patterns.py    297 return "❓ 其他"
scripts\analysis\extract_communication_patterns.py    302 "## 🎯 通訊模式分類",
scripts\analysis\extract_communication_patterns.py    375 print(f"✅ 通訊圖已匯出: {output_file}")
scripts\analysis\extract_communication_patterns.py    415 print(f"✅ JSON 資料已匯出: {output_file}")
scripts\analysis\extract_communication_patterns.py    421 print("🔍 AIVA 通訊模式提取工具")
scripts\analysis\extract_communication_patterns.py    431 print(f"❌ 錯誤: 找不到流程圖目錄 {diagram_dir}")
scripts\analysis\extract_communication_patterns.py    439 print("📝 生成報告...")
scripts\analysis\extract_communication_patterns.py    443 print(f"  ✅ {report_file.name}")
scripts\analysis\extract_communication_patterns.py    446 print("\n🎨 匯出通訊圖...")
scripts\analysis\extract_communication_patterns.py    451 print("\n💾 匯出 JSON 資料...")
scripts\analysis\extract_communication_patterns.py    456 print("🎉 分析完成！")
scripts\analysis\extract_communication_patterns.py    457 print(f"📂 輸出目錄: {output_dir}")
scripts\analysis\extract_communication_patterns.py    458 print("\n📌 後續步驟:")
