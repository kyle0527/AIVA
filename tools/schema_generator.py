#!/usr/bin/env python3
"""
統一 Schema 生成工具

此工具用於從 Python Pydantic 模型生成其他語言的型別定義，
確保跨語言型別一致性和同步更新。

使用方法:
    python schema_generator.py --source schemas/ --output-dir generated/
"""

import json
import subprocess
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List

import typer
from pydantic import BaseModel
from pydantic.json_schema import GenerateJsonSchema, JsonSchemaValue


class AIVAJsonSchemaGenerator(GenerateJsonSchema):
    """
    自定義 JSON Schema 生成器
    針對 AIVA 專案的特殊需求進行優化
    """

    def generate_schema(self, schema: JsonSchemaValue) -> Dict[str, Any]:
        """生成優化的 JSON Schema"""
        json_schema = super().generate_schema(schema)
        
        # 添加 AIVA 特定的元數據
        json_schema["$schema"] = "https://json-schema.org/draft/2020-12/schema"
        json_schema["$id"] = "https://aiva.security/schemas/main"
        json_schema["title"] = "AIVA Security Platform Schemas"
        json_schema["description"] = "Unified data schemas for AIVA security platform"
        json_schema["version"] = "1.0.0"
        json_schema["generated_at"] = datetime.utcnow().isoformat()
        json_schema["generator"] = "AIVA Official Schema Generator v1.0"
        
        return json_schema


class SchemaGenerator:
    """Schema 生成器主類"""
    
    def __init__(self, source_dir: Path, output_dir: Path):
        self.source_dir = source_dir
        self.output_dir = output_dir
        self.output_dir.mkdir(exist_ok=True, parents=True)
    
    def generate_typescript(self, json_schema: Dict[str, Any]) -> str:
        """生成 TypeScript 型別定義"""
        header = f"""// AUTO-GENERATED by AIVA Official Schema Generator v1.0
// Generated at: {datetime.utcnow().isoformat()}
// Do not edit manually - changes will be overwritten

"""
        
        # 這裡實作 JSON Schema 到 TypeScript 的轉換邏輯
        # 可以使用 json-schema-to-typescript 或自定義實作
        
        return header + self._json_schema_to_typescript(json_schema)
    
    def generate_go(self, json_schema: Dict[str, Any]) -> str:
        """生成 Go 結構體定義"""
        header = f"""// Code generated by AIVA Official Schema Generator v1.0. DO NOT EDIT.
// Generated at: {datetime.utcnow().isoformat()}
//
// To parse this JSON data, add this code to your project:
//    aivaSchemas, err := UnmarshalAIVASchemas(bytes)
//    bytes, err = aivaSchemas.Marshal()

package schemas

import (
	"encoding/json"
	"time"
)

"""
        
        return header + self._json_schema_to_go(json_schema)
    
    def generate_rust(self, json_schema: Dict[str, Any]) -> str:
        """生成 Rust 結構體定義"""
        header = f"""// Code generated by AIVA Official Schema Generator v1.0. DO NOT EDIT.
// Generated at: {datetime.utcnow().isoformat()}

use serde::{{Deserialize, Serialize}};
use chrono::{{DateTime, Utc}};
use std::collections::HashMap;

"""
        
        return header + self._json_schema_to_rust(json_schema)
    
    def _json_schema_to_typescript(self, schema: Dict[str, Any]) -> str:
        """將 JSON Schema 轉換為 TypeScript"""
        # TODO: 實作轉換邏輯
        return "// TypeScript definitions will be generated here\n"
    
    def _json_schema_to_go(self, schema: Dict[str, Any]) -> str:
        """將 JSON Schema 轉換為 Go"""
        # TODO: 實作轉換邏輯  
        return "// Go structs will be generated here\n"
    
    def _json_schema_to_rust(self, schema: Dict[str, Any]) -> str:
        """將 JSON Schema 轉換為 Rust"""
        # TODO: 實作轉換邏輯
        return "// Rust structs will be generated here\n"
    
    def generate_all(self) -> None:
        """生成所有語言的型別定義"""
        # 1. 從 Python 模型生成 JSON Schema
        json_schema = self._extract_json_schema()
        
        # 2. 保存 JSON Schema
        json_file = self.output_dir / "aiva_schemas.json"
        with open(json_file, 'w', encoding='utf-8') as f:
            json.dump(json_schema, f, indent=2, ensure_ascii=False)
        
        # 3. 生成各語言定義
        languages = {
            "aiva_schemas.d.ts": self.generate_typescript,
            "aiva_schemas.go": self.generate_go, 
            "aiva_schemas.rs": self.generate_rust,
        }
        
        for filename, generator in languages.items():
            content = generator(json_schema)
            output_file = self.output_dir / filename
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print(f"✅ Generated {filename}")
    
    def _extract_json_schema(self) -> Dict[str, Any]:
        """從 Python Pydantic 模型提取 JSON Schema"""
        # TODO: 動態導入所有 Pydantic 模型並生成統一 JSON Schema
        # 這需要遍歷 services/aiva_common/schemas/ 下的所有 Python 檔案
        return {
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "$defs": {},
            "title": "AIVA Schemas"
        }


def main(
    source_dir: Path = typer.Option(
        Path("services/aiva_common/schemas"),
        "--source",
        "-s", 
        help="Source directory containing Python schemas"
    ),
    output_dir: Path = typer.Option(
        Path("schemas/generated"),
        "--output-dir",
        "-o",
        help="Output directory for generated files"
    ),
    validate: bool = typer.Option(
        True,
        "--validate",
        help="Validate generated schemas"
    )
):
    """
    AIVA Schema Generator - 統一跨語言型別定義生成工具
    """
    print("🚀 AIVA Schema Generator v1.0")
    print(f"📂 Source: {source_dir}")
    print(f"📂 Output: {output_dir}")
    
    generator = SchemaGenerator(source_dir, output_dir)
    generator.generate_all()
    
    if validate:
        print("🔍 Validating generated schemas...")
        # TODO: 實作驗證邏輯
    
    print("✅ Schema generation completed successfully!")


if __name__ == "__main__":
    typer.run(main)