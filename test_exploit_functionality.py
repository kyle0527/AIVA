#!/usr/bin/env python3
"""
測試漏洞利用執行功能
針對 Juice Shop 靶場進行實際測試
"""

import asyncio
import sys
import os

# 添加路徑
sys.path.append(os.path.join(os.path.dirname(__file__), 'services/core'))
sys.path.append(os.path.join(os.path.dirname(__file__), 'services/aiva_common'))

async def test_exploit_manager():
    """測試漏洞利用管理器功能"""
    try:
        from aiva_core.attack.exploit_manager import ExploitManager
        from aiva_common.enums.security import ExploitType
        
        print("🚀 初始化漏洞利用管理器...")
        manager = ExploitManager()
        
        # 註冊測試漏洞利用
        test_exploits = [
            {
                'id': 'juice_shop_idor_test',
                'name': 'Juice Shop IDOR 測試',
                'type': ExploitType.IDOR,
                'payloads': ['user_id_1', 'user_id_2'],
                'description': '針對 Juice Shop 的 IDOR 漏洞測試'
            },
            {
                'id': 'juice_shop_sql_injection_test',
                'name': 'Juice Shop SQL 注入測試',
                'type': ExploitType.SQL_INJECTION,
                'payloads': ["' OR 1=1--", "admin'--"],
                'description': '針對 Juice Shop 的 SQL 注入測試'
            },
            {
                'id': 'juice_shop_xss_test',
                'name': 'Juice Shop XSS 測試',
                'type': ExploitType.XSS,
                'payloads': ["<script>alert('XSS')</script>", "<img src=x onerror=alert(1)>"],
                'description': '針對 Juice Shop 的 XSS 漏洞測試'
            }
        ]
        
        for exploit in test_exploits:
            manager.register_exploit(exploit)
            print(f"✅ 註冊漏洞利用: {exploit['name']}")
        
        print(f"\n📊 已註冊漏洞利用數量: {len(manager.exploit_registry)}")
        
        # 測試目標 (Juice Shop 容器)
        target = {'url': 'http://localhost:3000'}
        print(f"\n🎯 測試目標: {target['url']}")
        
        # 執行各種漏洞利用測試
        results = []
        
        for exploit_id in ['juice_shop_idor_test', 'juice_shop_sql_injection_test', 'juice_shop_xss_test']:
            print(f"\n🔍 執行漏洞利用: {exploit_id}")
            
            try:
                result = await manager.execute_exploit(exploit_id, target)
                results.append(result)
                
                print(f"  - 執行狀態: {'✅ 成功' if result.get('success') else '❌ 失敗'}")
                print(f"  - 漏洞類型: {result.get('exploit_type', 'unknown')}")
                print(f"  - 測試載荷: {result.get('payloads_tested', 0)} 個")
                print(f"  - 發現漏洞: {'⚠️ 是' if result.get('vulnerable') else '✅ 否'}")
                print(f"  - 發現問題: {len(result.get('findings', []))} 個")
                
                # 顯示發現的問題詳情
                findings = result.get('findings', [])
                if findings:
                    print("  - 問題詳情:")
                    for i, finding in enumerate(findings[:3], 1):  # 最多顯示前3個
                        severity = finding.get('severity', 'UNKNOWN')
                        vuln_type = finding.get('vulnerability', 'Unknown')
                        endpoint = finding.get('endpoint', 'N/A')
                        print(f"    {i}. [{severity}] {vuln_type} @ {endpoint}")
                
            except Exception as e:
                print(f"  - ❌ 測試失敗: {str(e)}")
                results.append({'success': False, 'error': str(e)})
        
        # 統計結果
        print(f"\n📈 測試總結:")
        successful_tests = sum(1 for r in results if r.get('success'))
        total_vulnerabilities = sum(len(r.get('findings', [])) for r in results)
        total_payloads = sum(r.get('payloads_tested', 0) for r in results)
        
        print(f"  - 成功執行測試: {successful_tests}/{len(results)}")
        print(f"  - 發現漏洞總數: {total_vulnerabilities}")
        print(f"  - 測試載荷總數: {total_payloads}")
        
        # 獲取統計資訊
        stats = manager.get_statistics()
        print(f"\n📊 管理器統計:")
        print(f"  - 註冊漏洞利用: {stats.get('total_exploits', 0)}")
        print(f"  - 總執行次數: {stats.get('total_executions', 0)}")
        
        return results
        
    except ImportError as e:
        print(f"❌ 導入錯誤: {e}")
        print("請確保所有必要的模組都已安裝")
        return None
    except Exception as e:
        print(f"❌ 測試過程中發生未預期錯誤: {e}")
        import traceback
        traceback.print_exc()
        return None

async def test_attack_executor():
    """測試攻擊執行器功能"""
    try:
        from aiva_core.attack.attack_executor import AttackExecutor
        
        print("\n🔧 測試攻擊執行器...")
        executor = AttackExecutor()
        
        # 模擬攻擊步驟
        test_step = {
            'type': 'idor',
            'payload': {
                'payloads': ['test1', 'test2']
            },
            'target': {'url': 'http://localhost:3000'}
        }
        
        target = {'url': 'http://localhost:3000'}
        
        print("🎯 執行攻擊步驟...")
        result = await executor._real_execute_step(test_step, target)
        
        print(f"  - 執行狀態: {'✅ 成功' if result.get('success') else '❌ 失敗'}")
        print(f"  - 訊息: {result.get('message', 'N/A')}")
        print(f"  - 發現問題: {len(result.get('findings', []))} 個")
        print(f"  - 測試載荷: {result.get('payloads_tested', 0)} 個")
        
        return result
        
    except Exception as e:
        print(f"❌ 攻擊執行器測試失敗: {e}")
        import traceback
        traceback.print_exc()
        return None

async def main():
    """主測試函數"""
    print("🧪 AIVA 漏洞利用執行功能測試")
    print("=" * 50)
    
    # 檢查 Juice Shop 是否運行
    try:
        import aiohttp
        
        async with aiohttp.ClientSession() as session:
            async with session.get('http://localhost:3000', timeout=aiohttp.ClientTimeout(total=5)) as response:
                if response.status == 200:
                    print("✅ Juice Shop 靶場連接正常")
                else:
                    print(f"⚠️ Juice Shop 回應異常 (HTTP {response.status})")
    except ImportError:
        print("⚠️ aiohttp 未安裝，無法進行實際網路測試")
    except Exception as e:
        print(f"⚠️ 無法連接到 Juice Shop: {e}")
        print("   請確保 Docker 容器正在運行在 localhost:3000")
    
    print("\n" + "=" * 50)
    
    # 測試漏洞利用管理器
    exploit_results = await test_exploit_manager()
    
    # 測試攻擊執行器
    executor_result = await test_attack_executor()
    
    print("\n" + "=" * 50)
    print("🏁 測試完成！")
    
    if exploit_results and any(r.get('success') for r in exploit_results):
        print("✅ 漏洞利用執行功能已成功實現")
    else:
        print("❌ 漏洞利用執行功能需要進一步調試")

if __name__ == "__main__":
    asyncio.run(main())