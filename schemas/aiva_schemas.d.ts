// AUTO-GENERATED from JSON Schema; do not edit manually.

export interface AIExperienceCreatedEvent { experience_id: string; training_id?: string | null; trace_id: string; vulnerability_type: string; quality_score: number; success: boolean; plan_summary?: {  }; result_summary?: {  }; metadata?: {  }; timestamp?: string; }
export interface AILanguageModel { model_name: string; supported_languages: ProgrammingLanguage[]; model_type: string; version: string; capabilities: string[]; training_data_size?: number | null; accuracy_metrics?: {  }; api_endpoint?: string | null; authentication_required?: boolean; }
export interface AIModelDeployCommand { model_id: string; model_version: string; checkpoint_path: string; deployment_target?: string; deployment_config?: {  }; require_validation?: boolean; min_performance_threshold?: {  }; metadata?: {  }; }
export interface AIModelUpdatedEvent { model_id: string; model_version: string; training_id?: string | null; update_type: string; performance_metrics?: {  }; model_path?: string | null; checkpoint_path?: string | null; is_deployed?: boolean; metadata?: {  }; timestamp?: string; }
export interface AITraceCompletedEvent { trace_id: string; session_id?: string | null; training_id?: string | null; total_steps: number; successful_steps: number; failed_steps: number; duration_seconds: number; final_success: boolean; plan_type: string; metadata?: {  }; timestamp?: string; }
export interface AITrainingCompletedPayload { training_id: string; status: string; total_episodes: number; successful_episodes: number; failed_episodes: number; total_duration_seconds: number; total_samples: number; high_quality_samples: number; medium_quality_samples: number; low_quality_samples: number; final_avg_reward?: number | null; final_avg_quality?: number | null; best_episode_reward?: number | null; model_checkpoint_path?: string | null; model_metrics?: {  }; error_message?: string | null; metadata?: {  }; completed_at?: string; }
export interface AITrainingProgressPayload { training_id: string; episode_number: number; total_episodes: number; successful_episodes?: number; failed_episodes?: number; total_samples?: number; high_quality_samples?: number; avg_reward?: number | null; avg_quality?: number | null; best_reward?: number | null; model_metrics?: {  }; status?: string; metadata?: {  }; timestamp?: string; }
export interface AITrainingStartPayload { training_id: string; training_type: string; scenario_id?: string | null; target_vulnerability?: string | null; config: ModelTrainingConfig; metadata?: {  }; }
export interface AIVACommand { command_id: string; command_type: string; source_module: string; target_module: string; payload: {  }; priority?: number; trace_id?: string | null; metadata?: {  }; timestamp: string; }
export interface AIVAEvent { event_id: string; event_type: string; source_module: string; payload: {  }; trace_id?: string | null; metadata?: {  }; timestamp: string; }
export interface AIVARequest { request_id: string; source_module: string; target_module: string; request_type: string; payload: {  }; trace_id?: string | null; timeout_seconds?: number; metadata?: {  }; timestamp: string; }
export interface AIVAResponse { request_id: string; response_type: string; success: boolean; payload?: {  } | null; error_code?: string | null; error_message?: string | null; metadata?: {  }; timestamp: string; }
export interface AIVerificationRequest { verification_id: string; finding_id: string; scan_id: string; vulnerability_type: VulnerabilityType; target: Target; evidence: FindingEvidence; verification_mode?: string; context?: {  }; }
export interface AIVerificationResult { verification_id: string; finding_id: string; verification_status: string; confidence_score: number; verification_method: string; test_steps?: string[]; observations?: string[]; recommendations?: string[]; timestamp?: string; }
export interface APISchemaPayload { schema_id: string; scan_id: string; schema_type: string; schema_content: {  } | string; base_url: string; authentication?: Authentication; }
export interface APISecurityTestPayload { task_id: string; scan_id: string; api_type: string; api_schema?: APISchemaPayload | null; test_cases?: APITestCase[]; authentication?: Authentication; }
export interface APITestCase { test_id: string; test_type: string; endpoint: string; method: string; test_vectors?: {  }[]; expected_behavior?: string | null; }
export interface AivaMessage { header: MessageHeader; topic: Topic; schema_version?: string; payload: {  }; }
export interface Asset { asset_id: string; type: string; value: string; parameters?: string[] | null; has_form?: boolean; }
export interface AssetInventoryItem { asset_id: string; asset_type: string; name: string; ip_address?: string | null; hostname?: string | null; domain?: string | null; ports?: number[]; fingerprints?: TechnicalFingerprint[]; business_criticality: string; owner?: string | null; environment: string; last_scanned?: string | null; vulnerability_count: number; risk_score: number; discovered_at?: string; updated_at?: string; metadata?: {  }; }
export interface AssetLifecyclePayload { asset_id: string; asset_type: AssetType; value: string; environment: Environment; business_criticality: BusinessCriticality; data_sensitivity?: DataSensitivity | null; asset_exposure?: AssetExposure | null; owner?: string | null; team?: string | null; compliance_tags?: ComplianceFramework[]; metadata?: {  }; created_at?: string; }
export interface AttackPathEdge { edge_id: string; source_node_id: string; target_node_id: string; edge_type: AttackPathEdgeType; risk_score?: number; properties?: {  }; }
export interface AttackPathNode { node_id: string; node_type: AttackPathNodeType; name: string; properties?: {  }; }
export interface AttackPathPayload { path_id: string; scan_id: string; source_node: AttackPathNode; target_node: AttackPathNode; nodes: AttackPathNode[]; edges: AttackPathEdge[]; total_risk_score: number; path_length: number; description?: string | null; timestamp?: string; }
export interface AttackPathRecommendation { path_id: string; risk_level: RiskLevel; priority_score: number; executive_summary: string; technical_explanation: string; business_impact: string; remediation_steps: string[]; quick_wins?: string[]; affected_assets?: string[]; estimated_effort: string; estimated_risk_reduction: number; timestamp?: string; }
export interface AttackPlan { plan_id: string; scan_id: string; attack_type: VulnerabilityType; steps: AttackStep[]; dependencies?: {  }; context?: {  }; target_info?: {  }; created_at?: string; created_by?: string; mitre_techniques?: string[]; mitre_tactics?: string[]; capec_id?: string | null; metadata?: {  }; }
export interface AttackStep { step_id: string; action: string; tool_type: string; target?: {  }; parameters?: {  }; expected_result?: string | null; timeout_seconds?: number; retry_count?: number; mitre_technique_id?: string | null; mitre_tactic?: string | null; metadata?: {  }; }
export interface AuthZAnalysisPayload { task_id: string; scan_id: string; analysis_type: string; target?: string | null; }
export interface AuthZCheckPayload { task_id: string; scan_id: string; user_id: string; resource: string; permission: string; context?: {  }; }
export interface AuthZResultPayload { task_id: string; scan_id: string; decision: string; analysis?: {  }; recommendations?: string[]; timestamp?: string; }
export interface Authentication { method?: string; credentials?: {  } | null; }
export interface BizLogicResultPayload { task_id: string; scan_id: string; test_type: string; status: string; findings?: {  }[]; statistics?: {  }; timestamp?: string; }
export interface BizLogicTestPayload { task_id: string; scan_id: string; test_type: string; target_urls: {  }; test_config?: {  }; product_id?: string | null; workflow_steps?: {  }[]; }
export interface CVEReference { cve_id: string; description?: string | null; cvss_score?: number | null; cvss_vector?: string | null; references?: string[]; published_date?: string | null; last_modified_date?: string | null; }
export interface CVSSv3Metrics { attack_vector: "N" | "A" | "L" | "P"; attack_complexity: "L" | "H"; privileges_required: "N" | "L" | "H"; user_interaction: "N" | "R"; scope: "U" | "C"; confidentiality: "N" | "L" | "H"; integrity: "N" | "L" | "H"; availability: "N" | "L" | "H"; exploit_code_maturity?: "X" | "H" | "F" | "P" | "U"; remediation_level?: "X" | "U" | "W" | "T" | "O"; report_confidence?: "X" | "C" | "R" | "U"; confidentiality_requirement?: "X" | "L" | "M" | "H"; integrity_requirement?: "X" | "L" | "M" | "H"; availability_requirement?: "X" | "L" | "M" | "H"; base_score?: number | null; temporal_score?: number | null; environmental_score?: number | null; vector_string?: string | null; }
export interface CWEReference { cwe_id: string; name?: string | null; description?: string | null; weakness_category?: string | null; likelihood_of_exploit?: string | null; }
export interface CodeLevelRootCause { analysis_id: string; vulnerable_component: string; affected_findings: string[]; code_location?: string | null; vulnerability_pattern?: string | null; fix_recommendation?: string | null; }
export interface CodeQualityReport { language: ProgrammingLanguage; file_path: string; metrics: {  }; issues?: string[]; suggestions?: string[]; overall_score: number; timestamp: string; }
export interface ConfigUpdatePayload { update_id: string; config_items?: {  }; }
export interface CrossLanguageAnalysis { analysis_id: string; project_name: string; languages_analyzed: ProgrammingLanguage[]; cross_language_issues?: string[]; integration_points?: string[]; security_boundaries?: string[]; data_flow_risks?: string[]; recommendations?: string[]; risk_score: number; }
export interface DiscoveredAsset { asset_id: string; asset_type: AssetType; value: string; discovery_method: string; confidence: Confidence; metadata?: {  }; discovered_at?: string; }
export interface EASMAsset { asset_id: string; asset_type: string; value: string; discovery_method: string; discovery_source: string; first_discovered: string; last_seen: string; status: string; confidence: number; technologies?: string[]; services?: {  }[]; certificates?: {  }[]; risk_score: number; vulnerability_count: number; exposure_level: string; business_unit?: string | null; owner?: string | null; criticality: string; compliance_status?: {  }; policy_violations?: string[]; metadata?: {  }; }
export interface EASMDiscoveryPayload { discovery_id: string; scan_id: string; discovery_type: string; targets: string[]; scope?: ScanScope; max_depth?: number; passive_only?: boolean; }
export interface EASMDiscoveryResult { discovery_id: string; scan_id: string; status: string; discovered_assets?: {  }[]; statistics?: {  }; timestamp?: string; }
export interface EnhancedAttackPath { path_id: string; target_asset: string; nodes: EnhancedAttackPathNode[]; edges: {  }[]; path_feasibility: number; estimated_time: number; skill_level_required: string; success_probability: number; detection_probability: number; overall_risk: number; blocking_controls?: string[]; detection_controls?: string[]; metadata?: {  }; }
export interface EnhancedAttackPathNode { node_id: string; node_type: string; name: string; description?: string | null; exploitability: number; impact: number; difficulty: number; mitre_technique?: string | null; mitre_tactic?: string | null; prerequisites?: string[]; consequences?: string[]; metadata?: {  }; }
export interface EnhancedFindingPayload { finding_id: string; task_id: string; scan_id: string; status: string; vulnerability: EnhancedVulnerability; target: Target; strategy?: string | null; evidence?: FindingEvidence | null; impact?: FindingImpact | null; recommendation?: FindingRecommendation | null; sarif_result?: SARIFResult | null; metadata?: {  }; created_at?: string; updated_at?: string; }
export interface EnhancedFunctionTaskTarget { url: string; method?: string; headers?: {  }; cookies?: {  }; parameters?: {  }; body?: string | null; auth_required?: boolean; }
export interface EnhancedIOCRecord { ioc_id: string; ioc_type: string; value: string; threat_type?: string | null; malware_family?: string | null; campaign?: string | null; severity: Severity; confidence: number; reputation_score: number; first_seen?: string | null; last_seen?: string | null; expires_at?: string | null; tags?: string[]; mitre_techniques?: string[]; metadata?: {  }; }
export interface EnhancedRiskAssessment { assessment_id: string; target_id: string; overall_risk_score: number; likelihood_score: number; impact_score: number; risk_level: Severity; risk_category: string; risk_factors: RiskFactor[]; cvss_metrics?: CVSSv3Metrics | null; business_impact?: string | null; affected_assets?: string[]; mitigation_strategies?: string[]; residual_risk: number; assessed_at?: string; valid_until?: string | null; metadata?: {  }; }
export interface EnhancedScanRequest { scan_id: string; targets: string[]; scope: EnhancedScanScope; strategy: string; priority?: number; max_duration?: number; metadata?: {  }; }
export interface EnhancedScanScope { included_hosts?: string[]; excluded_hosts?: string[]; included_paths?: string[]; excluded_paths?: string[]; max_depth?: number; }
export interface EnhancedTaskExecution { task_id: string; task_type: string; module_name: ModuleName; priority: number; timeout?: number; retry_count?: number; dependencies?: TaskDependency[]; status: TestStatus; progress: number; result_data?: {  }; error_message?: string | null; cpu_usage?: number | null; memory_usage?: number | null; created_at?: string; started_at?: string | null; completed_at?: string | null; metadata?: {  }; }
export interface EnhancedVulnerability { vulnerability_id: string; title: string; description: string; vulnerability_type: string; severity: "low" | "medium" | "high" | "critical"; url: string; parameter?: string | null; location: string; cvss_metrics?: CVSSv3Metrics | null; ai_confidence: number; ai_risk_assessment?: {  }; exploitability_score: number; attack_vector: string; attack_complexity: string; prerequisites?: string[]; business_impact?: {  }; technical_impact?: {  }; remediation_effort: string; remediation_priority: number; fix_recommendations?: string[]; poc_available?: boolean; verified?: boolean; false_positive_probability: number; discovered_at?: string; last_verified_at?: string | null; tags?: string[]; references?: string[]; metadata?: {  }; }
export interface EnhancedVulnerabilityCorrelation { correlation_id: string; primary_vulnerability: string; related_vulnerabilities: string[]; correlation_strength: number; correlation_type: string; combined_risk_score: number; exploitation_complexity: number; attack_scenarios?: string[]; recommended_order?: string[]; coordinated_mitigation?: string[]; priority_ranking?: string[]; analyzed_at?: string; metadata?: {  }; }
export interface ExecutionError { error_id: string; error_type: string; message: string; payload?: string | null; vector?: string | null; timestamp?: string; attempts?: number; }
export interface ExperienceSample { sample_id: string; session_id: string; plan_id: string; state_before: {  }; action_taken: {  }; state_after: {  }; reward: number; reward_breakdown?: {  }; context?: {  }; target_info?: {  }; timestamp?: string; duration_ms?: number | null; quality_score?: number | null; is_positive: boolean; confidence?: number; learning_tags?: string[]; difficulty_level?: number; }
export interface ExploitPayload { payload_id: string; payload_type: string; payload_content: string; encoding?: string; obfuscation?: boolean; bypass_technique?: string | null; target_technology?: string[]; required_context?: {  }; effectiveness_score: number; detection_evasion: number; success_rate: number; usage_count: number; metadata?: {  }; }
export interface ExploitResult { result_id: string; exploit_id: string; target_id: string; success: boolean; severity: Severity; impact_level: string; exploit_technique: string; payload_used: string; execution_time: number; access_gained?: {  }; data_extracted?: string[]; system_impact?: string | null; detection_bypassed: boolean; artifacts_left?: string[]; remediation_verified?: boolean; retest_required?: boolean; executed_at?: string; metadata?: {  }; }
export interface FeedbackEventPayload { task_id: string; scan_id: string; event_type: string; details?: {  }; form_url?: string | null; }
export interface FindingEvidence { payload?: string | null; response_time_delta?: number | null; db_version?: string | null; request?: string | null; response?: string | null; proof?: string | null; }
export interface FindingImpact { description?: string | null; business_impact?: string | null; technical_impact?: string | null; affected_users?: number | null; estimated_cost?: number | null; }
export interface FindingPayload { finding_id: string; task_id: string; scan_id: string; status: string; vulnerability: Vulnerability; target: Target; strategy?: string | null; evidence?: FindingEvidence | null; impact?: FindingImpact | null; recommendation?: FindingRecommendation | null; metadata?: {  }; created_at?: string; updated_at?: string; }
export interface FindingRecommendation { fix?: string | null; priority?: string | null; remediation_steps?: string[]; references?: string[]; }
export interface Fingerprints { web_server?: {  } | null; framework?: {  } | null; language?: {  } | null; waf_detected?: boolean; waf_vendor?: string | null; }
export interface FunctionExecutionResult { findings: {  }[]; telemetry: {  }; errors?: {  }[]; duration_seconds?: number; timestamp?: string; }
export interface FunctionTaskContext { db_type_hint?: string | null; waf_detected?: boolean; related_findings?: string[] | null; }
export interface FunctionTaskPayload { task_id: string; scan_id: string; priority?: number; target: FunctionTaskTarget; context?: FunctionTaskContext; strategy?: string; custom_payloads?: string[] | null; test_config?: FunctionTaskTestConfig; }
export interface FunctionTaskTarget { url: any; parameter?: string | null; method?: string; parameter_location?: string; headers?: {  }; cookies?: {  }; form_data?: {  }; json_data?: {  } | null; body?: string | null; }
export interface FunctionTaskTestConfig { payloads?: string[]; custom_payloads?: string[]; blind_xss?: boolean; dom_testing?: boolean; timeout?: number | null; }
export interface FunctionTelemetry { payloads_sent?: number; detections?: number; attempts?: number; errors?: string[]; duration_seconds?: number; timestamp?: string; }
export interface HeartbeatPayload { module: ModuleName; worker_id: string; capacity: number; }
export interface JavaScriptAnalysisResult { analysis_id: string; url: string; source_size_bytes: number; dangerous_functions?: string[]; external_resources?: string[]; data_leaks?: {  }[]; findings?: string[]; apis_called?: string[]; ajax_endpoints?: string[]; suspicious_patterns?: string[]; risk_score?: number; security_score?: number; timestamp?: string; }
export interface LanguageDetectionResult { primary_language: ProgrammingLanguage; confidence: number; secondary_languages?: ProgrammingLanguage[]; frameworks?: LanguageFramework[]; file_extensions?: string[]; lines_of_code: number; }
export interface LanguageInteroperability { source_language: ProgrammingLanguage; target_language: ProgrammingLanguage; interop_method: string; security_considerations?: string[]; performance_impact?: string | null; compatibility_issues?: string[]; recommendations?: string[]; }
export interface LanguageSpecificPayload { language: ProgrammingLanguage; payload_type: string; payload_content: string; encoding?: string; expected_behavior?: string | null; bypass_techniques?: string[]; target_functions?: string[]; success_indicators?: string[]; }
export interface LanguageSpecificScanConfig { language: ProgrammingLanguage; scan_patterns: SecurityPattern[]; quality_metrics?: CodeQualityMetric[]; exclude_paths?: string[]; include_patterns?: string[]; custom_rules?: string[]; max_file_size?: number; timeout_seconds?: number; }
export interface LanguageSpecificVulnerability { language: ProgrammingLanguage; vulnerability_type: VulnerabilityByLanguage; severity: Severity; description: string; code_snippet?: string | null; line_number?: number | null; file_path?: string | null; function_name?: string | null; remediation?: string | null; cwe_id?: string | null; owasp_category?: string | null; }
export interface MessageHeader { message_id: string; trace_id: string; correlation_id?: string | null; source_module: ModuleName; timestamp?: string; version?: string; }
export interface ModelTrainingConfig { config_id: string; model_type: string; training_mode: string; batch_size?: number; learning_rate?: number; epochs?: number; validation_split?: number; early_stopping?: boolean; patience?: number; reward_function?: string; discount_factor?: number; exploration_rate?: number; hyperparameters?: {  }; metadata?: {  }; }
export interface ModelTrainingResult { training_id: string; config: {  }; model_version: string; training_samples: number; validation_samples: number; training_loss: number; validation_loss: number; accuracy?: number | null; precision?: number | null; recall?: number | null; f1_score?: number | null; average_reward?: number | null; training_duration_seconds?: number; started_at?: string; completed_at?: string; metrics?: {  }; model_path?: string | null; metadata?: {  }; }
export interface ModuleStatus { module: ModuleName; status: string; worker_id: string; worker_count?: number; queue_size?: number; tasks_completed?: number; tasks_failed?: number; last_heartbeat?: string; metrics?: {  }; uptime_seconds?: number; }
export interface MultiLanguageCodebase { project_name: string; languages: {  }; primary_language: ProgrammingLanguage; frameworks?: LanguageFramework[]; total_files: number; total_lines: number; vulnerability_distribution?: {  }; dependencies?: {  }; }
export interface NotificationPayload { notification_id: string; notification_type: string; priority: string; title: string; message: string; details?: {  }; recipients?: string[]; attachments?: {  }[]; timestamp?: string; }
export interface OastEvent { event_id: string; probe_token: string; event_type: string; source_ip: string; timestamp?: string; protocol?: string | null; raw_request?: string | null; raw_data?: {  }; }
export interface OastProbe { probe_id: string; token: string; callback_url: string; task_id: string; scan_id: string; created_at?: string; expires_at?: string | null; status?: string; }
export interface PlanExecutionMetrics { plan_id: string; session_id: string; expected_steps: number; executed_steps: number; completed_steps: number; failed_steps: number; skipped_steps: number; extra_actions: number; completion_rate: number; success_rate: number; sequence_accuracy: number; goal_achieved: boolean; reward_score: number; total_execution_time: number; timestamp?: string; }
export interface PlanExecutionResult { result_id: string; plan_id: string; session_id: string; plan: AttackPlan; trace: TraceRecord[]; metrics: PlanExecutionMetrics; findings?: {  }[]; anomalies?: string[]; recommendations?: string[]; status: string; completed_at?: string; metadata?: {  }; }
export interface PostExResultPayload { task_id: string; scan_id: string; test_type: PostExTestType; findings?: {  }[]; risk_level: ThreatLevel; safe_mode: boolean; authorization_verified?: boolean; timestamp?: string; }
export interface PostExTestPayload { task_id: string; scan_id: string; test_type: PostExTestType; target: string; safe_mode?: boolean; authorization_token?: string | null; context?: {  }; }
export interface RAGKnowledgeUpdatePayload { knowledge_type: string; content: string; source_id?: string | null; category?: string | null; tags?: string[]; related_cve?: string | null; related_cwe?: string | null; mitre_techniques?: string[]; confidence?: number; metadata?: {  }; }
export interface RAGQueryPayload { query_id: string; query_text: string; top_k?: number; min_similarity?: number; knowledge_types?: string[] | null; categories?: string[] | null; metadata?: {  }; }
export interface RAGResponsePayload { query_id: string; results?: {  }[]; total_results: number; avg_similarity?: number | null; enhanced_context?: string | null; metadata?: {  }; timestamp?: string; }
export interface RateLimit { requests_per_second?: number; burst?: number; }
export interface RemediationGeneratePayload { task_id: string; scan_id: string; finding_id: string; vulnerability_type: VulnerabilityType; remediation_type: RemediationType; context?: {  }; auto_apply?: boolean; }
export interface RemediationResultPayload { task_id: string; scan_id: string; finding_id: string; remediation_type: RemediationType; status: string; patch_content?: string | null; instructions?: string[]; verification_steps?: string[]; risk_assessment?: {  }; timestamp?: string; }
export interface RiskAssessmentContext { environment: Environment; business_criticality: BusinessCriticality; data_sensitivity?: DataSensitivity | null; asset_exposure?: AssetExposure | null; compliance_tags?: ComplianceFramework[]; asset_value?: number | null; user_base?: number | null; sla_hours?: number | null; }
export interface RiskAssessmentResult { finding_id: string; technical_risk_score: number; business_risk_score: number; risk_level: RiskLevel; priority_score: number; context_multiplier: number; business_impact?: {  }; recommendations?: string[]; estimated_effort?: string | null; timestamp?: string; }
export interface RiskFactor { factor_name: string; weight: number; value: number; description?: string | null; }
export interface RiskTrendAnalysis { period_start: string; period_end: string; total_vulnerabilities: number; risk_distribution: {  }; average_risk_score: number; trend: string; improvement_percentage?: number | null; top_risks?: {  }[]; }
export interface SARIFLocation { uri: string; start_line?: number | null; start_column?: number | null; end_line?: number | null; end_column?: number | null; }
export interface SARIFReport { version?: string; $schema?: string; runs: SARIFRun[]; properties?: {  }; }
export interface SARIFResult { rule_id: string; message: string; level: "error" | "warning" | "info" | "note"; locations: SARIFLocation[]; partial_fingerprints?: {  }; properties?: {  }; }
export interface SARIFRule { id: string; name: string; short_description: string; full_description?: string | null; help_uri?: string | null; default_level?: "error" | "warning" | "info" | "note"; properties?: {  }; }
export interface SARIFRun { tool: SARIFTool; results: SARIFResult[]; invocations?: {  }[]; artifacts?: {  }[]; properties?: {  }; }
export interface SARIFTool { name: string; version: string; information_uri?: string | null; rules?: SARIFRule[]; }
export interface SASTDASTCorrelation { correlation_id: string; sast_finding_id: string; dast_finding_id: string; data_flow_path: string[]; verification_status: string; confidence_score: number; explanation?: string | null; }
export interface SIEMEvent { event_id: string; event_type: string; source_system: string; timestamp: string; received_at?: string; severity: Severity; category: string; subcategory?: string | null; source_ip?: string | null; source_port?: number | null; destination_ip?: string | null; destination_port?: number | null; username?: string | null; asset_id?: string | null; hostname?: string | null; description: string; raw_log?: string | null; correlation_rules?: string[]; related_events?: string[]; status?: string; assigned_to?: string | null; metadata?: {  }; }
export interface SIEMEventPayload { event_id: string; event_type: string; severity: string; source: string; destination?: string | null; message: string; details?: {  }; timestamp?: string; }
export interface ScanCompletedPayload { scan_id: string; status: string; summary: Summary; assets?: Asset[]; fingerprints?: Fingerprints | null; error_info?: string | null; }
export interface ScanScope { exclusions?: string[]; include_subdomains?: boolean; allowed_hosts?: string[]; }
export interface ScanStartPayload { scan_id: string; targets: string[]; scope?: ScanScope; authentication?: Authentication; strategy?: string; rate_limit?: RateLimit; custom_headers?: {  }; x_forwarded_for?: string | null; }
export interface ScenarioTestResult { test_id: string; scenario_id: string; model_version: string; generated_plan: {  }; execution_result: {  }; score: number; comparison: {  }; passed: boolean; tested_at?: string; metadata?: {  }; }
export interface SensitiveMatch { match_id: string; pattern_name: string; matched_text: string; context: string; confidence: number; line_number?: number | null; file_path?: string | null; url?: string | null; severity?: Severity; }
export interface SessionState { session_id: string; plan_id: string; scan_id: string; status: string; current_step_index?: number; completed_steps?: string[]; pending_steps?: string[]; context?: {  }; variables?: {  }; started_at?: string; updated_at?: string; timeout_at?: string | null; metadata?: {  }; }
export interface StandardScenario { scenario_id: string; name: string; description: string; vulnerability_type: VulnerabilityType; difficulty_level: string; target_config: {  }; expected_plan: {  }; success_criteria: {  }; tags?: string[]; created_at?: string; metadata?: {  }; }
export interface Summary { urls_found?: number; forms_found?: number; apis_found?: number; scan_duration_seconds?: number; }
export interface SystemOrchestration { orchestration_id: string; orchestration_name: string; module_statuses: EnhancedModuleStatus[]; scan_configuration?: {  }; resource_allocation?: {  }; overall_status: string; active_scans: number; queued_tasks: number; system_cpu: number; system_memory: number; network_throughput: number; created_at?: string; updated_at?: string; metadata?: {  }; }
export interface Target { url: any; parameter?: string | null; method?: string | null; headers?: {  }; params?: {  }; body?: string | null; }
export interface TaskDependency { dependency_type: string; dependent_task_id: string; condition?: string | null; required?: boolean; }
export interface TaskQueue { queue_id: string; queue_name: string; max_concurrent_tasks?: number; task_timeout?: number; pending_tasks?: string[]; running_tasks?: string[]; completed_tasks?: string[]; total_processed: number; success_rate: number; average_execution_time: number; created_at?: string; last_activity?: string; metadata?: {  }; }
export interface TaskUpdatePayload { task_id: string; scan_id: string; status: string; worker_id: string; details?: {  } | null; }
export interface TechnicalFingerprint { technology: string; version?: string | null; confidence: number; detection_method: string; evidence?: string[]; category: string; subcategory?: string | null; known_vulnerabilities?: string[]; eol_status?: boolean | null; metadata?: {  }; }
export interface TestExecution { execution_id: string; test_case_id: string; target_url: string; timeout?: number; retry_attempts?: number; status: TestStatus; start_time?: string; end_time?: string | null; duration?: number | null; success: boolean; vulnerability_found: boolean; confidence_level: Confidence; request_data?: {  }; response_data?: {  }; evidence?: string[]; error_message?: string | null; cpu_usage?: number | null; memory_usage?: number | null; network_traffic?: number | null; metadata?: {  }; }
export interface TestStrategy { strategy_id: string; strategy_name: string; target_type: string; test_categories: string[]; test_sequence: string[]; parallel_execution?: boolean; trigger_conditions?: string[]; stop_conditions?: string[]; priority_weights?: {  }; resource_limits?: {  }; learning_enabled?: boolean; adaptation_threshold: number; effectiveness_score: number; usage_count: number; success_rate: number; created_at?: string; metadata?: {  }; }
export interface ThreatIntelLookupPayload { task_id: string; scan_id: string; indicator: string; indicator_type: IOCType; sources?: IntelSource[] | null; enrich?: boolean; }
export interface ThreatIntelResultPayload { task_id: string; scan_id: string; indicator: string; indicator_type: IOCType; threat_level: ThreatLevel; sources?: {  }; mitre_techniques?: string[]; enrichment_data?: {  }; timestamp?: string; }
export interface TraceRecord { trace_id: string; plan_id: string; step_id: string; session_id: string; tool_name: string; input_data?: {  }; output_data?: {  }; status: string; error_message?: string | null; execution_time_seconds?: number; timestamp?: string; environment_response?: {  }; metadata?: {  }; }
export interface Vulnerability { name: VulnerabilityType; cwe?: string | null; cve?: string | null; severity: Severity; confidence: Confidence; description?: string | null; cvss_score?: number | null; cvss_vector?: string | null; owasp_category?: string | null; }
export interface VulnerabilityCorrelation { correlation_id: string; correlation_type: string; related_findings: string[]; confidence_score: number; root_cause?: string | null; common_components?: string[]; explanation?: string | null; timestamp?: string; }
export interface VulnerabilityDiscovery { discovery_id: string; vulnerability_id: string; asset_id: string; title: string; description: string; severity: Severity; confidence: Confidence; vulnerability_type: string; affected_component?: string | null; attack_vector?: string | null; detection_method: string; scanner_name: string; scan_rule_id?: string | null; evidence?: string[]; proof_of_concept?: string | null; false_positive_likelihood: number; impact_assessment?: string | null; exploitability?: string | null; remediation_advice?: string | null; remediation_priority?: string | null; cve_ids?: string[]; cwe_ids?: string[]; cvss_score?: number | null; discovered_at?: string; metadata?: {  }; }
export interface VulnerabilityLifecyclePayload { vulnerability_id: string; finding_id: string; asset_id: string; vulnerability_type: VulnerabilityType; severity: Severity; confidence: Confidence; status: VulnerabilityStatus; exploitability?: Exploitability | null; assigned_to?: string | null; due_date?: string | null; first_detected?: string; last_seen?: string; resolution_date?: string | null; metadata?: {  }; }
export interface VulnerabilityUpdatePayload { vulnerability_id: string; status: VulnerabilityStatus; assigned_to?: string | null; comment?: string | null; metadata?: {  }; updated_by?: string | null; timestamp?: string; }
export interface WebhookPayload { webhook_id: string; event_type: string; source: string; timestamp?: string; data?: {  }; delivery_url?: string | null; retry_count?: number; max_retries?: number; status?: string; delivered_at?: string | null; error_message?: string | null; metadata?: {  }; }
