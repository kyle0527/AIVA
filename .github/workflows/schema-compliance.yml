# =====================================================
# AIVA Schema Compliance Check - GitHub Actions Workflow
# =====================================================
# 
# 狀態: 🔴 暫時停用 (2025-10-26)
# 原因: Schema 標準化項目已 100% 完成，所有 7 個模組已達到完全合規
# 
# 完成狀態:
# ✅ Go 模組 (4個): 100% 使用 aiva_common_go/schemas/generated  
# ✅ Rust 模組 (2個): 100% 實現標準 schema 結構
# ✅ TypeScript 模組 (1個): 100% 使用 schemas/aiva_schemas
# ✅ 驗證工具: 本地運行完美，支持 CI/CD 模式
# 
# 重新啟用方法:
# 1. 移除所有行首的 "# " 註釋符號
# 2. 根據需要調整觸發條件和檢查參數
# 3. 確保 tools/ci_schema_check.py 可正常運行
#
# 本地檢查命令:
# python tools/schema_compliance_validator.py --ci-mode
# 
# =====================================================

# name: Schema Compliance Check
# 
# on:
#   push:
#     branches: [ main, develop ]
#   pull_request:
#     branches: [ main, develop ]
#     paths:
#       - 'services/**'
#       - 'schemas/**'
#       - 'tools/schema_compliance_validator.py'
#       - 'tools/ci_schema_check.py'
# 
# jobs:
#   schema-compliance:
#     runs-on: ubuntu-latest
#     
#     steps:
#     - uses: actions/checkout@v4
#     
#     - name: Set up Python
#       uses: actions/setup-python@v5
#       with:
#         python-version: '3.11'
#     
#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install toml
#     
#     - name: Run Schema Compliance Check
#       id: schema_check
#       run: |
#         cd ${{ github.workspace }}
#         python tools/ci_schema_check.py --pr-comment
#       continue-on-error: true
#     
#     - name: Upload Compliance Report
#       if: always()
#       uses: actions/upload-artifact@v4
#       with:
#         name: schema-compliance-report
#         path: |
#           schema_compliance_result.properties
#           *.json
#         retention-days: 30
#     
#     - name: Comment on PR
#       if: github.event_name == 'pull_request' && always()
#       uses: actions/github-script@v7
#       with:
#         github-token: ${{ secrets.GITHUB_TOKEN }}
#         script: |
#           const fs = require('fs');
#           
#           // 讀取檢查結果
#           let commentBody = '## 🔍 Schema 合規性檢查結果\n\n';
#           
#           try {
#             // 檢查是否有合規性報告文件
#             if (fs.existsSync('schema_compliance_result.properties')) {
#               const props = fs.readFileSync('schema_compliance_result.properties', 'utf8');
#               const lines = props.split('\n');
#               
#               let success = false;
#               let score = 0;
#               
#               for (const line of lines) {
#                 if (line.startsWith('SCHEMA_COMPLIANCE_SUCCESS=')) {
#                   success = line.split('=')[1] === 'true';
#                 }
#                 if (line.startsWith('SCHEMA_COMPLIANCE_SCORE=')) {
#                   score = parseFloat(line.split('=')[1]);
#                 }
#               }
#               
#               if (success) {
#                 commentBody += `✅ **檢查通過** - 平均分數: ${score.toFixed(1)}/100\n\n`;
#                 commentBody += '所有模組均符合 Schema 標準化要求。\n\n';
#               } else {
#                 commentBody += `❌ **檢查失敗** - 平均分數: ${score.toFixed(1)}/100\n\n`;
#                 commentBody += '發現模組未遵循標準 Schema，請查看詳細報告進行修復。\n\n';
#               }
#               
#               commentBody += '### 📋 檢查範圍\n';
#               commentBody += '- Go 模組：檢查是否使用 `aiva_common_go/schemas/generated`\n';
#               commentBody += '- Rust 模組：檢查是否實現標準 schema 結構\n';
#               commentBody += '- TypeScript 模組：檢查是否使用 `schemas/aiva_schemas`\n\n';
#               
#               commentBody += '### 💡 修復建議\n';
#               commentBody += '1. 移除所有自定義 `FindingPayload` 定義\n';
#               commentBody += '2. 使用對應語言的標準 schema 導入\n';
#               commentBody += '3. 確保所有字段名稱符合標準格式\n\n';
#               
#               if (!success) {
#                 commentBody += '> ⚠️ 此 PR 包含 Schema 合規性問題，建議在合併前修復。\n';
#               }
#               
#             } else {
#               commentBody += '⚠️ 無法讀取檢查結果，請檢查工作流配置。\n';
#             }
#           } catch (error) {
#             commentBody += `❌ 處理檢查結果時出錯: ${error.message}\n`;
#           }
#           
#           commentBody += '\n---\n*由 AIVA Schema 合規性檢查器自動生成*';
#           
#           // 查找現有評論
#           const { data: comments } = await github.rest.issues.listComments({
#             owner: context.repo.owner,
#             repo: context.repo.repo,
#             issue_number: context.issue.number
#           });
#           
#           const existingComment = comments.find(comment => 
#             comment.user.type === 'Bot' && 
#             comment.body.includes('Schema 合規性檢查結果')
#           );
#           
#           if (existingComment) {
#             // 更新現有評論
#             await github.rest.issues.updateComment({
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               comment_id: existingComment.id,
#               body: commentBody
#             });
#           } else {
#             // 創建新評論
#             await github.rest.issues.createComment({
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               issue_number: context.issue.number,
#               body: commentBody
#             });
#           }
#     
#     - name: Fail on non-compliance
#       if: steps.schema_check.outcome == 'failure'
#       run: |
#         echo "Schema compliance check failed. Please fix the issues before merging."
#         exit 1