package analyzer

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/kyle0527/aiva/services/function/function_sca_go/internal/vulndb"
	"go.uber.org/zap"
)

// EnhancedSCAAnalyzer 增強的 SCA 分析器
type EnhancedSCAAnalyzer struct {
        depAnalyzer *DependencyAnalyzer
        vulnDB      vulndb.VulnDatabase
        logger      *zap.Logger
        config      *SCAConfig
}// SCAConfig SCA 分析器配置
type SCAConfig struct {
	MaxConcurrency  int           `json:"max_concurrency"`
	Timeout         time.Duration `json:"timeout"`
	EnableDeepScan  bool          `json:"enable_deep_scan"`
	IncludeDevDeps  bool          `json:"include_dev_deps"`
	SupportedLangs  []string      `json:"supported_languages"`
	VulnSeverityMin string        `json:"vuln_severity_min"`
	CacheResults    bool          `json:"cache_results"`
}

// ScanResult SCA 掃描結果
type ScanResult struct {
	ProjectPath     string                 `json:"project_path"`
	TotalDeps       int                    `json:"total_dependencies"`
	VulnerableDeps  int                    `json:"vulnerable_dependencies"`
	TotalVulns      int                    `json:"total_vulnerabilities"`
	LanguageStats   map[string]int         `json:"language_stats"`
	Dependencies    []analyzer.Dependency  `json:"dependencies"`
	Vulnerabilities []vulndb.Vulnerability `json:"vulnerabilities"`
	ScanDuration    time.Duration          `json:"scan_duration"`
	Metadata        map[string]interface{} `json:"metadata,omitempty"`
}

// NewEnhancedSCAAnalyzer 創建增強的 SCA 分析器
func NewEnhancedSCAAnalyzer(logger *zap.Logger, config *SCAConfig) *EnhancedSCAAnalyzer {
	return &EnhancedSCAAnalyzer{
		depAnalyzer: analyzer.NewDependencyAnalyzer(logger),
		vulnDB:      vulndb.NewOSVDatabase(logger),
		logger:      logger,
		config:      config,
	}
}

// ScanProject 掃描整個專案
func (esa *EnhancedSCAAnalyzer) ScanProject(ctx context.Context, projectPath string) (*ScanResult, error) {
	startTime := time.Now()

	esa.logger.Info("Starting enhanced SCA scan",
		zap.String("project", projectPath),
		zap.Bool("deep_scan", esa.config.EnableDeepScan))

	// 第一階段：分析依賴
	deps, err := esa.depAnalyzer.AnalyzeProject(projectPath)
	if err != nil {
		return nil, fmt.Errorf("failed to analyze dependencies: %w", err)
	}

	// 過濾開發依賴（如果需要）
	if !esa.config.IncludeDevDeps {
		deps = filterDevDependencies(deps)
	}

	esa.logger.Info("Dependencies analysis completed",
		zap.Int("total_deps", len(deps)))

	// 第二階段：漏洞檢查
	vulnDeps, allVulns, err := esa.checkVulnerabilities(ctx, deps)
	if err != nil {
		esa.logger.Error("Vulnerability check failed", zap.Error(err))
		// 繼續執行，但記錄錯誤
	}

	// 第三階段：統計分析
	langStats := generateLanguageStats(deps)

	result := &ScanResult{
		ProjectPath:     projectPath,
		TotalDeps:       len(deps),
		VulnerableDeps:  len(vulnDeps),
		TotalVulns:      len(allVulns),
		LanguageStats:   langStats,
		Dependencies:    deps,
		Vulnerabilities: allVulns,
		ScanDuration:    time.Since(startTime),
		Metadata: map[string]interface{}{
			"scan_timestamp": time.Now().UTC(),
			"deep_scan":      esa.config.EnableDeepScan,
			"include_dev":    esa.config.IncludeDevDeps,
		},
	}

	esa.logger.Info("SCA scan completed",
		zap.Duration("duration", result.ScanDuration),
		zap.Int("total_deps", result.TotalDeps),
		zap.Int("vulnerable_deps", result.VulnerableDeps),
		zap.Int("total_vulns", result.TotalVulns))

	return result, nil
}

// checkVulnerabilities 檢查依賴的漏洞
func (esa *EnhancedSCAAnalyzer) checkVulnerabilities(ctx context.Context, deps []analyzer.Dependency) ([]analyzer.Dependency, []vulndb.Vulnerability, error) {
	var vulnDeps []analyzer.Dependency
	var allVulns []vulndb.Vulnerability

	// 使用工作池並發檢查漏洞
	type vulnJob struct {
		dep   analyzer.Dependency
		index int
	}

	type vulnResult struct {
		dep   analyzer.Dependency
		vulns []vulndb.Vulnerability
		index int
		err   error
	}

	jobs := make(chan vulnJob, len(deps))
	results := make(chan vulnResult, len(deps))

	// 啟動工作者
	var wg sync.WaitGroup
	maxWorkers := esa.config.MaxConcurrency
	if maxWorkers <= 0 {
		maxWorkers = 10
	}

	for i := 0; i < maxWorkers; i++ {
		wg.Add(1)
		go func() {
			defer wg.Done()
			for job := range jobs {
				select {
				case <-ctx.Done():
					return
				default:
					vulns, err := esa.vulnDB.CheckVulnerabilities(
						job.dep.Name,
						job.dep.Version,
						job.dep.Language,
					)
					results <- vulnResult{
						dep:   job.dep,
						vulns: vulns,
						index: job.index,
						err:   err,
					}
				}
			}
		}()
	}

	// 提交工作
	go func() {
		for i, dep := range deps {
			jobs <- vulnJob{dep: dep, index: i}
		}
		close(jobs)
	}()

	// 關閉結果通道
	go func() {
		wg.Wait()
		close(results)
	}()

	// 收集結果
	processedCount := 0
	for result := range results {
		processedCount++

		if result.err != nil {
			esa.logger.Warn("Failed to check vulnerabilities",
				zap.String("package", result.dep.Name),
				zap.Error(result.err))
			continue
		}

		if len(result.vulns) > 0 {
			// 更新依賴的漏洞資訊
			result.dep.Vulnerabilities = convertVulns(result.vulns)
			vulnDeps = append(vulnDeps, result.dep)
			allVulns = append(allVulns, result.vulns...)
		}

		// 進度報告
		if processedCount%100 == 0 {
			esa.logger.Info("Vulnerability check progress",
				zap.Int("processed", processedCount),
				zap.Int("total", len(deps)))
		}
	}

	return vulnDeps, allVulns, nil
}

// 輔助函數
func filterDevDependencies(deps []analyzer.Dependency) []analyzer.Dependency {
	var filtered []analyzer.Dependency
	for _, dep := range deps {
		if dep.Type != "dev" {
			filtered = append(filtered, dep)
		}
	}
	return filtered
}

func generateLanguageStats(deps []analyzer.Dependency) map[string]int {
	stats := make(map[string]int)
	for _, dep := range deps {
		stats[dep.Language]++
	}
	return stats
}

func convertVulns(osvVulns []vulndb.Vulnerability) []analyzer.Vulnerability {
	var vulns []analyzer.Vulnerability
	for _, v := range osvVulns {
		vulns = append(vulns, analyzer.Vulnerability{
			ID:          v.ID,
			Severity:    v.Severity,
			Description: v.Summary,
			CVSS:        v.CVSS,
			References:  v.References,
		})
	}
	return vulns
}

// DefaultSCAConfig 預設 SCA 配置
func DefaultSCAConfig() *SCAConfig {
	return &SCAConfig{
		MaxConcurrency:  10,
		Timeout:         5 * time.Minute,
		EnableDeepScan:  true,
		IncludeDevDeps:  false,
		SupportedLangs:  []string{"JavaScript", "Python", "Go", "Rust", "Java", "PHP", "Ruby", "C#"},
		VulnSeverityMin: "MEDIUM",
		CacheResults:    true,
	}
}
