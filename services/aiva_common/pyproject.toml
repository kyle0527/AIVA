[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "aiva-common"
version = "1.0.0"
description = "AIVA Common - 通用模組與標準化數據結構"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "AIVA Team", email = "team@aiva.platform"},
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Security",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
dependencies = [
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "typing-extensions>=4.8.0",
    "annotated-types>=0.6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.0.0",
]
async = [
    "aiofiles>=23.0.0",
    "aiohttp>=3.8.0",
    "asyncpg>=0.28.0",
    "aioredis>=2.0.0",
]
testing = [
    "pytest-asyncio>=0.21.0",
    "factory-boy>=3.3.0",
    "freezegun>=1.2.0",
    "pytest-mock>=3.11.0",
]
cli = [
    "click>=8.1.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
]
observability = [
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
    "structlog>=23.0.0",
    "prometheus-client>=0.17.0",
]
plugins = [
    "pluggy>=1.3.0",
    "importlib-metadata>=6.0.0; python_version<'3.10'",
]

[project.urls]
Homepage = "https://github.com/kyle0527/AIVA"
Documentation = "https://github.com/kyle0527/AIVA/tree/main/docs"
Repository = "https://github.com/kyle0527/AIVA.git"
"Bug Tracker" = "https://github.com/kyle0527/AIVA/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["aiva_common*"]

[tool.setuptools.package-data]
"aiva_common" = ["py.typed", "*.yaml", "*.json"]

# Black formatting
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'

# Ruff linting
[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py

# MyPy type checking
[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=aiva_common",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["aiva_common"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]