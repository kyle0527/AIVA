"""
滲透測試和安全評估相關枚舉

此模組定義了 AIVA 滲透測試系統中使用的各種枚舉類型，
基於行業標準和最佳實踐，包括 OWASP、NIST、MITRE ATT&CK 等框架。

符合標準:
- OWASP Testing Guide v4.2
- NIST Cybersecurity Framework
- MITRE ATT&CK Framework
- PTES (Penetration Testing Execution Standard)
- OSSTMM (Open Source Security Testing Methodology Manual)
- NIST SP 800-115 (Technical Guide to Information Security Testing)
"""

from enum import Enum

# ============================================================================
# OWASP 標準相關
# ============================================================================


class OWASPTop10(str, Enum):
    """OWASP Top 10 2021 漏洞分類"""

    A01_BROKEN_ACCESS_CONTROL = "A01:2021-Broken Access Control"
    A02_CRYPTOGRAPHIC_FAILURES = "A02:2021-Cryptographic Failures"
    A03_INJECTION = "A03:2021-Injection"
    A04_INSECURE_DESIGN = "A04:2021-Insecure Design"
    A05_SECURITY_MISCONFIGURATION = "A05:2021-Security Misconfiguration"
    A06_VULNERABLE_COMPONENTS = "A06:2021-Vulnerable and Outdated Components"
    A07_IDENTIFICATION_FAILURES = "A07:2021-Identification and Authentication Failures"
    A08_SOFTWARE_INTEGRITY_FAILURES = "A08:2021-Software and Data Integrity Failures"
    A09_LOGGING_FAILURES = "A09:2021-Security Logging and Monitoring Failures"
    A10_SSRF = "A10:2021-Server-Side Request Forgery"


class OWASPTestingCategory(str, Enum):
    """OWASP 測試類別 (基於 OWASP Testing Guide)"""

    # Information Gathering
    INFO_GATHERING = "01_information_gathering"
    CONFIGURATION_DEPLOY_MGMT = "02_configuration_and_deployment_management"
    IDENTITY_MANAGEMENT = "03_identity_management"
    AUTHENTICATION = "04_authentication_testing"
    AUTHORIZATION = "05_authorization_testing"
    SESSION_MANAGEMENT = "06_session_management"
    INPUT_VALIDATION = "07_input_validation"
    ERROR_HANDLING = "08_error_handling"
    WEAK_CRYPTOGRAPHY = "09_weak_cryptography"
    BUSINESS_LOGIC = "10_business_logic"
    CLIENT_SIDE = "11_client_side_testing"


class OWASPRiskRating(str, Enum):
    """OWASP 風險評級方法"""

    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    NOTE = "note"


# ============================================================================
# MITRE ATT&CK 框架相關
# ============================================================================


class MITRETactic(str, Enum):
    """MITRE ATT&CK 戰術 (Tactics)"""

    INITIAL_ACCESS = "TA0001"  # Initial Access
    EXECUTION = "TA0002"  # Execution
    PERSISTENCE = "TA0003"  # Persistence
    PRIVILEGE_ESCALATION = "TA0004"  # Privilege Escalation
    DEFENSE_EVASION = "TA0005"  # Defense Evasion
    CREDENTIAL_ACCESS = "TA0006"  # Credential Access
    DISCOVERY = "TA0007"  # Discovery
    LATERAL_MOVEMENT = "TA0008"  # Lateral Movement
    COLLECTION = "TA0009"  # Collection
    COMMAND_AND_CONTROL = "TA0011"  # Command and Control
    EXFILTRATION = "TA0010"  # Exfiltration
    IMPACT = "TA0040"  # Impact


class MITREMatrix(str, Enum):
    """MITRE ATT&CK 矩陣"""

    ENTERPRISE = "enterprise"
    MOBILE = "mobile"
    ICS = "ics"  # Industrial Control Systems


class MITREPlatform(str, Enum):
    """MITRE ATT&CK 平台"""

    WINDOWS = "windows"
    MACOS = "macos"
    LINUX = "linux"
    CLOUD = "cloud"
    NETWORK = "network"
    CONTAINERS = "containers"
    SAAS = "saas"
    IAAS = "iaas"
    ANDROID = "android"
    IOS = "ios"


# ============================================================================
# 滲透測試階段和方法
# ============================================================================


class PentestPhase(str, Enum):
    """滲透測試階段 (基於 PTES 標準)"""

    PRE_ENGAGEMENT = "pre_engagement"
    INTELLIGENCE_GATHERING = "intelligence_gathering"
    THREAT_MODELING = "threat_modeling"
    VULNERABILITY_ANALYSIS = "vulnerability_analysis"
    EXPLOITATION = "exploitation"
    POST_EXPLOITATION = "post_exploitation"
    REPORTING = "reporting"


class ReconnaissanceType(str, Enum):
    """偵察類型"""

    PASSIVE = "passive"
    ACTIVE = "active"
    SEMI_PASSIVE = "semi_passive"


class InformationGatheringMethod(str, Enum):
    """信息收集方法"""

    OSINT = "osint"  # Open Source Intelligence
    DNS_ENUMERATION = "dns_enumeration"
    SUBDOMAIN_ENUMERATION = "subdomain_enumeration"
    PORT_SCANNING = "port_scanning"
    SERVICE_ENUMERATION = "service_enumeration"
    WEB_CRAWLING = "web_crawling"
    SOCIAL_ENGINEERING = "social_engineering"
    PHYSICAL_RECONNAISSANCE = "physical_reconnaissance"
    WIRELESS_RECONNAISSANCE = "wireless_reconnaissance"


class ExploitationType(str, Enum):
    """漏洞利用類型"""

    MANUAL = "manual"
    AUTOMATED = "automated"
    SEMI_AUTOMATED = "semi_automated"
    PROOF_OF_CONCEPT = "proof_of_concept"
    WEAPONIZED = "weaponized"


class PostExploitationGoal(str, Enum):
    """後滲透目標"""

    PERSISTENCE = "persistence"
    PRIVILEGE_ESCALATION = "privilege_escalation"
    LATERAL_MOVEMENT = "lateral_movement"
    DATA_EXFILTRATION = "data_exfiltration"
    EVIDENCE_COLLECTION = "evidence_collection"
    IMPACT_ASSESSMENT = "impact_assessment"
    CLEANUP = "cleanup"


# ============================================================================
# 漏洞掃描和評估
# ============================================================================


class ScanType(str, Enum):
    """掃描類型"""

    NETWORK_SCAN = "network_scan"
    WEB_APPLICATION_SCAN = "web_application_scan"
    DATABASE_SCAN = "database_scan"
    WIRELESS_SCAN = "wireless_scan"
    CONFIGURATION_SCAN = "configuration_scan"
    COMPLIANCE_SCAN = "compliance_scan"
    MALWARE_SCAN = "malware_scan"
    CONTAINER_SCAN = "container_scan"
    CLOUD_SCAN = "cloud_scan"
    MOBILE_SCAN = "mobile_scan"


class ScanDepth(str, Enum):
    """掃描深度"""

    SURFACE = "surface"
    SHALLOW = "shallow"
    MEDIUM = "medium"
    DEEP = "deep"
    COMPREHENSIVE = "comprehensive"


class FalsePositiveRisk(str, Enum):
    """誤報風險級別"""

    VERY_LOW = "very_low"
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    VERY_HIGH = "very_high"


class ValidationMethod(str, Enum):
    """驗證方法"""

    MANUAL_VERIFICATION = "manual_verification"
    AUTOMATED_VERIFICATION = "automated_verification"
    EXPLOIT_CONFIRMATION = "exploit_confirmation"
    CODE_REVIEW = "code_review"
    CONFIGURATION_REVIEW = "configuration_review"
    DOCUMENTATION_REVIEW = "documentation_review"


# ============================================================================
# Web 應用程序安全測試
# ============================================================================


class WebVulnerabilityType(str, Enum):
    """Web 應用程序漏洞類型"""

    # Injection Flaws
    SQL_INJECTION = "sql_injection"
    NOSQL_INJECTION = "nosql_injection"
    LDAP_INJECTION = "ldap_injection"
    OS_COMMAND_INJECTION = "os_command_injection"
    CODE_INJECTION = "code_injection"
    XPATH_INJECTION = "xpath_injection"
    TEMPLATE_INJECTION = "template_injection"

    # Cross-Site Scripting
    REFLECTED_XSS = "reflected_xss"
    STORED_XSS = "stored_xss"
    DOM_XSS = "dom_xss"

    # Authentication & Session Management
    BROKEN_AUTHENTICATION = "broken_authentication"
    SESSION_FIXATION = "session_fixation"
    SESSION_HIJACKING = "session_hijacking"
    WEAK_PASSWORD_POLICY = "weak_password_policy"

    # Access Control
    IDOR = "idor"  # Insecure Direct Object References
    PRIVILEGE_ESCALATION = "privilege_escalation"
    FORCED_BROWSING = "forced_browsing"

    # Security Configuration
    SECURITY_MISCONFIGURATION = "security_misconfiguration"
    DEFAULT_CREDENTIALS = "default_credentials"
    INFORMATION_DISCLOSURE = "information_disclosure"

    # Request Forgery
    CSRF = "csrf"  # Cross-Site Request Forgery
    SSRF = "ssrf"  # Server-Side Request Forgery

    # File Handling
    UNRESTRICTED_FILE_UPLOAD = "unrestricted_file_upload"
    PATH_TRAVERSAL = "path_traversal"
    LOCAL_FILE_INCLUSION = "local_file_inclusion"
    REMOTE_FILE_INCLUSION = "remote_file_inclusion"

    # XML Security
    XXE = "xxe"  # XML External Entity
    XML_INJECTION = "xml_injection"

    # Business Logic
    BUSINESS_LOGIC_FLAW = "business_logic_flaw"
    RACE_CONDITION = "race_condition"

    # Cryptographic Issues
    WEAK_CRYPTOGRAPHY = "weak_cryptography"
    INSECURE_RANDOMNESS = "insecure_randomness"

    # API Security
    API_ABUSE = "api_abuse"
    GRAPHQL_INJECTION = "graphql_injection"
    REST_API_VULNERABILITIES = "rest_api_vulnerabilities"


class HTTPTestMethod(str, Enum):
    """HTTP 測試方法"""

    GET = "GET"
    POST = "POST"
    PUT = "PUT"
    DELETE = "DELETE"
    PATCH = "PATCH"
    HEAD = "HEAD"
    OPTIONS = "OPTIONS"
    TRACE = "TRACE"
    CONNECT = "CONNECT"


class AuthenticationMethod(str, Enum):
    """認證方法"""

    BASIC_AUTH = "basic_auth"
    DIGEST_AUTH = "digest_auth"
    FORM_BASED = "form_based"
    JWT = "jwt"
    OAUTH2 = "oauth2"
    SAML = "saml"
    API_KEY = "api_key"
    CERTIFICATE = "certificate"
    BIOMETRIC = "biometric"
    MFA = "mfa"  # Multi-Factor Authentication


# ============================================================================
# 網絡安全測試
# ============================================================================


class NetworkTestType(str, Enum):
    """網絡測試類型"""

    PORT_SCAN = "port_scan"
    SERVICE_ENUMERATION = "service_enumeration"
    BANNER_GRABBING = "banner_grabbing"
    VULNERABILITY_SCAN = "vulnerability_scan"
    SNIFFING = "sniffing"
    SPOOFING = "spoofing"
    DOS_TESTING = "dos_testing"
    FIREWALL_BYPASS = "firewall_bypass"
    WIRELESS_TESTING = "wireless_testing"


class PortState(str, Enum):
    """端口狀態"""

    OPEN = "open"
    CLOSED = "closed"
    FILTERED = "filtered"
    UNFILTERED = "unfiltered"
    OPEN_FILTERED = "open_filtered"
    CLOSED_FILTERED = "closed_filtered"


class NetworkProtocol(str, Enum):
    """網絡協議"""

    TCP = "tcp"
    UDP = "udp"
    ICMP = "icmp"
    HTTP = "http"
    HTTPS = "https"
    FTP = "ftp"
    SSH = "ssh"
    TELNET = "telnet"
    SMTP = "smtp"
    POP3 = "pop3"
    IMAP = "imap"
    DNS = "dns"
    DHCP = "dhcp"
    SNMP = "snmp"
    LDAP = "ldap"
    SMB = "smb"
    RDP = "rdp"
    VNC = "vnc"


# ============================================================================
# 移動應用安全測試
# ============================================================================


class MobilePlatform(str, Enum):
    """移動平台"""

    ANDROID = "android"
    IOS = "ios"
    WINDOWS_MOBILE = "windows_mobile"
    HYBRID = "hybrid"
    CROSS_PLATFORM = "cross_platform"


class MobileTestCategory(str, Enum):
    """移動應用測試類別"""

    STATIC_ANALYSIS = "static_analysis"
    DYNAMIC_ANALYSIS = "dynamic_analysis"
    INTERACTIVE_ANALYSIS = "interactive_analysis"
    NETWORK_ANALYSIS = "network_analysis"
    PLATFORM_INTERACTION = "platform_interaction"
    DATA_STORAGE = "data_storage"
    CRYPTOGRAPHY = "cryptography"
    AUTHENTICATION = "authentication"
    NETWORK_COMMUNICATION = "network_communication"
    ENVIRONMENTAL_INTERACTION = "environmental_interaction"


class MobileVulnerabilityType(str, Enum):
    """移動應用漏洞類型"""

    INSECURE_DATA_STORAGE = "insecure_data_storage"
    WEAK_SERVER_SIDE_CONTROLS = "weak_server_side_controls"
    INSUFFICIENT_TRANSPORT_LAYER = "insufficient_transport_layer"
    UNINTENDED_DATA_LEAKAGE = "unintended_data_leakage"
    POOR_AUTHORIZATION = "poor_authorization"
    BROKEN_CRYPTOGRAPHY = "broken_cryptography"
    CLIENT_SIDE_INJECTION = "client_side_injection"
    SECURITY_DECISIONS_VIA_UNTRUSTED_INPUTS = "security_decisions_via_untrusted_inputs"
    IMPROPER_SESSION_HANDLING = "improper_session_handling"
    LACK_OF_BINARY_PROTECTIONS = "lack_of_binary_protections"


# ============================================================================
# 雲安全測試
# ============================================================================


class CloudProvider(str, Enum):
    """雲服務提供商"""

    AWS = "aws"
    AZURE = "azure"
    GCP = "gcp"
    ALIBABA_CLOUD = "alibaba_cloud"
    IBM_CLOUD = "ibm_cloud"
    ORACLE_CLOUD = "oracle_cloud"
    DIGITAL_OCEAN = "digital_ocean"
    HEROKU = "heroku"
    PRIVATE_CLOUD = "private_cloud"
    HYBRID_CLOUD = "hybrid_cloud"


class CloudServiceType(str, Enum):
    """雲服務類型"""

    IAAS = "iaas"  # Infrastructure as a Service
    PAAS = "paas"  # Platform as a Service
    SAAS = "saas"  # Software as a Service
    FAAS = "faas"  # Function as a Service
    CAAS = "caas"  # Container as a Service
    DAAS = "daas"  # Desktop as a Service


class CloudTestArea(str, Enum):
    """雲安全測試領域"""

    IDENTITY_ACCESS_MANAGEMENT = "identity_access_management"
    DATA_PROTECTION = "data_protection"
    INFRASTRUCTURE_SECURITY = "infrastructure_security"
    LOGGING_MONITORING = "logging_monitoring"
    INCIDENT_RESPONSE = "incident_response"
    COMPLIANCE = "compliance"
    NETWORK_SECURITY = "network_security"
    CONTAINER_SECURITY = "container_security"
    SERVERLESS_SECURITY = "serverless_security"
    API_SECURITY = "api_security"


# ============================================================================
# 社會工程測試
# ============================================================================


class SocialEngineeringType(str, Enum):
    """社會工程類型"""

    PHISHING = "phishing"
    SPEAR_PHISHING = "spear_phishing"
    VISHING = "vishing"  # Voice Phishing
    SMISHING = "smishing"  # SMS Phishing
    PRETEXTING = "pretexting"
    BAITING = "baiting"
    QUID_PRO_QUO = "quid_pro_quo"
    TAILGATING = "tailgating"
    DUMPSTER_DIVING = "dumpster_diving"
    SHOULDER_SURFING = "shoulder_surfing"


class SocialEngineeringVector(str, Enum):
    """社會工程攻擊向量"""

    EMAIL = "email"
    PHONE = "phone"
    SMS = "sms"
    SOCIAL_MEDIA = "social_media"
    PHYSICAL = "physical"
    USB_DROPS = "usb_drops"
    WEBSITES = "websites"
    INSTANT_MESSAGING = "instant_messaging"


# ============================================================================
# 物理安全測試
# ============================================================================


class PhysicalTestType(str, Enum):
    """物理安全測試類型"""

    LOCK_PICKING = "lock_picking"
    ACCESS_CONTROL_BYPASS = "access_control_bypass"
    SURVEILLANCE_ASSESSMENT = "surveillance_assessment"
    ALARM_SYSTEM_TESTING = "alarm_system_testing"
    SOCIAL_ENGINEERING_ONSITE = "social_engineering_onsite"
    RFID_CLONING = "rfid_cloning"
    BADGE_CLONING = "badge_cloning"
    DUMPSTER_DIVING = "dumpster_diving"
    FACILITY_RECONNAISSANCE = "facility_reconnaissance"


# ============================================================================
# 無線網絡安全測試
# ============================================================================


class WirelessStandard(str, Enum):
    """無線標準"""

    WIFI_802_11A = "802.11a"
    WIFI_802_11B = "802.11b"
    WIFI_802_11G = "802.11g"
    WIFI_802_11N = "802.11n"
    WIFI_802_11AC = "802.11ac"
    WIFI_802_11AX = "802.11ax"  # WiFi 6
    BLUETOOTH = "bluetooth"
    ZIGBEE = "zigbee"
    NFC = "nfc"
    CELLULAR_3G = "3g"
    CELLULAR_4G = "4g"
    CELLULAR_5G = "5g"


class WirelessSecurity(str, Enum):
    """無線安全協議"""

    WEP = "wep"
    WPA = "wpa"
    WPA2 = "wpa2"
    WPA3 = "wpa3"
    WPS = "wps"
    OPEN = "open"
    EAP = "eap"
    PEAP = "peap"
    TTLS = "ttls"


class WirelessAttackType(str, Enum):
    """無線攻擊類型"""

    DEAUTHENTICATION = "deauthentication"
    EVIL_TWIN = "evil_twin"
    WPS_BRUTE_FORCE = "wps_brute_force"
    WEP_CRACKING = "wep_cracking"
    WPA_HANDSHAKE_CAPTURE = "wpa_handshake_capture"
    ROGUE_ACCESS_POINT = "rogue_access_point"
    JAMMING = "jamming"
    PACKET_INJECTION = "packet_injection"
    BLUETOOTH_ATTACKS = "bluetooth_attacks"


# ============================================================================
# 報告和合規性
# ============================================================================


class ReportType(str, Enum):
    """報告類型"""

    EXECUTIVE_SUMMARY = "executive_summary"
    TECHNICAL_REPORT = "technical_report"
    DETAILED_FINDINGS = "detailed_findings"
    COMPLIANCE_REPORT = "compliance_report"
    REMEDIATION_PLAN = "remediation_plan"
    RISK_ASSESSMENT = "risk_assessment"
    PENETRATION_TEST_REPORT = "penetration_test_report"
    VULNERABILITY_ASSESSMENT = "vulnerability_assessment"


class ComplianceFramework(str, Enum):
    """合規框架"""

    PCI_DSS = "pci_dss"
    HIPAA = "hipaa"
    SOX = "sox"
    GDPR = "gdpr"
    ISO_27001 = "iso_27001"
    NIST_CSF = "nist_csf"
    CIS_CONTROLS = "cis_controls"
    SOC2 = "soc2"
    FedRAMP = "fedramp"
    FISMA = "fisma"


class EvidenceType(str, Enum):
    """證據類型"""

    SCREENSHOT = "screenshot"
    LOG_FILE = "log_file"
    NETWORK_CAPTURE = "network_capture"
    CODE_SNIPPET = "code_snippet"
    CONFIGURATION_FILE = "configuration_file"
    COMMAND_OUTPUT = "command_output"
    VIDEO_RECORDING = "video_recording"
    DOCUMENTATION = "documentation"
    EXPLOIT_CODE = "exploit_code"
    PAYLOAD = "payload"


# ============================================================================
# 威脅建模
# ============================================================================


class ThreatModelingMethodology(str, Enum):
    """威脅建模方法論"""

    STRIDE = "stride"
    PASTA = "pasta"
    VAST = "vast"
    TRIKE = "trike"
    OCTAVE = "octave"
    ATTACK_TREES = "attack_trees"
    RISK_ASSESSMENT = "risk_assessment"


class ThreatCategory(str, Enum):
    """威脅類別 (STRIDE)"""

    SPOOFING = "spoofing"
    TAMPERING = "tampering"
    REPUDIATION = "repudiation"
    INFORMATION_DISCLOSURE = "information_disclosure"
    DENIAL_OF_SERVICE = "denial_of_service"
    ELEVATION_OF_PRIVILEGE = "elevation_of_privilege"


class AssetType(str, Enum):
    """資產類型"""

    DATA = "data"
    SOFTWARE = "software"
    HARDWARE = "hardware"
    NETWORK = "network"
    PERSONNEL = "personnel"
    FACILITIES = "facilities"
    REPUTATION = "reputation"
    INTELLECTUAL_PROPERTY = "intellectual_property"


# ============================================================================
# 工具和自動化
# ============================================================================


class PentestTool(str, Enum):
    """滲透測試工具"""

    NMAP = "nmap"
    BURP_SUITE = "burp_suite"
    OWASP_ZAP = "owasp_zap"
    METASPLOIT = "metasploit"
    SQLMAP = "sqlmap"
    NIKTO = "nikto"
    DIRB = "dirb"
    GOBUSTER = "gobuster"
    JOHN_THE_RIPPER = "john_the_ripper"
    HASHCAT = "hashcat"
    AIRCRACK_NG = "aircrack_ng"
    WIRESHARK = "wireshark"
    NESSUS = "nessus"
    OPENVAS = "openvas"
    ACUNETIX = "acunetix"
    VERACODE = "veracode"
    CHECKMARX = "checkmarx"
    SONARQUBE = "sonarqube"


class AutomationLevel(str, Enum):
    """自動化級別"""

    FULLY_MANUAL = "fully_manual"
    SEMI_AUTOMATED = "semi_automated"
    FULLY_AUTOMATED = "fully_automated"
    AI_ASSISTED = "ai_assisted"
    MACHINE_LEARNING = "machine_learning"


class TestExecutionMode(str, Enum):
    """測試執行模式"""

    INTERACTIVE = "interactive"
    BATCH = "batch"
    CONTINUOUS = "continuous"
    SCHEDULED = "scheduled"
    EVENT_DRIVEN = "event_driven"
    ON_DEMAND = "on_demand"
