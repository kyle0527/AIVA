AIVA Go SCA 服務架構樹狀圖
Generated: 2025-10-14
================================================================================

function_sca_go/
├─ bin/                                    # 編譯輸出目錄
│  └─ sca-worker.exe                       # 可執行文件 (Windows)
│
├─ cmd/                                    # 命令入口點
│  └─ worker/                              # Worker 主程式
│     └─ main.go                           # 應用程式入口
│                                          # - RabbitMQ 消費者
│                                          # - 任務處理協調
│                                          # - 優雅關閉處理
│
├─ internal/                               # 內部實現 (不可匯出)
│  │
│  ├─ analyzer/                            # 依賴分析模組
│  │  ├─ dependency_analyzer.go            # 多語言依賴解析器
│  │  │                                    # - 支持 8 種語言
│  │  │                                    # - JavaScript/Node.js
│  │  │                                    # - Python
│  │  │                                    # - Go
│  │  │                                    # - Rust
│  │  │                                    # - Java/Maven
│  │  │                                    # - PHP
│  │  │                                    # - Ruby
│  │  │                                    # - C#/.NET
│  │  │
│  │  ├─ enhanced_analyzer.go              # 增強 SCA 分析器
│  │  │                                    # - 並發漏洞檢查
│  │  │                                    # - Worker Pool 模式
│  │  │                                    # - 上下文超時處理
│  │  │                                    # - 漏洞數據整合
│  │  │
│  │  ├─ enhanced_analyzer.go.backup       # 備份文件 (待清理)
│  │  └─ enhanced_analyzer.go.broken       # 損壞備份 (待清理)
│  │
│  ├─ scanner/                             # 掃描器模組
│  │  └─ sca_scanner.go                    # SCA 掃描器實現
│  │                                       # - Git 倉庫克隆
│  │                                       # - 套件文件檢測
│  │                                       # - OSV-Scanner 集成
│  │                                       # - Finding 轉換
│  │
│  └─ vulndb/                              # 漏洞資料庫模組
│     └─ osv.go                            # OSV API 客戶端
│                                          # - 漏洞查詢接口
│                                          # - HTTP 連接池
│                                          # - 生態系統映射
│                                          # - 數據轉換
│
├─ pkg/                                    # 公共包 (可匯出)
│  │
│  ├─ models/                              # 業務模型定義
│  │  └─ models.go                         # 核心業務模型
│  │                                       # - FunctionTaskPayload
│  │                                       # - FindingPayload
│  │                                       # - 使用 schemas 別名
│  │
│  └─ schemas/                             # 統一數據結構
│     └─ schemas.go                        # 標準化 Schema 定義
│                                          # - CommonVulnerability
│                                          # - CommonDependency
│                                          # - ScanResult
│                                          # - FindingPayload
│                                          # - 時間戳記和元數據
│
├─ .golangci.yml                           # Linting 配置
│                                          # - 20+ 啟用的 linters
│                                          # - 自定義規則配置
│
├─ go.mod                                  # Go 模組定義
│                                          # - Go 1.21+
│                                          # - 依賴管理
│
├─ go.sum                                  # 依賴鎖定文件
│                                          # - 確保可重現構建
│
├─ GO_SCA_OPTIMIZATION_REPORT.md           # 優化分析報告
│                                          # - 架構分析
│                                          # - 性能優化建議
│                                          # - 實施路線圖
│
├─ MIGRATION_REPORT.md                     # 遷移報告
│                                          # - Python to Go 遷移記錄
│
├─ README.md                               # 項目說明文件
│
└─ ARCHITECTURE_TREE.txt                   # 本架構樹狀圖

================================================================================

📊 統計摘要
────────────────────────────────────────────────────────────────────────────

總文件數:        15 個 Go 源文件
                 3 個配置文件
                 4 個文檔文件
                 1 個可執行文件
                 2 個備份文件 (待清理)

代碼行數估算:    ~2,500 行 Go 代碼
                 (不含註釋和空行)

支持的語言:      8 種編程語言
                 - JavaScript (npm)
                 - Python (PyPI)
                 - Go (Go modules)
                 - Rust (crates.io)
                 - Java (Maven)
                 - PHP (Packagist)
                 - Ruby (RubyGems)
                 - C#/.NET (NuGet)

外部依賴:        - go.uber.org/zap (日誌)
                 - RabbitMQ (消息隊列)
                 - OSV API (漏洞資料庫)
                 - Common Go 模組 (共享功能)

================================================================================

🔧 模組職責說明
────────────────────────────────────────────────────────────────────────────

1️⃣ cmd/worker (命令模組)
   ├─ 職責: 應用程式啟動和任務協調
   ├─ 輸入: RabbitMQ 任務消息
   ├─ 輸出: RabbitMQ Finding 結果
   └─ 特性: 優雅關閉、錯誤恢復

2️⃣ internal/analyzer (分析模組)
   ├─ 職責: 依賴解析和漏洞分析
   ├─ 輸入: 項目路徑、配置文件
   ├─ 輸出: Dependency 列表、Vulnerability 列表
   └─ 特性: 多語言支持、並發處理

3️⃣ internal/scanner (掃描模組)
   ├─ 職責: 項目掃描和 OSV 集成
   ├─ 輸入: Git URL 或本地路徑
   ├─ 輸出: FindingPayload 列表
   └─ 特性: 自動克隆、文件檢測、結果轉換

4️⃣ internal/vulndb (漏洞庫模組)
   ├─ 職責: 漏洞資料庫查詢
   ├─ 輸入: 套件名稱、版本、語言
   ├─ 輸出: Vulnerability 列表
   └─ 特性: OSV API、生態系統映射

5️⃣ pkg/schemas (數據模組)
   ├─ 職責: 統一數據結構定義
   ├─ 特性: 標準化、可擴展、類型安全
   └─ 用途: 跨模組數據交換

================================================================================

🎯 架構設計原則
────────────────────────────────────────────────────────────────────────────

✅ 單一職責原則 (SRP)
   每個模組專注於單一功能領域

✅ 依賴注入 (DI)
   通過接口定義解耦模組依賴

✅ 接口隔離 (ISP)
   最小化接口設計，提高靈活性

✅ 開放封閉原則 (OCP)
   通過 schemas 擴展而非修改現有代碼

✅ 並發安全
   使用 context、sync 包確保線程安全

✅ 錯誤處理
   明確的錯誤傳播和處理策略

================================================================================

📈 性能特性
────────────────────────────────────────────────────────────────────────────

並發處理:        Worker Pool (20 workers)
                 Semaphore 限流控制

內存優化:        預分配切片容量
                 指針傳遞大型結構

超時控制:        Context 超時機制
                 可配置的超時時間

資源管理:        自動清理臨時文件
                 連接池復用

快取策略:        (待實施)
                 結果快取、模型快取

================================================================================

🔒 安全特性
────────────────────────────────────────────────────────────────────────────

路徑驗證:        防止路徑遍歷攻擊
                 validateFilePath 函數

錯誤處理:        所有 defer 錯誤檢查
                 資源洩漏防護

輸入驗證:        (部分實施)
                 URL 格式驗證

命令安全:        (待加強)
                 Git 命令白名單

API 安全:        HTTP 超時設置
                 連接池限制

================================================================================

📝 待辦事項
────────────────────────────────────────────────────────────────────────────

高優先級:
  □ 清理備份文件 (.backup, .broken)
  □ 完善單元測試 (目標 80%+ 覆蓋率)
  □ 實施 Git URL 白名單驗證
  □ 優化大型結構體傳值

中優先級:
  □ 添加集成測試
  □ 配置外部化 (YAML/ENV)
  □ 實施結果快取機制
  □ 完善錯誤追蹤

低優先級:
  □ 性能基準測試
  □ API 文檔生成 (godoc)
  □ 使用示例文檔
  □ 監控指標導出

================================================================================

End of Architecture Tree
